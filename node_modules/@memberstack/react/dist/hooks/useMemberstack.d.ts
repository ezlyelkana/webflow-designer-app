export declare const useMemberstack: () => {
    openModal: (type: "LOGIN" | "SIGNUP" | "FORGOT_PASSWORD" | "RESET_PASSWORD", params?: {}) => Promise<unknown>;
    hideModal: () => void;
    _hideLoader: (element?: any) => void;
    _showLoader: (element?: any) => void;
    _showMessage: (msg: any, isError: any) => void;
    getMemberCookie: () => any;
    onAuthChange: (cb: any) => {
        unsubscribe: () => boolean;
    };
} & {
    getApp(): Promise<{
        data: {
            id: string;
            name: string;
            mode: "live" | "sandbox";
            plans: {
                id: string;
                name: string;
                description: string;
                status: string;
                redirects: {
                    afterLogin: string;
                    afterLogout: string;
                    afterSignup: string;
                };
                prices?: [] | {
                    id: string;
                    amount: string;
                    interval: {
                        type: string;
                        count: number;
                    };
                    name: string;
                    type: string;
                    status: string;
                    currency: string;
                }[];
            }[];
            contentGroups: {
                id: string;
                name: string;
                key: string;
                allowAllMembers: boolean;
                redirect: string;
                urls: {
                    url: string;
                    filter: string;
                }[];
                plans: {
                    id: string;
                }[];
            }[];
        };
    }>;
    getAuthProviders(): Promise<{
        data: {
            id: string;
            name: string;
            mode: "live" | "sandbox";
            plans: {
                id: string;
                name: string;
                description: string;
                status: string;
                redirects: {
                    afterLogin: string;
                    afterLogout: string;
                    afterSignup: string;
                };
                prices?: [] | {
                    id: string;
                    amount: string;
                    interval: {
                        type: string;
                        count: number;
                    };
                    name: string;
                    type: string;
                    status: string;
                    currency: string;
                }[];
            }[];
            contentGroups: {
                id: string;
                name: string;
                key: string;
                allowAllMembers: boolean;
                redirect: string;
                urls: {
                    url: string;
                    filter: string;
                }[];
                plans: {
                    id: string;
                }[];
            }[];
        };
    }>;
    loginMemberEmailPassword(params: import("@memberstack/dom/lib/types").LoginMemberEmailPasswordParams): Promise<{
        data: {
            tokens: {
                accessToken: string;
                expires: number;
                type: "bearer";
            };
            member: {
                id: string;
                auth: {
                    email: string;
                };
                stripeCustomerId: string;
                createdAt: string;
                metaData: object;
                customFields: object;
                permissions: [] | string[];
                planConnections: {
                    id: string;
                    active: boolean;
                    status: string;
                    planId: string;
                    type: string;
                    payment: {
                        amount: number;
                        currency: string;
                        status: string;
                        lastBillingDate: number;
                        nextBillingDate: number;
                        cancelAtDate: number;
                        lastInvoice: string;
                        lastReceipt: string;
                        card: string;
                    };
                }[];
            };
            redirect: string;
            loginRedirect: string;
            payment: {
                requirePayment: string[];
                requireAuthentication: string[];
            };
        };
    }>;
    loginMemberAuthProvider(params: import("@memberstack/dom/lib/types").LoginMemberAuthProviderParams): Promise<{
        data: {
            tokens: {
                accessToken: string;
                expires: number;
                type: "bearer";
            };
            member: {
                id: string;
                auth: {
                    email: string;
                };
                stripeCustomerId: string;
                createdAt: string;
                metaData: object;
                customFields: object;
                permissions: [] | string[];
                planConnections: {
                    id: string;
                    active: boolean;
                    status: string;
                    planId: string;
                    type: string;
                    payment: {
                        amount: number;
                        currency: string;
                        status: string;
                        lastBillingDate: number;
                        nextBillingDate: number;
                        cancelAtDate: number;
                        lastInvoice: string;
                        lastReceipt: string;
                        card: string;
                    };
                }[];
            };
            redirect: string;
            loginRedirect: string;
            payment: {
                requirePayment: string[];
                requireAuthentication: string[];
            };
        };
    }>;
    getPlan(params: import("@memberstack/dom/lib/types").GetPlanParams): Promise<{
        data: {
            id: string;
            name: string;
            description: string;
            status: string;
            redirects: {
                afterLogin: string;
                afterLogout: string;
                afterSignup: string;
            };
            prices?: [] | {
                id: string;
                amount: string;
                interval: {
                    type: string;
                    count: number;
                };
                name: string;
                type: string;
                status: string;
                currency: string;
            }[];
        };
    }>;
    getPlans(): Promise<{
        data: {
            id: string;
            name: string;
            description: string;
            status: string;
            redirects: {
                afterLogin: string;
                afterLogout: string;
                afterSignup: string;
            };
            prices?: [] | {
                id: string;
                amount: string;
                interval: {
                    type: string;
                    count: number;
                };
                name: string;
                type: string;
                status: string;
                currency: string;
            }[];
        }[];
    }>;
    getRestrictedUrlGroups(): Promise<{
        data: {
            id: string;
            name: string;
            key: string;
            allowAllMembers: boolean;
            redirect: string;
            urls: {
                url: string;
                filter: string;
            }[];
            plans: {
                id: string;
            }[];
        }[];
    }>;
    getCurrentMember(options?: import("@memberstack/dom/lib/methods/requests").GetCurrentMemberParams): Promise<{
        data: {
            id: string;
            auth: {
                email: string;
            };
            stripeCustomerId: string;
            createdAt: string;
            metaData: object;
            customFields: object;
            permissions: [] | string[];
            planConnections: {
                id: string;
                active: boolean;
                status: string;
                planId: string;
                type: string;
                payment: {
                    amount: number;
                    currency: string;
                    status: string;
                    lastBillingDate: number;
                    nextBillingDate: number;
                    cancelAtDate: number;
                    lastInvoice: string;
                    lastReceipt: string;
                    card: string;
                };
            }[];
        };
    }>;
    getMemberJSON(options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            json: object;
        };
    }>;
    updateMemberJSON(params: import("@memberstack/dom/lib/types").UpdateMemberJSONParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            json: object;
        };
    }>;
    getMemberCards(options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            id: string;
            brand: string;
            expMonth: string;
            expYear: string;
            last4: string;
            default: boolean;
        }[];
    }>;
    getMemberInvoices(params?: import("@memberstack/dom/lib/types").GetMemberInvoicesParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        hasNext: boolean;
        endCursor: string;
        totalCount: number;
        data: {
            id: string;
            status: string;
            amount: number;
            url: string;
            description: string;
            number: string;
            planConnection: string;
            createdAt: string;
            currency: string;
        }[];
    }>;
    getMemberReceipts(params?: import("@memberstack/dom/lib/types").GetMemberReceiptsParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        hasNext: boolean;
        endCursor: string;
        totalCount: number;
        data: {
            id: string;
            amount: number;
            url: string;
            stripe?: {
                url: string;
            };
            number: string;
            purchase: string;
            invoice: string;
            createdAt: string;
            currency: string;
        }[];
    }>;
    getAuthenticationClientSecret(params: import("@memberstack/dom/lib/types").GetAuthenticationClientSecretParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: string;
    }>;
    getTotalCheckoutAmount(params: import("@memberstack/dom/lib/types").GetTotalCheckoutAmountParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            total: number;
            subTotal: number;
            currency: string;
            setupFee?: {
                enabled: boolean;
                amount: number;
                name: string;
            };
            freeTrial?: {
                days: number;
                enabled: boolean;
            };
            tax?: {
                name: string;
                percent: number;
                description: string;
            }[];
        };
    }>;
    purchasePlans(params: import("@memberstack/dom/lib/types").PurchasePlansParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            plan: string;
            payment: {
                requiresPayment: boolean;
                requiresAuthentication: boolean;
            };
        };
    }>;
    addPlan(params: import("@memberstack/dom/lib/types").AddPlanParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            redirect: string;
            planConnection: {
                id: string;
                active: boolean;
                status: string;
                planId: string;
                type: string;
                payment: {
                    amount: number;
                    currency: string;
                    status: string;
                    lastBillingDate: number;
                    nextBillingDate: number;
                    cancelAtDate: number;
                    lastInvoice: string;
                    lastReceipt: string;
                    card: string;
                };
            };
        };
    }>;
    purchasePlansWithCheckout(params: import("@memberstack/dom/lib/types").PurchasePlansWithCheckoutParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            url: string;
        };
    }>;
    launchStripeCustomerPortal(params: import("@memberstack/dom/lib/types").LaunchStripeCustomerPortalParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            url: string;
        };
    }>;
    cancelPlan(params: import("@memberstack/dom/lib/types").CancelPlanParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            id: string;
            auth: {
                email: string;
            };
            stripeCustomerId: string;
            createdAt: string;
            metaData: object;
            customFields: object;
            permissions: [] | string[];
            planConnections: {
                id: string;
                active: boolean;
                status: string;
                planId: string;
                type: string;
                payment: {
                    amount: number;
                    currency: string;
                    status: string;
                    lastBillingDate: number;
                    nextBillingDate: number;
                    cancelAtDate: number;
                    lastInvoice: string;
                    lastReceipt: string;
                    card: string;
                };
            }[];
        };
    }>;
    updateMember(params: import("@memberstack/dom/lib/types").UpdateMemberParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            id: string;
            auth: {
                email: string;
            };
            stripeCustomerId: string;
            createdAt: string;
            metaData: object;
            customFields: object;
            permissions: [] | string[];
            planConnections: {
                id: string;
                active: boolean;
                status: string;
                planId: string;
                type: string;
                payment: {
                    amount: number;
                    currency: string;
                    status: string;
                    lastBillingDate: number;
                    nextBillingDate: number;
                    cancelAtDate: number;
                    lastInvoice: string;
                    lastReceipt: string;
                    card: string;
                };
            }[];
        };
    }>;
    updateMemberAuth(params: import("@memberstack/dom/lib/types").UpdateMemberAuthParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            id: string;
            auth: {
                email: string;
            };
            stripeCustomerId: string;
            createdAt: string;
            metaData: object;
            customFields: object;
            permissions: [] | string[];
            planConnections: {
                id: string;
                active: boolean;
                status: string;
                planId: string;
                type: string;
                payment: {
                    amount: number;
                    currency: string;
                    status: string;
                    lastBillingDate: number;
                    nextBillingDate: number;
                    cancelAtDate: number;
                    lastInvoice: string;
                    lastReceipt: string;
                    card: string;
                };
            }[];
        };
    }>;
    addCard(params: import("@memberstack/dom/lib/types").AddMemberCardParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            id: string;
            auth: {
                email: string;
            };
            stripeCustomerId: string;
            createdAt: string;
            metaData: object;
            customFields: object;
            permissions: [] | string[];
            planConnections: {
                id: string;
                active: boolean;
                status: string;
                planId: string;
                type: string;
                payment: {
                    amount: number;
                    currency: string;
                    status: string;
                    lastBillingDate: number;
                    nextBillingDate: number;
                    cancelAtDate: number;
                    lastInvoice: string;
                    lastReceipt: string;
                    card: string;
                };
            }[];
        };
    }>;
    updateDefaultCard(params: import("@memberstack/dom/lib/types").UpdateDefaultCardParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            id: string;
            auth: {
                email: string;
            };
            stripeCustomerId: string;
            createdAt: string;
            metaData: object;
            customFields: object;
            permissions: [] | string[];
            planConnections: {
                id: string;
                active: boolean;
                status: string;
                planId: string;
                type: string;
                payment: {
                    amount: number;
                    currency: string;
                    status: string;
                    lastBillingDate: number;
                    nextBillingDate: number;
                    cancelAtDate: number;
                    lastInvoice: string;
                    lastReceipt: string;
                    card: string;
                };
            }[];
        };
    }>;
    updatePlanPayment(params: import("@memberstack/dom/lib/types").UpdatePlanPaymentParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            id: string;
            auth: {
                email: string;
            };
            stripeCustomerId: string;
            createdAt: string;
            metaData: object;
            customFields: object;
            permissions: [] | string[];
            planConnections: {
                id: string;
                active: boolean;
                status: string;
                planId: string;
                type: string;
                payment: {
                    amount: number;
                    currency: string;
                    status: string;
                    lastBillingDate: number;
                    nextBillingDate: number;
                    cancelAtDate: number;
                    lastInvoice: string;
                    lastReceipt: string;
                    card: string;
                };
            }[];
        };
    }>;
    signupMemberEmailPassword(params: import("@memberstack/dom/lib/types").SignupMemberEmailPasswordParams): Promise<{
        data: {
            tokens: {
                accessToken: string;
                expires: number;
                type: "bearer";
            };
            member: {
                id: string;
                auth: {
                    email: string;
                };
                stripeCustomerId: string;
                createdAt: string;
                metaData: object;
                customFields: object;
                permissions: [] | string[];
                planConnections: {
                    id: string;
                    active: boolean;
                    status: string;
                    planId: string;
                    type: string;
                    payment: {
                        amount: number;
                        currency: string;
                        status: string;
                        lastBillingDate: number;
                        nextBillingDate: number;
                        cancelAtDate: number;
                        lastInvoice: string;
                        lastReceipt: string;
                        card: string;
                    };
                }[];
            };
            redirect: string;
            loginRedirect: string;
            payment: {
                requirePayment: string[];
                requireAuthentication: string[];
            };
        };
    }>;
    signupMemberAuthProvider(params: import("@memberstack/dom/lib/types").SignupMemberAuthProviderParams): Promise<{
        data: {
            tokens: {
                accessToken: string;
                expires: number;
                type: "bearer";
            };
            member: {
                id: string;
                auth: {
                    email: string;
                };
                stripeCustomerId: string;
                createdAt: string;
                metaData: object;
                customFields: object;
                permissions: [] | string[];
                planConnections: {
                    id: string;
                    active: boolean;
                    status: string;
                    planId: string;
                    type: string;
                    payment: {
                        amount: number;
                        currency: string;
                        status: string;
                        lastBillingDate: number;
                        nextBillingDate: number;
                        cancelAtDate: number;
                        lastInvoice: string;
                        lastReceipt: string;
                        card: string;
                    };
                }[];
            };
            redirect: string;
            loginRedirect: string;
            payment: {
                requirePayment: string[];
                requireAuthentication: string[];
            };
        };
    }>;
    sendMemberResetPasswordEmail(params: import("@memberstack/dom/lib/types").SendMemberResetPasswordEmailParams): Promise<{
        data: string;
    }>;
    resetMemberPassword(params: import("@memberstack/dom/lib/types").ResetMemberPasswordParams): Promise<{
        data: {
            id: string;
            auth: {
                email: string;
            };
            stripeCustomerId: string;
            createdAt: string;
            metaData: object;
            customFields: object;
            permissions: [] | string[];
            planConnections: {
                id: string;
                active: boolean;
                status: string;
                planId: string;
                type: string;
                payment: {
                    amount: number;
                    currency: string;
                    status: string;
                    lastBillingDate: number;
                    nextBillingDate: number;
                    cancelAtDate: number;
                    lastInvoice: string;
                    lastReceipt: string;
                    card: string;
                };
            }[];
        };
    }>;
    logout(options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            redirect?: string;
        };
    }>;
    replacePlan(params: import("@memberstack/dom/lib/types").ReplacePlanParams, options?: import("@memberstack/dom/lib/methods/requests").MemberstackOptions): Promise<{
        data: {
            plan: string;
            payment: {
                requiresPayment: boolean;
                requiresAuthentication: boolean;
            };
        };
    }>;
    decodeToken({ token }: {
        token: string;
    }): Promise<Pick<import("jose").JWTPayload, "iat" | "exp"> & {
        id: string;
        type: "member";
    }>;
};
