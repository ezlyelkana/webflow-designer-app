'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var msDom = _interopDefault(require('@memberstack/dom'));

var MemberstackContext = /*#__PURE__*/React.createContext({
  memberstack: null
});
var useMemberstackContext = function useMemberstackContext() {
  return React.useContext(MemberstackContext);
};
var MemberstackProvider = function MemberstackProvider(props) {
  var memberstack = msDom.init(props.config);
  React.useEffect(function () {
    var loader = setInterval(function () {
      var _window$__MSDOM;

      if (!((_window$__MSDOM = window.__MSDOM) != null && _window$__MSDOM.load) && !document.getElementById("_ms-iframe")) {
        var _window$__MSDOM2;

        (_window$__MSDOM2 = window.__MSDOM) == null ? void 0 : _window$__MSDOM2.load({
          publicKey: props.config.publicKey
        });
      } else {
        clearInterval(loader);
      }
    }, 200);
    return function () {
      return clearInterval(loader);
    };
  }, []);
  return React.createElement(MemberstackContext.Provider, {
    value: {
      memberstack: memberstack
    }
  }, props.children);
};

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var useMemberstack = function useMemberstack() {
  var _useMemberstackContex = useMemberstackContext(),
      memberstack = _useMemberstackContex.memberstack;

  if (!memberstack) {
    throw new Error("useMemberstack can only be used within <MemberstackProvider>");
  }

  return memberstack;
};

var State;

(function (State) {
  State["LOADING"] = "LOADING";
  State["UNAUTHORIZED"] = "UNAUTHORIZED";
  State["AUTHORIZED"] = "AUTHORIZED";
})(State || (State = {}));

var MemberstackProtected = function MemberstackProtected(props) {
  var memberstack = useMemberstack();

  var _React$useState = React.useState(State.LOADING),
      state = _React$useState[0],
      setState = _React$useState[1];

  if (!memberstack) {
    throw new Error("<MemberstackProtected> can only be used within <MemberstackProvider>");
  }

  function getMemberAuthorization(member) {
    if (!member) {
      setState(State.UNAUTHORIZED);
      return;
    }

    var _ref = props.allow || {},
        permissions = _ref.permissions,
        plans = _ref.plans;

    if (permissions != null && permissions.length) {
      if (!permissions.some(function (per) {
        var _member$permissions;

        return member == null ? void 0 : (_member$permissions = member.permissions) == null ? void 0 : _member$permissions.includes(per);
      })) {
        setState(State.UNAUTHORIZED);
        return;
      }
    }

    if (plans != null && plans.length) {
      if (!plans.some(function (planId) {
        var _member$planConnectio;

        return member == null ? void 0 : (_member$planConnectio = member.planConnections) == null ? void 0 : _member$planConnectio.find(function (con) {
          return con.planId === planId;
        });
      })) {
        setState(State.UNAUTHORIZED);
        return;
      }
    }

    setState(member ? State.AUTHORIZED : State.UNAUTHORIZED);
  }

  function getMember() {
    return _getMember.apply(this, arguments);
  }

  function _getMember() {
    _getMember = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var _yield$memberstack$ge, member;

      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return memberstack.getCurrentMember();

            case 2:
              _yield$memberstack$ge = _context.sent;
              member = _yield$memberstack$ge.data;
              getMemberAuthorization(member);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _getMember.apply(this, arguments);
  }

  React.useEffect(function () {
    var isMounted = true;
    var listener;

    if (isMounted) {
      listener = memberstack == null ? void 0 : memberstack.onAuthChange(getMemberAuthorization);
      getMember();
    }

    return function () {
      var _listener;

      isMounted = false;
      (_listener = listener) == null ? void 0 : _listener.unsubscribe();
    };
  }, []);

  switch (state) {
    case State.LOADING:
      return props.fallback || null;

    case State.AUTHORIZED:
      return props.children;

    case State.UNAUTHORIZED:
      if (React.isValidElement(props.onUnauthorized)) {
        return props.onUnauthorized;
      }

      if (typeof props.onUnauthorized === "function") {
        props.onUnauthorized();
      }

      return null;

    default:
      return null;
  }
};

var State$1;

(function (State) {
  State["LOADING"] = "LOADING";
  State["UNAUTHORIZED"] = "UNAUTHORIZED";
  State["AUTHORIZED"] = "AUTHORIZED";
})(State$1 || (State$1 = {}));

var useAuth = function useAuth() {
  var memberstack = useMemberstack();

  var _React$useState = React.useState(null),
      auth = _React$useState[0],
      setAuth = _React$useState[1];

  function getMemberAuthorization(currentMember) {
    currentMember ? setAuth({
      userId: currentMember.id,
      status: State$1.AUTHORIZED
    }) : setAuth({
      userId: null,
      status: State$1.UNAUTHORIZED
    });
    return;
  }

  function getMember() {
    return _getMember.apply(this, arguments);
  }

  function _getMember() {
    _getMember = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var _yield$memberstack$ge, currentMember;

      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return memberstack.getCurrentMember();

            case 2:
              _yield$memberstack$ge = _context2.sent;
              currentMember = _yield$memberstack$ge.data;
              getMemberAuthorization(currentMember);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _getMember.apply(this, arguments);
  }

  React.useEffect(function () {
    var isMounted = true;
    var listener;

    if (isMounted) {
      listener = memberstack == null ? void 0 : memberstack.onAuthChange(getMemberAuthorization);
      getMember();
    }

    return function () {
      var _listener;

      isMounted = false;
      (_listener = listener) == null ? void 0 : _listener.unsubscribe();
    };
  }, []);
  return _extends({}, auth, {
    isLoggedIn: (auth == null ? void 0 : auth.status) === State$1.AUTHORIZED,
    getToken: function getToken() {
      return memberstack.getMemberCookie();
    },
    signOut: function () {
      var _signOut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return memberstack.logout();

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function signOut() {
        return _signOut.apply(this, arguments);
      }

      return signOut;
    }()
  });
};

var useMember = function useMember() {
  var memberstack = useMemberstack();

  var _React$useState = React.useState(null),
      member = _React$useState[0],
      setMember = _React$useState[1];

  var _React$useState2 = React.useState(null),
      memberJSON = _React$useState2[0],
      setMemberJSON = _React$useState2[1];

  function getMember() {
    return _getMember.apply(this, arguments);
  }

  function _getMember() {
    _getMember = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var _yield$memberstack$ge, currentMember, _yield$memberstack$ge2, jsonData;

      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              _context6.next = 3;
              return memberstack.getCurrentMember();

            case 3:
              _yield$memberstack$ge = _context6.sent;
              currentMember = _yield$memberstack$ge.data;
              currentMember ? setMember(currentMember) : setMember(null);
              _context6.next = 8;
              return memberstack.getMemberJSON();

            case 8:
              _yield$memberstack$ge2 = _context6.sent;
              jsonData = _yield$memberstack$ge2.data;
              jsonData ? setMemberJSON(jsonData == null ? void 0 : jsonData.json) : setMemberJSON(null);
              _context6.next = 16;
              break;

            case 13:
              _context6.prev = 13;
              _context6.t0 = _context6["catch"](0);
              console.log(_context6.t0);

            case 16:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, null, [[0, 13]]);
    }));
    return _getMember.apply(this, arguments);
  }

  React.useEffect(function () {
    getMember();
  }, []);
  return {
    member: member,
    memberJSON: memberJSON,
    updateEmail: function () {
      var _updateEmail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(email) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return memberstack.updateMemberAuth({
                  email: email
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function updateEmail(_x) {
        return _updateEmail.apply(this, arguments);
      }

      return updateEmail;
    }(),
    updatePassword: function () {
      var _updatePassword = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(oldPassword, newPassword) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return memberstack.updateMemberAuth({
                  oldPassword: oldPassword,
                  newPassword: newPassword
                });

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function updatePassword(_x2, _x3) {
        return _updatePassword.apply(this, arguments);
      }

      return updatePassword;
    }(),
    updateMetadata: function () {
      var _updateMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(metaData) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return memberstack.updateMember({
                  metaData: metaData
                });

              case 2:
                return _context3.abrupt("return", _context3.sent);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function updateMetadata(_x4) {
        return _updateMetadata.apply(this, arguments);
      }

      return updateMetadata;
    }(),
    updateCustomFields: function () {
      var _updateCustomFields = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(customFields) {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return memberstack.updateMember({
                  customFields: customFields
                });

              case 2:
                return _context4.abrupt("return", _context4.sent);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function updateCustomFields(_x5) {
        return _updateCustomFields.apply(this, arguments);
      }

      return updateCustomFields;
    }(),
    updateMemberJSON: function () {
      var _updateMemberJSON = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(json) {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return memberstack.updateMemberJSON({
                  json: json
                });

              case 2:
                return _context5.abrupt("return", _context5.sent);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function updateMemberJSON(_x6) {
        return _updateMemberJSON.apply(this, arguments);
      }

      return updateMemberJSON;
    }()
  };
};

// if includeFalseVals is true, then the returned array will
// include false values and zero values || exclude undefined and null values
// otherwise, it will only return truthy values.
var filterNullableValues = function filterNullableValues(obj, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$includeFalseVals = _ref.includeFalseVals,
      includeFalseVals = _ref$includeFalseVals === void 0 ? false : _ref$includeFalseVals;

  return Object.entries(obj).filter(function (_ref2) {
    var y = _ref2[1];
    return includeFalseVals ? y !== null && y !== undefined : y;
  }).reduce(function (acc, cur) {
    var _extends2;

    return _extends({}, acc, (_extends2 = {}, _extends2[cur[0]] = cur[1], _extends2));
  }, {});
};

var useMemberstackModal = function useMemberstackModal() {
  var memberstack = useMemberstack();
  var config = React.useRef(null);

  var _React$useState = React.useState(false),
      setShow = _React$useState[1];

  function openModal(openModalProps) {
    config.current = filterNullableValues(_extends({}, config.current, {
      type: openModalProps.type,
      planId: openModalProps.planId,
      priceId: openModalProps.priceId,
      onCompleted: openModalProps.onCompleted,
      onError: openModalProps.onError
    }));
    setShow(true); // @ts-ignore
    //if (!loaded || visible) return;

    return memberstack.openModal(config.current.type, filterNullableValues({
      planId: config.current.planId,
      priceId: config.current.priceId
    }) // filterNullableValues({
    //   onCompleted: config.current.onCompleted,
    //   onError: config.current.onError,
    // })
    );
  }

  function hideModal() {
    setShow(false);
    return memberstack.hideModal();
  }

  return {
    openModal: openModal,
    hideModal: hideModal
  };
};

var useCheckout = function useCheckout() {
  var memberstack = useMemberstack();

  var checkout = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return memberstack.purchasePlansWithCheckout( //@ts-ignore
              filterNullableValues({
                priceId: params.priceId,
                cancelUrl: params.cancelUrl,
                successUrl: params.successUrl,
                autoRedirect: params.autoRedirect
              }, {
                includeFalseVals: true
              }));

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function checkout(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  return checkout;
};

var useCustomerPortal = function useCustomerPortal(params) {
  var memberstack = useMemberstack();

  var launchPortal = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return memberstack.launchStripeCustomerPortal( //@ts-ignore
              filterNullableValues({
                priceIds: params.priceIds,
                returnUrl: params.returnUrl,
                autoRedirect: params.autoRedirect
              }, {
                includeFalseVals: true
              }));

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function launchPortal() {
      return _ref.apply(this, arguments);
    };
  }();

  return launchPortal;
};

var modalFactory = function modalFactory(_ref) {
  var type = _ref.type;
  return function ModalComponent(props) {
    var _useMemberstackModal = useMemberstackModal(),
        openModal = _useMemberstackModal.openModal,
        hideModal = _useMemberstackModal.hideModal;

    React.useEffect(function () {
      openModal({
        type: type,
        planId: props.planId,
        priceId: props.priceId
      }).then(function (_ref2) {
        return hideModal();
      });
    }, []);
    return null;
  };
};

var SignInModal = /*#__PURE__*/modalFactory({
  type: "LOGIN"
});
var SignUpModal = /*#__PURE__*/modalFactory({
  type: "SIGNUP"
});
var ProfileModal = /*#__PURE__*/modalFactory({
  type: "PROFILE"
});

var logicWrapper = function logicWrapper(fn) {
  return function LogicWrapper(props) {
    var auth = useAuth();
    var condition = React.useMemo(function () {
      return fn(auth);
    }, [auth]);

    if (auth.status === State$1.LOADING) {
      return props.fallback || null;
    }

    return condition ? props.children : null;
  };
};

var LoggedIn = /*#__PURE__*/logicWrapper(function (auth) {
  return auth.isLoggedIn;
});
var LoggedOut = /*#__PURE__*/logicWrapper(function (auth) {
  return !auth.isLoggedIn;
});

console.log("Memberstack React has initialized");

exports.LoggedIn = LoggedIn;
exports.LoggedOut = LoggedOut;
exports.MemberstackProtected = MemberstackProtected;
exports.MemberstackProvider = MemberstackProvider;
exports.ProfileModal = ProfileModal;
exports.SignInModal = SignInModal;
exports.SignUpModal = SignUpModal;
exports.useAuth = useAuth;
exports.useCheckout = useCheckout;
exports.useCustomerPortal = useCustomerPortal;
exports.useMember = useMember;
exports.useMemberstack = useMemberstack;
exports.useMemberstackModal = useMemberstackModal;
//# sourceMappingURL=react.cjs.development.js.map
