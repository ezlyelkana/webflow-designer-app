var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/utils/cookies.ts
import Cookie from "js-cookie";
var memberAuthTokenName = "_ms-mid";
function isLocalStorageAvailable() {
  try {
    localStorage.setItem("test", "test");
    localStorage.removeItem("test");
    return true;
  } catch (e) {
    return false;
  }
}
var localStorageAvailable = isLocalStorageAvailable();
var setCookieOnRootDomain = false;
var removeMemberToken = () => {
  if (localStorageAvailable) {
    localStorage.removeItem(memberAuthTokenName);
  }
  const domain = window.location.hostname.split(".").slice(-2).join(".");
  Cookie.set(memberAuthTokenName, "", __spreadValues({
    expires: -1,
    sameSite: "strict"
  }, setCookieOnRootDomain && { domain }));
  Cookie.set(memberAuthTokenName, "", {
    expires: -1,
    sameSite: "strict"
  });
};

// src/auth/index.ts
var createObservable = () => {
  const observer = /* @__PURE__ */ new Map();
  return {
    subscribe: (key, fn) => {
      if (typeof fn !== "function")
        return;
      return observer.set(key, fn);
    },
    unsubscribe: (key) => {
      return observer.delete(key);
    },
    notify: (data) => {
      return [...observer.values()].forEach((fn) => fn(data));
    }
  };
};
var observable = createObservable();
var getPersistedMember = () => {
  return JSON.parse(localStorage == null ? void 0 : localStorage.getItem("_ms-mem"));
};
var setPersistedMember = (member) => {
  if (member) {
    const data = JSON.stringify(member);
    if (data)
      localStorage == null ? void 0 : localStorage.setItem("_ms-mem", data);
    observable.notify(member);
  }
};
var updatePersistedMember = (member) => {
  if (member) {
    const data = JSON.stringify(member);
    if (data)
      localStorage == null ? void 0 : localStorage.setItem("_ms-mem", data);
  } else {
    localStorage == null ? void 0 : localStorage.removeItem("_ms-mem");
    removeMemberToken();
  }
};
var unsetPersistedMember = () => {
  localStorage == null ? void 0 : localStorage.removeItem("_ms-mem");
  removeMemberToken();
  observable.notify(null);
};
var onAuthChange = (cb) => {
  const id = Math.floor(Math.random() * 1e3);
  observable.subscribe(id, cb);
  return {
    unsubscribe: () => observable.unsubscribe(id)
  };
};
export {
  getPersistedMember,
  onAuthChange,
  setPersistedMember,
  unsetPersistedMember,
  updatePersistedMember
};
