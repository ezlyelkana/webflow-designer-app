var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/utils/defaultMessageBox.ts
var closeIcon;
if (typeof window !== "undefined") {
  closeIcon = document.createElement("div");
  closeIcon.setAttribute("id", "ms-status-close");
  closeIcon.setAttribute("data-ms-message-close", "");
  closeIcon.innerHTML = `<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z" fill="white"/></svg>`;
}
var addSuccessBox = () => {
  const successStatusIcon = document.createElement("div");
  successStatusIcon.setAttribute("id", "ms-status-icon");
  successStatusIcon.innerHTML = `<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="10" cy="10" r="10" fill="#62d37f"/><path d="M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0Zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8Zm4.59-12.42L8 12.17 5.41 9.59 4 11l4 4 8-8-1.41-1.42Z" fill="#fff"/></svg>`;
  const successHTML = `<div data-ms-message class="ms-error-message">
		${successStatusIcon.outerHTML}
		<div id="ms-message" data-ms-message-text></div>
		${closeIcon.outerHTML}
		</div>`;
  const successdiv = document.createElement("div");
  successdiv.setAttribute("data-ms-message", "success");
  successdiv.innerHTML = successHTML;
  successdiv.style.display = "none";
  document.body.appendChild(successdiv);
};
var addErrorBox = () => {
  const errorStatusIcon = document.createElement("div");
  errorStatusIcon.setAttribute("id", "ms-status-icon");
  errorStatusIcon.innerHTML = `<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM11 15H9V13H11V15ZM11 11H9V5H11V11Z" fill="#E40023"/></svg>`;
  const errorHTML = `<div data-ms-message class="ms-error-message">
		${errorStatusIcon.outerHTML}
		<div id="ms-message" data-ms-message-text></div>
		${closeIcon.outerHTML}
		</div>`;
  const errordiv = document.createElement("div");
  errordiv.setAttribute("data-ms-message", "error");
  errordiv.innerHTML = errorHTML;
  errordiv.style.display = "none";
  document.body.appendChild(errordiv);
};
var initCSS = () => {
  const cssEl = document.createElement("style");
  const css = `
		@keyframes fadeIn {
			0% {
				opacity: 0;
			}
			100% {
				opacity: 1;
			}
		}
		.ms-error-message { 
				position: fixed;
				left: 50%;
				bottom: 3%;
				transform: translate(-50%, -50%);
				margin: 0 auto;
				z-index: 10000000; 
				display: flex; 
				align-items: center;
				padding: 12px 16px;
				border-radius: 8px; 
				background-color: #0A0A0A; 
				color: #fff; 
				font-size: 16.8px; 
				line-height: 28px; 
				font-weight: 500; 
				transform-origin: center;
				animation: fadeIn 0.2s ease-in;
				-webkit-animation: fadeIn 0.2s ease-in;
				-moz-animation: fadeIn 0.2s ease-in;
				-o-animation: fadeIn 0.2s ease-in;
				-ms-animation: fadeIn 0.2s ease-in;
			}
			#ms-status-icon {
				width: 20px;
				height: 20px;
				margin-right: 12px;
				}
				#ms-status-close {
					margin-left: 20px;
					cursor: pointer;
					}
					#ms-status-close svg {
						height: 12px;
					}`;
  cssEl.setAttribute("data-ms-style", "");
  cssEl.appendChild(document.createTextNode(css));
  document.head.appendChild(cssEl);
};

// src/methods/dom/main-dom.js
function noop() {
}
var identity = (x) => x;
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return tar;
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
var src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function exclude_internal_props(props) {
  const result = {};
  for (const k in props)
    if (k[0] !== "$")
      result[k] = props[k];
  return result;
}
function compute_rest_props(props, keys) {
  const rest = {};
  keys = new Set(keys);
  for (const k in props)
    if (!keys.has(k) && k[0] !== "$")
      rest[k] = props[k];
  return rest;
}
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
var tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
  return style.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
  return function(event) {
    event.preventDefault();
    return fn.call(this, event);
  };
}
function stop_propagation(fn) {
  return function(event) {
    event.stopPropagation();
    return fn.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.data === data)
    return;
  text2.data = data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, cancelable, detail);
  return e;
}
function construct_svelte_component(component, props) {
  return new component(props);
}
var managed_styles = /* @__PURE__ */ new Map();
var active = 0;
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i--)
    hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return hash2 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn(t, 1 - t)}}
`;
  }
  const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next = previous.filter(
    name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
    // remove all Svelte animations
  );
  const deleted = previous.length - next.length;
  if (deleted) {
    node.style.animation = next.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { ownerNode } = info.stylesheet;
      if (ownerNode)
        detach(ownerNode);
    });
    managed_styles.clear();
  });
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = /* @__PURE__ */ Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
var null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn, params, intro) {
  const options = { direction: "both" };
  let config = fn(node, params, options);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init3(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay, easing, css);
      }
      if (b)
        tick(0, 1);
      running_program = init3(program, duration);
      add_render_callback(() => dispatch(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init3(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick(t, 1 - t);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          config = config(options);
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block2, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  const updates = [];
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block2(key, child_ctx);
      block.c();
    } else if (dynamic) {
      updates.push(() => block.p(child_ctx, dirty));
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  run_all(updates);
  return new_blocks;
}
function bind(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    flush();
  }
  set_current_component(parent_component);
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};
var subscriber_queue = [];
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}
var AppStore = writable({
  initialValue: true,
  customFields: [],
  isPaid: false,
  branding: {
    logo: "",
    colors: {
      lightMode: {}
    }
  },
  authProviders: [],
  additionalAuthMethods: {
    passwordless: {
      enabled: false,
      isDefault: false
    }
  }
});
var TextStore = writable({
  text: {
    // "login_to_your_account": "Login to your account (T)",
    // "dont_have_an_account": "Don't have an account? (T)",
    // "email_address": "Email Address (T)",
    // "email_error_message": "Please enter a valid email address (T)",
    // "password": "Password (T)",
    // "password_placeholder": "Enter password (T)",
    // "password_error_message": "Minimum 8 characters required (T)",
    // "forgot_password": "Forgot password? (T)",
    // "login": "Log in (T)",
    // "continue_with": "Continue with (T)",
    // "or": "or (T)",
    // "reset_your_password": "Reset your password (T)",
    // "reset_instructions": "We’ll email you a secure link to reset the password for your account. (T)",
    // "reset": "Send link (T)",
    // "reset_already_have_code": "I already have a code (T)",
    // "reset_enter_code": "Enter your 6-digit code (T)",
    // "reset_confirm_reset": "Confirm & Reset (T)",
  }
});
var get_default_slot_changes = (dirty) => ({ matches: dirty & /*matches*/
1 });
var get_default_slot_context = (ctx) => ({ matches: (
  /*matches*/
  ctx[0]
) });
function create_fragment$K(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    get_default_slot_context
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, matches*/
        9)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance$q($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { query } = $$props;
  let mql;
  let mqlListener;
  let wasMounted = false;
  let matches = false;
  onMount(() => {
    $$invalidate(2, wasMounted = true);
    return () => {
      removeActiveListener();
    };
  });
  function addNewListener(query2) {
    mql = window.matchMedia(query2);
    mqlListener = (v) => $$invalidate(0, matches = v.matches);
    mql.addListener(mqlListener);
    $$invalidate(0, matches = mql.matches);
  }
  function removeActiveListener() {
    if (mql && mqlListener) {
      mql.removeListener(mqlListener);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("query" in $$props2)
      $$invalidate(1, query = $$props2.query);
    if ("$$scope" in $$props2)
      $$invalidate(3, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*wasMounted, query*/
    6) {
      {
        if (wasMounted) {
          removeActiveListener();
          addNewListener(query);
        }
      }
    }
  };
  return [matches, query, wasMounted, $$scope, slots];
}
var MediaQuery = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$q, create_fragment$K, safe_not_equal, { query: 1 });
  }
};
function create_fragment$J(ctx) {
  let svg;
  let path;
  let animateTransform;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      animateTransform = svg_element("animateTransform");
      attr(animateTransform, "attributeName", "transform");
      attr(animateTransform, "attributeType", "xml");
      attr(animateTransform, "dur", "0.6s");
      attr(animateTransform, "from", "0 25 25");
      attr(animateTransform, "repeatCount", "indefinite");
      attr(animateTransform, "to", "360 25 25");
      attr(animateTransform, "type", "rotate");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m43.935 25.145c0-10.318-8.364-18.683-18.683-18.683-10.318 0-18.683 8.365-18.683 18.683h4.068c0-8.071 6.543-14.615 14.615-14.615s14.615 6.543 14.615 14.615h4.068z");
      attr(svg, "width", "40px");
      attr(svg, "height", "40px");
      attr(svg, "enable-background", "new 0 0 50 50");
      set_style(svg, "z-index", "1000000");
      attr(svg, "version", "1.1");
      attr(svg, "viewBox", "0 0 50 50");
      attr(svg, "xml:space", "preserve");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
      append(path, animateTransform);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var LoadingIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$J, safe_not_equal, {});
  }
};
function create_fragment$I(ctx) {
  let div;
  let loadingicon;
  let current;
  loadingicon = new LoadingIcon({});
  return {
    c() {
      div = element("div");
      create_component(loadingicon.$$.fragment);
      attr(div, "class", "ms__loader");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(loadingicon, div, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(loadingicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loadingicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(loadingicon);
    }
  };
}
var Loader = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$I, safe_not_equal, {});
  }
};
function create_fragment$H(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "shape-rendering", "geometricPrecision");
      attr(path, "d", "M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z");
      attr(svg, "fill", "none");
      set_style(svg, "width", "100%");
      attr(svg, "viewBox", "0 0 14 14");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var CloseIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$H, safe_not_equal, {});
  }
};
function create_fragment$G(ctx) {
  let div;
  let button;
  let closeicon;
  let current;
  let mounted;
  let dispose;
  closeicon = new CloseIcon({});
  return {
    c() {
      div = element("div");
      button = element("button");
      create_component(closeicon.$$.fragment);
      attr(div, "class", "ms-modal__close");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      mount_component(closeicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", function() {
          if (is_function(
            /*closeModal*/
            ctx[0]
          ))
            ctx[0].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(closeicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closeicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(closeicon);
      mounted = false;
      dispose();
    }
  };
}
function instance$p($$self, $$props, $$invalidate) {
  let { closeModal } = $$props;
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(0, closeModal = $$props2.closeModal);
  };
  return [closeModal];
}
var CloseButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$p, create_fragment$G, safe_not_equal, { closeModal: 0 });
  }
};
function create_fragment$F(ctx) {
  let svg;
  let path0;
  let path1;
  let path2;
  let path3;
  let path4;
  let path5;
  return {
    c() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      path2 = svg_element("path");
      path3 = svg_element("path");
      path4 = svg_element("path");
      path5 = svg_element("path");
      attr(path0, "d", "m259.078 190.582 16.797-39.611c7.315-20.421 26.982-34.665 49.897-34.665 13.187 0 25.344 4.817 34.6 12.818l32.818 73.118c9.656 21.709-.097 47.144-21.786 56.809-21.688 9.666-47.097-.098-56.753-21.807l-38.573-86.723-17 40.088v-.027Z");
      attr(path0, "fill", "#2AA8FF");
      attr(path1, "d", "m111.31 169.64 8.002-18.679c-7.22-20.585-26.82-35.345-49.866-35.345-12.678 0-24.901 4.865-34.007 12.314 6.6063-2.796 14.34-3.575 21.988-3.575 26.999 0 49.435 19.445 53.884 45.285z");
      attr(path2, "d", "m111.31 169.64-28.66 68.126c-9.2762 21.875-34.511 32.081-56.365 22.795-21.853-9.285-32.049-34.545-22.773-56.42l31.925-76.211c6.7448-2.988 14.142-3.575 21.988-3.575 27.086 0 49.537 19.321 53.884 45.285z");
      attr(path2, "fill", "#393939");
      attr(path3, "d", "m197.57 115.46-39.756-89.506c-7.148-16.07-22.929-25.595-39.443-25.537-16.786-0.058576-32.766 9.7896-39.736 26.227l-43.199 101.28c9.1064-7.45 21.329-12.314 34.008-12.314 23.046 0 42.646 14.76 49.866 35.345l0.093 0.337c5.784 1.658 11.893 2.546 18.21 2.546 26.578 0 49.487-15.722 59.958-38.382z");
      attr(path3, "fill", "#017ACE");
      attr(path4, "d", "m197.57 115.46c-10.071 21.796-31.651 37.172-56.934 38.314-1.052 0.05-2.11 0.075-3.175 0.075-6.316 0-12.425-0.888-18.21-2.546l38.425 86.387c3.996 8.986 10.692 15.926 18.706 20.288 1.908 1.196 3.935 2.257 6.073 3.165 21.853 9.286 47.088-0.92 56.364-22.795l37.055-87.381c7.315-20.421 26.982-34.665 49.896-34.665 13.188 0 25.345 4.817 34.601 12.818l-45.994-103.17c-7.148-16.07-22.929-25.595-39.442-25.537-16.786-0.058576-32.767 9.7896-39.737 26.227l-37.628 88.816z");
      attr(path4, "fill", "#AEDEFF");
      attr(path5, "d", "m325.77 116.31c-22.915 0-42.379 13.795-49.694 34.216l8.919 20.052c5.873-25.763 28.931-44.989 56.481-44.989 6.67 0 12.931 1.465 18.894 3.539-9.256-8-21.413-12.818-34.6-12.818z");
      attr(path5, "fill", "#2D91D7");
      set_style(svg, "width", "100%");
      attr(svg, "viewBox", "0 0 397 265");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path0);
      append(svg, path1);
      append(svg, path2);
      append(svg, path3);
      append(svg, path4);
      append(svg, path5);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var MemberstackIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$F, safe_not_equal, {});
  }
};
function create_else_block$b(ctx) {
  let memberstackicon;
  let current;
  memberstackicon = new MemberstackIcon({});
  return {
    c() {
      create_component(memberstackicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(memberstackicon, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(memberstackicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(memberstackicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(memberstackicon, detaching);
    }
  };
}
function create_if_block$k(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*app*/
      ctx[0].branding.logo))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*app*/
      ctx[0].name);
      attr(img, "data-cy", "logo");
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*app*/
      1 && !src_url_equal(img.src, img_src_value = /*app*/
      ctx2[0].branding.logo)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*app*/
      1 && img_alt_value !== (img_alt_value = /*app*/
      ctx2[0].name)) {
        attr(img, "alt", img_alt_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(img);
    }
  };
}
function create_fragment$E(ctx) {
  let figure;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block$k, create_else_block$b];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*app*/
      ctx2[0].branding.logo
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      figure = element("figure");
      if_block.c();
      attr(figure, "class", "ms-modal__figure");
    },
    m(target, anchor) {
      insert(target, figure, anchor);
      if_blocks[current_block_type_index].m(figure, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(figure, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(figure);
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$o($$self, $$props, $$invalidate) {
  let app = {};
  AppStore.subscribe((data) => {
    $$invalidate(0, app = data);
  });
  return [app];
}
var FigureElement = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$o, create_fragment$E, safe_not_equal, {});
  }
};
function create_else_block$a(ctx) {
  let button;
  let loadingicon;
  let current;
  loadingicon = new LoadingIcon({});
  return {
    c() {
      button = element("button");
      create_component(loadingicon.$$.fragment);
      attr(button, "class", "ms-form__button");
      attr(button, "type", "button");
      set_style(
        button,
        "background-color",
        /*buttonColor*/
        ctx[2]
      );
      button.disabled = true;
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(loadingicon, button, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*buttonColor*/
      4) {
        set_style(
          button,
          "background-color",
          /*buttonColor*/
          ctx2[2]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(loadingicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loadingicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(loadingicon);
    }
  };
}
function create_if_block$j(ctx) {
  let button;
  let t;
  return {
    c() {
      button = element("button");
      t = text(
        /*buttonText*/
        ctx[0]
      );
      attr(button, "class", "ms-form__button");
      attr(button, "type", "submit");
      set_style(
        button,
        "background-color",
        /*buttonColor*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*buttonText*/
      1)
        set_data(
          t,
          /*buttonText*/
          ctx2[0]
        );
      if (dirty & /*buttonColor*/
      4) {
        set_style(
          button,
          "background-color",
          /*buttonColor*/
          ctx2[2]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(button);
    }
  };
}
function create_fragment$D(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block$j, create_else_block$a];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!/*isLoading*/
    ctx2[1])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$n($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(3, $app = $$value));
  let { buttonText = "Submit" } = $$props;
  let { isLoading = false } = $$props;
  let buttonColor = "rgb(41, 98, 255)";
  if ($app.branding.colors.lightMode.primaryButton) {
    buttonColor = $app.branding.colors.lightMode.primaryButton;
  }
  $$self.$$set = ($$props2) => {
    if ("buttonText" in $$props2)
      $$invalidate(0, buttonText = $$props2.buttonText);
    if ("isLoading" in $$props2)
      $$invalidate(1, isLoading = $$props2.isLoading);
  };
  return [buttonText, isLoading, buttonColor];
}
var SubmitButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$n, create_fragment$D, safe_not_equal, { buttonText: 0, isLoading: 1 });
  }
};
function create_fragment$C(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m10 0c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10-4.48-10-10-10zm1 15h-2v-2h2v2zm0-4h-2v-6h2v6z");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 20 20");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ErrorIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$C, safe_not_equal, {});
  }
};
function create_if_block$i(ctx) {
  let div;
  let erroricon;
  let t0;
  let t1;
  let current;
  erroricon = new ErrorIcon({});
  return {
    c() {
      div = element("div");
      create_component(erroricon.$$.fragment);
      t0 = space();
      t1 = text(
        /*errorMessage*/
        ctx[4]
      );
      attr(div, "class", "ms-form__error");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(erroricon, div, null);
      append(div, t0);
      append(div, t1);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(erroricon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(erroricon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(erroricon);
    }
  };
}
function create_fragment$B(ctx) {
  let div;
  let label;
  let t0;
  let t1;
  let input;
  let t2;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*inputError*/
    ctx[2] && create_if_block$i(ctx)
  );
  return {
    c() {
      div = element("div");
      label = element("label");
      t0 = text(
        /*emailLabel*/
        ctx[3]
      );
      t1 = space();
      input = element("input");
      t2 = space();
      if (if_block)
        if_block.c();
      attr(label, "class", "ms-form__label");
      attr(label, "for", "eml-" + /*randomId*/
      ctx[5]);
      attr(input, "class", "ms-form__input");
      attr(input, "id", "eml-" + /*randomId*/
      ctx[5]);
      attr(input, "type", "email");
      attr(
        input,
        "placeholder",
        /*placeholder*/
        ctx[1]
      );
      attr(input, "name", "eml");
      input.required = true;
      attr(div, "class", "ms-form__group");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, label);
      append(label, t0);
      append(div, t1);
      append(div, input);
      set_input_value(
        input,
        /*emailValue*/
        ctx[0]
      );
      append(div, t2);
      if (if_block)
        if_block.m(div, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "input",
            /*validateField*/
            ctx[6]
          ),
          listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[8]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*placeholder*/
      2) {
        attr(
          input,
          "placeholder",
          /*placeholder*/
          ctx2[1]
        );
      }
      if (dirty & /*emailValue*/
      1 && input.value !== /*emailValue*/
      ctx2[0]) {
        set_input_value(
          input,
          /*emailValue*/
          ctx2[0]
        );
      }
      if (
        /*inputError*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*inputError*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$i(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$m($$self, $$props, $$invalidate) {
  let $textStore;
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(9, $textStore = $$value));
  let { emailInputValid = false } = $$props;
  let { emailValue } = $$props;
  let { placeholder = "example@domain.com" } = $$props;
  let text2 = $textStore.text;
  let emailLabel = text2["email_address"] || "Email Address";
  let inputError = false;
  let errorMessage = text2["email_error_message"] || "Please enter a valid email address";
  const randomId = Math.random().toString(36).substring(2, 10);
  const validateField = (e) => {
    const emailInput = e.target;
    const hasValidEmail = emailInput.value.match(/.+@.+\..{2,}/);
    if (!hasValidEmail && e.target.value.length > 0) {
      $$invalidate(7, emailInputValid = false);
      $$invalidate(2, inputError = true);
    } else {
      $$invalidate(7, emailInputValid = true);
      $$invalidate(2, inputError = false);
    }
  };
  function input_input_handler() {
    emailValue = this.value;
    $$invalidate(0, emailValue);
  }
  $$self.$$set = ($$props2) => {
    if ("emailInputValid" in $$props2)
      $$invalidate(7, emailInputValid = $$props2.emailInputValid);
    if ("emailValue" in $$props2)
      $$invalidate(0, emailValue = $$props2.emailValue);
    if ("placeholder" in $$props2)
      $$invalidate(1, placeholder = $$props2.placeholder);
  };
  return [
    emailValue,
    placeholder,
    inputError,
    emailLabel,
    errorMessage,
    randomId,
    validateField,
    emailInputValid,
    input_input_handler
  ];
}
var EmailInput = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$m, create_fragment$B, safe_not_equal, {
      emailInputValid: 7,
      emailValue: 0,
      placeholder: 1
    });
  }
};
function create_fragment$A(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m11 0.5c-5 0-9.27 3.11-11 7.5 1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zm0 12.5c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z");
      attr(svg, "class", "ms-form__eye");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 22 16");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var EyeIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$A, safe_not_equal, {});
  }
};
function create_fragment$z(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m11 4c2.76 0 5 2.24 5 5 0 0.65-0.13 1.26-0.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74 0.25-3.98 0.7l2.16 2.16c0.57-0.23 1.18-0.36 1.83-0.36zm-10-2.73 2.74 2.74c-1.66 1.29-2.96 3.01-3.74 4.99 1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-0.3 4.38-0.84l0.42 0.42 2.93 2.92 1.27-1.27-17.73-17.73-1.27 1.27zm5.53 5.53 1.55 1.55c-0.05 0.21-0.08 0.43-0.08 0.65 0 1.66 1.34 3 3 3 0.22 0 0.44-0.03 0.65-0.08l1.55 1.55c-0.67 0.33-1.41 0.53-2.2 0.53-2.76 0-5-2.24-5-5 0-0.79 0.2-1.53 0.53-2.2zm4.31-0.78 3.15 3.15 0.02-0.16c0-1.66-1.34-3-3-3l-0.17 0.01z");
      attr(svg, "class", "ms-form__eye-slash");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 22 19");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var EyeSlashIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$z, safe_not_equal, {});
  }
};
function create_if_block_2$a(ctx) {
  let div;
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      button = element("button");
      button.textContent = `${/*text*/
      ctx[8]["forgot_password"] || "Forgot Password?"}`;
      attr(button, "data-cy", "forgot-password-btn");
      attr(button, "class", "ms-form__button ms-form__button--text");
      attr(button, "tabindex", "-1");
      attr(button, "type", "button");
      attr(div, "class", "ms-form__label ms-form__label--right");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[14]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_else_block$9(ctx) {
  let eyeslashicon;
  let current;
  eyeslashicon = new EyeSlashIcon({});
  return {
    c() {
      create_component(eyeslashicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(eyeslashicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(eyeslashicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(eyeslashicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(eyeslashicon, detaching);
    }
  };
}
function create_if_block_1$d(ctx) {
  let eyeicon;
  let current;
  eyeicon = new EyeIcon({});
  return {
    c() {
      create_component(eyeicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(eyeicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(eyeicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(eyeicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(eyeicon, detaching);
    }
  };
}
function create_if_block$h(ctx) {
  let div;
  let erroricon;
  let t0;
  let t1;
  let current;
  erroricon = new ErrorIcon({});
  return {
    c() {
      div = element("div");
      create_component(erroricon.$$.fragment);
      t0 = space();
      t1 = text(
        /*errorMessage*/
        ctx[9]
      );
      attr(div, "class", "ms-form__error");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(erroricon, div, null);
      append(div, t0);
      append(div, t1);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(erroricon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(erroricon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(erroricon);
    }
  };
}
function create_fragment$y(ctx) {
  let div3;
  let div0;
  let label;
  let t0;
  let t1;
  let t2;
  let div2;
  let input;
  let input_value_value;
  let t3;
  let div1;
  let current_block_type_index;
  let if_block1;
  let t4;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*showForgotPasswordLabel*/
    ctx[2] && create_if_block_2$a(ctx)
  );
  const if_block_creators = [create_if_block_1$d, create_else_block$9];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!/*passwordVisible*/
    ctx2[5])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block2 = (
    /*inputError*/
    ctx[6] && create_if_block$h(ctx)
  );
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      label = element("label");
      t0 = text(
        /*passwordLabel*/
        ctx[3]
      );
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      div2 = element("div");
      input = element("input");
      t3 = space();
      div1 = element("div");
      if_block1.c();
      t4 = space();
      if (if_block2)
        if_block2.c();
      attr(label, "class", "ms-form__label");
      attr(label, "for", "psw-" + /*randomId*/
      ctx[10]);
      attr(div0, "class", "ms-form__flex");
      attr(input, "data-ms-internal-password", "");
      attr(input, "class", "ms-form__input ms-form__input--password");
      attr(input, "id", "psw-" + /*randomId*/
      ctx[10]);
      attr(
        input,
        "type",
        /*type*/
        ctx[7]
      );
      attr(
        input,
        "placeholder",
        /*passwordPlaceholder*/
        ctx[4]
      );
      input.value = input_value_value = /*passwordValue*/
      ctx[0] || "";
      attr(input, "name", "psw");
      input.required = true;
      attr(div1, "class", "ms-form__show-toggle");
      attr(div1, "id", "togglePassword");
      attr(div2, "class", "ms-form__password-container");
      attr(div3, "class", "ms-form__group");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div0, label);
      append(label, t0);
      append(div0, t1);
      if (if_block0)
        if_block0.m(div0, null);
      append(div3, t2);
      append(div3, div2);
      append(div2, input);
      append(div2, t3);
      append(div2, div1);
      if_blocks[current_block_type_index].m(div1, null);
      append(div3, t4);
      if (if_block2)
        if_block2.m(div3, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "input",
            /*handleInput*/
            ctx[12]
          ),
          listen(
            div1,
            "click",
            /*togglePassword*/
            ctx[11]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*passwordLabel*/
      8)
        set_data(
          t0,
          /*passwordLabel*/
          ctx2[3]
        );
      if (
        /*showForgotPasswordLabel*/
        ctx2[2]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_2$a(ctx2);
          if_block0.c();
          if_block0.m(div0, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (!current || dirty & /*type*/
      128) {
        attr(
          input,
          "type",
          /*type*/
          ctx2[7]
        );
      }
      if (!current || dirty & /*passwordPlaceholder*/
      16) {
        attr(
          input,
          "placeholder",
          /*passwordPlaceholder*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*passwordValue*/
      1 && input_value_value !== (input_value_value = /*passwordValue*/
      ctx2[0] || "") && input.value !== input_value_value) {
        input.value = input_value_value;
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        }
        transition_in(if_block1, 1);
        if_block1.m(div1, null);
      }
      if (
        /*inputError*/
        ctx2[6]
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*inputError*/
          64) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block$h(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div3, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      if (if_block0)
        if_block0.d();
      if_blocks[current_block_type_index].d();
      if (if_block2)
        if_block2.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$l($$self, $$props, $$invalidate) {
  let type;
  let $textStore;
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(15, $textStore = $$value));
  let text2 = $textStore.text;
  let { showForgotPasswordLabel = false } = $$props;
  let { passwordInputValid = false } = $$props;
  let { passwordLabel = text2["password"] || "Password" } = $$props;
  let { passwordPlaceholder = "Enter Password" } = $$props;
  let { passwordValue } = $$props;
  let { display } = $$props;
  let inputError = false;
  let errorMessage = text2["password_error_message"] || "Minimum 8 characters required";
  let passwordVisible = false;
  const randomId = Math.random().toString(36).substring(2, 10);
  function togglePassword() {
    $$invalidate(5, passwordVisible = !passwordVisible);
  }
  function handleInput(e) {
    $$invalidate(0, passwordValue = e.target.value);
    validateField(e);
  }
  const validateField = (e) => {
    const hasValidPassword = e.target.value.length >= 8 ? true : false;
    if (!hasValidPassword) {
      $$invalidate(13, passwordInputValid = false);
      $$invalidate(6, inputError = true);
    } else {
      $$invalidate(13, passwordInputValid = true);
      $$invalidate(6, inputError = false);
    }
  };
  const click_handler = () => $$invalidate(1, display = "forgot_password");
  $$self.$$set = ($$props2) => {
    if ("showForgotPasswordLabel" in $$props2)
      $$invalidate(2, showForgotPasswordLabel = $$props2.showForgotPasswordLabel);
    if ("passwordInputValid" in $$props2)
      $$invalidate(13, passwordInputValid = $$props2.passwordInputValid);
    if ("passwordLabel" in $$props2)
      $$invalidate(3, passwordLabel = $$props2.passwordLabel);
    if ("passwordPlaceholder" in $$props2)
      $$invalidate(4, passwordPlaceholder = $$props2.passwordPlaceholder);
    if ("passwordValue" in $$props2)
      $$invalidate(0, passwordValue = $$props2.passwordValue);
    if ("display" in $$props2)
      $$invalidate(1, display = $$props2.display);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*passwordVisible*/
    32) {
      $$invalidate(7, type = passwordVisible ? "text" : "password");
    }
  };
  return [
    passwordValue,
    display,
    showForgotPasswordLabel,
    passwordLabel,
    passwordPlaceholder,
    passwordVisible,
    inputError,
    type,
    text2,
    errorMessage,
    randomId,
    togglePassword,
    handleInput,
    passwordInputValid,
    click_handler
  ];
}
var PasswordInput = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$l, create_fragment$y, safe_not_equal, {
      showForgotPasswordLabel: 2,
      passwordInputValid: 13,
      passwordLabel: 3,
      passwordPlaceholder: 4,
      passwordValue: 0,
      display: 1
    });
  }
};
function create_fragment$x(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "shape-rendering", "geometricPrecision");
      attr(path, "d", "m9 0-9 4v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12v-6l-9-4zm-2 16-4-4 1.41-1.41 2.59 2.58 6.59-6.59 1.41 1.42-8 8z");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 18 22");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var SecuredIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$x, safe_not_equal, {});
  }
};
function create_if_block$g(ctx) {
  let div;
  let a;
  let securedicon;
  let t;
  let current;
  securedicon = new SecuredIcon({});
  return {
    c() {
      div = element("div");
      a = element("a");
      create_component(securedicon.$$.fragment);
      t = text(" Secured by Memberstack");
      attr(a, "href", "https://www.memberstack.com");
      attr(a, "target", "_blank");
      attr(div, "class", "ms-modal__footer");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, a);
      mount_component(securedicon, a, null);
      append(a, t);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(securedicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(securedicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(securedicon);
    }
  };
}
function create_fragment$w(ctx) {
  let if_block_anchor;
  let current;
  let if_block = !/*$app*/
  ctx[0].isPaid && create_if_block$g();
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!/*$app*/
      ctx2[0].isPaid) {
        if (if_block) {
          if (dirty & /*$app*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$g();
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance$k($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(0, $app = $$value));
  return [$app];
}
var ModalFooter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$k, create_fragment$w, safe_not_equal, {});
  }
};
function create_fragment$v(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "M19,4H5A3,3,0,0,0,2,7V17a3,3,0,0,0,3,3H19a3,3,0,0,0,3-3V7A3,3,0,0,0,19,4ZM5,6H19a1,1,0,0,1,1,1l-8,4.88L4,7A1,1,0,0,1,5,6ZM20,17a1,1,0,0,1-1,1H5a1,1,0,0,1-1-1V9.28l7.48,4.57a1,1,0,0,0,1,0L20,9.28Z");
      attr(svg, "class", "ms-email");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "0 0 24 24");
      attr(svg, "fill", "currentColor");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var EmailIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$v, safe_not_equal, {});
  }
};
var PasswordlessStore = writable({
  passwordlessModalType: "",
  passwordlessEmail: "",
  passwordlessMode: false,
  passwordlessCustomFields: [],
  passwordlessPlans: []
});
var setPasswordlessModalType = (type) => {
  PasswordlessStore.update((store) => {
    store.passwordlessModalType = type;
    return store;
  });
};
var setPasswordlessEmail = (email) => {
  PasswordlessStore.update((store) => {
    store.passwordlessEmail = email;
    return store;
  });
};
var setPasswordlessCustomFields = (customFields) => {
  PasswordlessStore.update((store) => {
    store.passwordlessCustomFields = customFields;
    return store;
  });
};
var setPasswordlessPlans = (plans) => {
  PasswordlessStore.update((store) => {
    store.passwordlessPlans = plans;
    return store;
  });
};
var setPasswordlessMode = (mode) => {
  PasswordlessStore.update((store) => {
    store.passwordlessMode = mode;
    return store;
  });
};
function get_each_context$6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[22] = list[i];
  return child_ctx;
}
function create_if_block_6$3(ctx) {
  let closebutton;
  let current;
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[1]
    ) }
  });
  return {
    c() {
      create_component(closebutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(closebutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      2)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[1];
      closebutton.$set(closebutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(closebutton, detaching);
    }
  };
}
function create_else_block_1$5(ctx) {
  let submitbutton;
  let current;
  submitbutton = new SubmitButton({
    props: {
      buttonText: (
        /*text*/
        ctx[8]["login_with_email"] || "Continue with Email"
      ),
      isLoading: (
        /*showLoader*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(submitbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(submitbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      8)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[3];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(submitbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(submitbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(submitbutton, detaching);
    }
  };
}
function create_if_block_5$3(ctx) {
  let passwordinput;
  let updating_passwordInputValid;
  let updating_display;
  let t;
  let submitbutton;
  let current;
  function passwordinput_passwordInputValid_binding(value) {
    ctx[14](value);
  }
  function passwordinput_display_binding(value) {
    ctx[15](value);
  }
  let passwordinput_props = {
    passwordPlaceholder: (
      /*text*/
      ctx[8]["login_password_placeholder"]
    ),
    "||": true,
    showForgotPasswordLabel: true
  };
  if (
    /*passwordInputValid*/
    ctx[5] !== void 0
  ) {
    passwordinput_props.passwordInputValid = /*passwordInputValid*/
    ctx[5];
  }
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    passwordinput_props.display = /*display*/
    ctx[0];
  }
  passwordinput = new PasswordInput({ props: passwordinput_props });
  binding_callbacks.push(() => bind(passwordinput, "passwordInputValid", passwordinput_passwordInputValid_binding));
  binding_callbacks.push(() => bind(passwordinput, "display", passwordinput_display_binding));
  submitbutton = new SubmitButton({
    props: {
      buttonText: (
        /*text*/
        ctx[8]["login"] || "Log in"
      ),
      isLoading: (
        /*showLoader*/
        ctx[3]
      ),
      "data-cy": "submit-button"
    }
  });
  return {
    c() {
      create_component(passwordinput.$$.fragment);
      t = space();
      create_component(submitbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordinput, target, anchor);
      insert(target, t, anchor);
      mount_component(submitbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordinput_changes = {};
      if (!updating_passwordInputValid && dirty & /*passwordInputValid*/
      32) {
        updating_passwordInputValid = true;
        passwordinput_changes.passwordInputValid = /*passwordInputValid*/
        ctx2[5];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        passwordinput_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      passwordinput.$set(passwordinput_changes);
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      8)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[3];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordinput.$$.fragment, local);
      transition_in(submitbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordinput.$$.fragment, local);
      transition_out(submitbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordinput, detaching);
      if (detaching)
        detach(t);
      destroy_component(submitbutton, detaching);
    }
  };
}
function create_if_block_4$4(ctx) {
  let div;
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      button = element("button");
      button.textContent = `${/*text*/
      ctx[8]["dont_have_an_account"] || "Don't have an account?"}`;
      attr(button, "class", "ms-form__button ms-form__button--text");
      attr(button, "type", "button");
      attr(div, "class", "ms-form__flex ms-form__flex--centered");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[17]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_3$4(ctx) {
  let div;
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      button = element("button");
      button.textContent = `${/*text*/
      ctx[8]["dont_have_an_account"] || "Don't have an account?"}`;
      attr(button, "class", "ms-form__button ms-form__button--text");
      attr(button, "type", "button");
      attr(div, "class", "ms-form__flex ms-form__flex--centered");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$f(ctx) {
  let div4;
  let div3;
  let div0;
  let t0;
  let div1;
  let t2;
  let div2;
  let t3;
  let t4;
  let current;
  let if_block = (
    /*$app*/
    ctx[7].additionalAuthMethods.passwordless.enabled === true && create_if_block_1$c(ctx)
  );
  let each_value = (
    /*$app*/
    ctx[7].authProviders
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
  }
  return {
    c() {
      div4 = element("div");
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      div1.textContent = `${/*text*/
      ctx[8]["or"] || "or"}`;
      t2 = space();
      div2 = element("div");
      t3 = space();
      if (if_block)
        if_block.c();
      t4 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div0, "class", "ms-modal__divider-line");
      attr(div1, "class", "ms-modal__divider-text");
      attr(div2, "class", "ms-modal__divider-line");
      attr(div3, "class", "ms-modal__social-divider");
      attr(div4, "class", "ms-modal__social");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div3);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t2);
      append(div3, div2);
      append(div4, t3);
      if (if_block)
        if_block.m(div4, null);
      append(div4, t4);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div4, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$app*/
        ctx2[7].additionalAuthMethods.passwordless.enabled === true
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$app*/
          128) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$c(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div4, t4);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (dirty & /*submitLoginWithProvider, $app, text*/
      2432) {
        each_value = /*$app*/
        ctx2[7].authProviders;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$6(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$6(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div4, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block)
        if_block.d();
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_1$c(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block_2$9, create_else_block$8];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*$PasswordlessStore*/
      ctx2[6].passwordlessMode === false
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_2(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "class", "ms-modal__social-buttons");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_else_block$8(ctx) {
  let button;
  let span;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      span = element("span");
      span.textContent = `${/*text*/
      ctx[8]["login_with_password"] || "Log in with Password"}`;
      attr(button, "class", "ms-modal__social-button");
      attr(button, "data-cy", "continue-with-password");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, span);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_3*/
          ctx[19]
        );
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$9(ctx) {
  let button;
  let emailicon;
  let t0;
  let span;
  let current;
  let mounted;
  let dispose;
  emailicon = new EmailIcon({});
  return {
    c() {
      button = element("button");
      create_component(emailicon.$$.fragment);
      t0 = space();
      span = element("span");
      span.textContent = `${/*text*/
      ctx[8]["login_with_email"] || "Continue with Email"}`;
      attr(button, "class", "ms-modal__social-button");
      attr(button, "data-cy", "continue-with-email");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(emailicon, button, null);
      append(button, t0);
      append(button, span);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_2*/
          ctx[18]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(emailicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(emailicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(emailicon);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$6(ctx) {
  let div;
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1_value = (
    /*text*/
    (ctx[8]["continue_with"] || "Continue with") + ""
  );
  let t1;
  let t2;
  let t3_value = (
    /*provider*/
    ctx[22].name + ""
  );
  let t3;
  let t4;
  let mounted;
  let dispose;
  function click_handler_4() {
    return (
      /*click_handler_4*/
      ctx[20](
        /*provider*/
        ctx[22]
      )
    );
  }
  return {
    c() {
      div = element("div");
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      t3 = text(t3_value);
      t4 = space();
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[22].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[22].name);
      attr(button, "class", "ms-modal__social-button");
      attr(button, "type", "button");
      attr(div, "class", "ms-modal__social-buttons");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      append(span, t3);
      append(div, t4);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_4);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      128 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[22].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      128 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[22].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      128 && t3_value !== (t3_value = /*provider*/
      ctx[22].name + ""))
        set_data(t3, t3_value);
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$u(ctx) {
  let div1;
  let t0;
  let div0;
  let figureelement;
  let t1;
  let h2;
  let t3;
  let form;
  let emailinput;
  let updating_emailInputValid;
  let t4;
  let current_block_type_index;
  let if_block1;
  let t5;
  let t6;
  let t7;
  let modalfooter;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (!/*params*/
  ctx[2] || !/*params*/
  ctx[2].hideCloseButton) && create_if_block_6$3(ctx);
  figureelement = new FigureElement({});
  function emailinput_emailInputValid_binding(value) {
    ctx[13](value);
  }
  let emailinput_props = {
    placeholder: (
      /*text*/
      ctx[8]["login_email_placeholder"]
    )
  };
  if (
    /*emailInputValid*/
    ctx[4] !== void 0
  ) {
    emailinput_props.emailInputValid = /*emailInputValid*/
    ctx[4];
  }
  emailinput = new EmailInput({ props: emailinput_props });
  binding_callbacks.push(() => bind(emailinput, "emailInputValid", emailinput_emailInputValid_binding));
  const if_block_creators = [create_if_block_5$3, create_else_block_1$5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!/*$PasswordlessStore*/
    ctx2[6].passwordlessMode)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  function select_block_type_1(ctx2, dirty) {
    if (
      /*params*/
      ctx2[2] && /*params*/
      ctx2[2].signup && /*params*/
      ctx2[2].signup.plans
    )
      return create_if_block_3$4;
    if (
      /*signupButtonURL*/
      ctx2[9]
    )
      return create_if_block_4$4;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block2 = current_block_type && current_block_type(ctx);
  let if_block3 = (
    /*$app*/
    (ctx[7].authProviders.length > 0 || /*$app*/
    ctx[7].additionalAuthMethods.passwordless.enabled === true) && create_if_block$f(ctx)
  );
  modalfooter = new ModalFooter({});
  return {
    c() {
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div0 = element("div");
      create_component(figureelement.$$.fragment);
      t1 = space();
      h2 = element("h2");
      h2.textContent = `${/*text*/
      ctx[8]["login_to_your_account"] || "Login to your account"}`;
      t3 = space();
      form = element("form");
      create_component(emailinput.$$.fragment);
      t4 = space();
      if_block1.c();
      t5 = space();
      if (if_block2)
        if_block2.c();
      t6 = space();
      if (if_block3)
        if_block3.c();
      t7 = space();
      create_component(modalfooter.$$.fragment);
      attr(h2, "class", "ms-modal__title");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(div0, "class", "ms-modal__content");
      attr(div1, "class", "ms-modal");
      attr(div1, "id", "LoginModal");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      if (if_block0)
        if_block0.m(div1, null);
      append(div1, t0);
      append(div1, div0);
      mount_component(figureelement, div0, null);
      append(div0, t1);
      append(div0, h2);
      append(div0, t3);
      append(div0, form);
      mount_component(emailinput, form, null);
      append(form, t4);
      if_blocks[current_block_type_index].m(form, null);
      append(form, t5);
      if (if_block2)
        if_block2.m(form, null);
      append(div0, t6);
      if (if_block3)
        if_block3.m(div0, null);
      append(div1, t7);
      mount_component(modalfooter, div1, null);
      current = true;
      if (!mounted) {
        dispose = listen(form, "submit", stop_propagation(prevent_default(
          /*submitLogin*/
          ctx[10]
        )));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!/*params*/
      ctx2[2] || !/*params*/
      ctx2[2].hideCloseButton) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*params*/
          4) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_6$3(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div1, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      const emailinput_changes = {};
      if (!updating_emailInputValid && dirty & /*emailInputValid*/
      16) {
        updating_emailInputValid = true;
        emailinput_changes.emailInputValid = /*emailInputValid*/
        ctx2[4];
        add_flush_callback(() => updating_emailInputValid = false);
      }
      emailinput.$set(emailinput_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(form, t5);
      }
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block2) {
        if_block2.p(ctx2, dirty);
      } else {
        if (if_block2)
          if_block2.d(1);
        if_block2 = current_block_type && current_block_type(ctx2);
        if (if_block2) {
          if_block2.c();
          if_block2.m(form, null);
        }
      }
      if (
        /*$app*/
        ctx2[7].authProviders.length > 0 || /*$app*/
        ctx2[7].additionalAuthMethods.passwordless.enabled === true
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty & /*$app*/
          128) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block$f(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(div0, null);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(figureelement.$$.fragment, local);
      transition_in(emailinput.$$.fragment, local);
      transition_in(if_block1);
      transition_in(if_block3);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(figureelement.$$.fragment, local);
      transition_out(emailinput.$$.fragment, local);
      transition_out(if_block1);
      transition_out(if_block3);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (if_block0)
        if_block0.d();
      destroy_component(figureelement);
      destroy_component(emailinput);
      if_blocks[current_block_type_index].d();
      if (if_block2) {
        if_block2.d();
      }
      if (if_block3)
        if_block3.d();
      destroy_component(modalfooter);
      mounted = false;
      dispose();
    }
  };
}
function instance$j($$self, $$props, $$invalidate) {
  let $PasswordlessStore;
  let $app;
  let $textStore;
  component_subscribe($$self, PasswordlessStore, ($$value) => $$invalidate(6, $PasswordlessStore = $$value));
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(7, $app = $$value));
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(21, $textStore = $$value));
  let { closeModal } = $$props;
  let { display } = $$props;
  let { onSuccessLogin } = $$props;
  let { params } = $$props;
  let text2 = $textStore.text;
  let showLoader2 = false;
  let emailInputValid = false;
  let passwordInputValid = false;
  if ($app.additionalAuthMethods.passwordless.isDefault === true) {
    setPasswordlessMode(true);
  }
  let signupButtonURL = Boolean(window.ssoUI) && $app.ssoSignupButtonURL;
  function submitLogin(e) {
    return __async(this, null, function* () {
      const emailInput = e.target.querySelector("[name=eml]");
      const passwordInput = e.target.querySelector("[name=psw]");
      if ($PasswordlessStore.passwordlessMode !== true) {
        if (!emailInputValid || !passwordInputValid)
          return;
        $$invalidate(3, showLoader2 = true);
        try {
          const { data } = yield window.$memberstackDom.loginMemberEmailPassword(
            {
              email: emailInput.value,
              password: passwordInput.value
            },
            { includeContentGroups: true }
          );
          onSuccessLogin({ type: "LOGIN", data });
          $$invalidate(3, showLoader2 = false);
        } catch (err) {
          $$invalidate(3, showLoader2 = false);
          window.$memberstackDom._showMessage(err.message, true);
        }
      } else {
        if (!emailInputValid)
          return;
        $$invalidate(3, showLoader2 = true);
        try {
          yield window.$memberstackDom.sendMemberLoginPasswordlessEmail({ email: emailInput.value });
          setPasswordlessModalType("login");
          setPasswordlessEmail(emailInput.value);
          $$invalidate(0, display = "passwordless_token");
          $$invalidate(3, showLoader2 = false);
        } catch (err) {
          $$invalidate(3, showLoader2 = false);
          window.$memberstackDom._showMessage(err.message, true);
        }
      }
    });
  }
  function submitLoginWithProvider(provider) {
    return __async(this, null, function* () {
      try {
        const { data } = yield window.$memberstackDom.loginWithProvider({ provider });
        onSuccessLogin({ type: "LOGIN", data });
      } catch (err) {
        $$invalidate(3, showLoader2 = false);
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function emailinput_emailInputValid_binding(value) {
    emailInputValid = value;
    $$invalidate(4, emailInputValid);
  }
  function passwordinput_passwordInputValid_binding(value) {
    passwordInputValid = value;
    $$invalidate(5, passwordInputValid);
  }
  function passwordinput_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  const click_handler = () => $$invalidate(0, display = "signup");
  const click_handler_1 = () => window.location.href = signupButtonURL;
  const click_handler_2 = () => setPasswordlessMode(true);
  const click_handler_3 = () => setPasswordlessMode(false);
  const click_handler_4 = (provider) => submitLoginWithProvider(provider.provider);
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(1, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
    if ("onSuccessLogin" in $$props2)
      $$invalidate(12, onSuccessLogin = $$props2.onSuccessLogin);
    if ("params" in $$props2)
      $$invalidate(2, params = $$props2.params);
  };
  return [
    display,
    closeModal,
    params,
    showLoader2,
    emailInputValid,
    passwordInputValid,
    $PasswordlessStore,
    $app,
    text2,
    signupButtonURL,
    submitLogin,
    submitLoginWithProvider,
    onSuccessLogin,
    emailinput_emailInputValid_binding,
    passwordinput_passwordInputValid_binding,
    passwordinput_display_binding,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    click_handler_4
  ];
}
var LoginModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$j, create_fragment$u, safe_not_equal, {
      closeModal: 1,
      display: 0,
      onSuccessLogin: 12,
      params: 2
    });
  }
};
function add_css$1(target) {
  append_styles(target, "svelte-1w8lbd8", ".rey-was-here.svelte-1w8lbd8{display:none !important}");
}
function get_each_context$5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[25] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i];
  child_ctx[30] = i;
  return child_ctx;
}
function create_if_block_6$2(ctx) {
  let closebutton;
  let current;
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[1]
    ) }
  });
  return {
    c() {
      create_component(closebutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(closebutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      2)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[1];
      closebutton.$set(closebutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(closebutton, detaching);
    }
  };
}
function create_if_block_5$2(ctx) {
  let div1;
  let div0;
  let label;
  let t0_value = (
    /*customField*/
    ctx[28].label + ""
  );
  let t0;
  let label_for_value;
  let t1;
  let input;
  let input_placeholder_value;
  let input_name_value;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      label = element("label");
      t0 = text(t0_value);
      t1 = space();
      input = element("input");
      attr(label, "class", "ms-form__label");
      attr(label, "for", label_for_value = /*customField*/
      ctx[28].key);
      attr(input, "class", "ms-form__input");
      attr(input, "data-ms-custom-field", "");
      attr(input, "type", "text");
      attr(input, "placeholder", input_placeholder_value = /*customField*/
      ctx[28].label);
      attr(input, "name", input_name_value = /*customField*/
      ctx[28].key);
      attr(div0, "class", "ms-form__group");
      attr(div1, "class", "ms-modal__custom-field-container");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, label);
      append(label, t0);
      append(div0, t1);
      append(div0, input);
    },
    p(ctx2, dirty) {
      if (dirty & /*$app*/
      128 && t0_value !== (t0_value = /*customField*/
      ctx2[28].label + ""))
        set_data(t0, t0_value);
      if (dirty & /*$app*/
      128 && label_for_value !== (label_for_value = /*customField*/
      ctx2[28].key)) {
        attr(label, "for", label_for_value);
      }
      if (dirty & /*$app*/
      128 && input_placeholder_value !== (input_placeholder_value = /*customField*/
      ctx2[28].label)) {
        attr(input, "placeholder", input_placeholder_value);
      }
      if (dirty & /*$app*/
      128 && input_name_value !== (input_name_value = /*customField*/
      ctx2[28].key)) {
        attr(input, "name", input_name_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div1);
    }
  };
}
function create_each_block_1(ctx) {
  let if_block_anchor;
  let if_block = (
    /*customField*/
    ctx[28].hidden !== true && create_if_block_5$2(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*customField*/
        ctx2[28].hidden !== true
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_5$2(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_if_block_4$3(ctx) {
  let passwordinput;
  let updating_passwordInputValid;
  let current;
  function passwordinput_passwordInputValid_binding(value) {
    ctx[13](value);
  }
  let passwordinput_props = {};
  if (
    /*passwordInputValid*/
    ctx[5] !== void 0
  ) {
    passwordinput_props.passwordInputValid = /*passwordInputValid*/
    ctx[5];
  }
  passwordinput = new PasswordInput({ props: passwordinput_props });
  binding_callbacks.push(() => bind(passwordinput, "passwordInputValid", passwordinput_passwordInputValid_binding));
  return {
    c() {
      create_component(passwordinput.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordinput, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordinput_changes = {};
      if (!updating_passwordInputValid && dirty & /*passwordInputValid*/
      32) {
        updating_passwordInputValid = true;
        passwordinput_changes.passwordInputValid = /*passwordInputValid*/
        ctx2[5];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput.$set(passwordinput_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordinput.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordinput.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordinput, detaching);
    }
  };
}
function create_else_block_1$4(ctx) {
  let submitbutton;
  let current;
  submitbutton = new SubmitButton({
    props: {
      buttonText: "Continue with Email",
      isLoading: (
        /*showLoader*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(submitbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(submitbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      8)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[3];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(submitbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(submitbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(submitbutton, detaching);
    }
  };
}
function create_if_block_3$3(ctx) {
  let submitbutton;
  let current;
  submitbutton = new SubmitButton({
    props: {
      buttonText: "Sign up",
      isLoading: (
        /*showLoader*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(submitbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(submitbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      8)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[3];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(submitbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(submitbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(submitbutton, detaching);
    }
  };
}
function create_if_block$e(ctx) {
  let div4;
  let div3;
  let t3;
  let t4;
  let current;
  let if_block = (
    /*$app*/
    ctx[7].additionalAuthMethods.passwordless.enabled === true && create_if_block_1$b(ctx)
  );
  let each_value = (
    /*$app*/
    ctx[7].authProviders
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
  }
  return {
    c() {
      div4 = element("div");
      div3 = element("div");
      div3.innerHTML = `<div class="ms-modal__divider-line"></div> 
          <div class="ms-modal__divider-text">or</div> 
          <div class="ms-modal__divider-line"></div>`;
      t3 = space();
      if (if_block)
        if_block.c();
      t4 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div3, "class", "ms-modal__social-divider");
      attr(div4, "class", "ms-modal__social");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div3);
      append(div4, t3);
      if (if_block)
        if_block.m(div4, null);
      append(div4, t4);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div4, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$app*/
        ctx2[7].additionalAuthMethods.passwordless.enabled === true
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$app*/
          128) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$b(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div4, t4);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (dirty & /*submitSignupWithProvider, $app*/
      1152) {
        each_value = /*$app*/
        ctx2[7].authProviders;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$5(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div4, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block)
        if_block.d();
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_1$b(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block_2$8, create_else_block$7];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*$PasswordlessStore*/
      ctx2[6].passwordlessMode === false
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "class", "ms-modal__social-buttons");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_else_block$7(ctx) {
  let button;
  let span;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      span = element("span");
      span.textContent = `${/*text*/
      ctx[8]["signup_with_password"] || "Signup with Password"}`;
      attr(button, "class", "ms-modal__social-button");
      attr(button, "data-cy", "continue-with-password");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, span);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_2*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$8(ctx) {
  let button;
  let emailicon;
  let t0;
  let span;
  let current;
  let mounted;
  let dispose;
  emailicon = new EmailIcon({});
  return {
    c() {
      button = element("button");
      create_component(emailicon.$$.fragment);
      t0 = space();
      span = element("span");
      span.textContent = `${/*text*/
      ctx[8]["continue_with_email"] || "Continue with Email"}`;
      attr(button, "class", "ms-modal__social-button");
      attr(button, "data-cy", "continue-with-email");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(emailicon, button, null);
      append(button, t0);
      append(button, span);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[15]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(emailicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(emailicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(emailicon);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$5(ctx) {
  let div;
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1;
  let t2_value = (
    /*provider*/
    ctx[25].name + ""
  );
  let t2;
  let t3;
  let mounted;
  let dispose;
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[17](
        /*provider*/
        ctx[25]
      )
    );
  }
  return {
    c() {
      div = element("div");
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text("Continue with ");
      t2 = text(t2_value);
      t3 = space();
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[25].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[25].name);
      attr(button, "class", "ms-modal__social-button");
      attr(button, "type", "button");
      attr(div, "class", "ms-modal__social-buttons");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      append(div, t3);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_3);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      128 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[25].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      128 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[25].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      128 && t2_value !== (t2_value = /*provider*/
      ctx[25].name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$t(ctx) {
  let div4;
  let t0;
  let div3;
  let figureelement;
  let t1;
  let h2;
  let t3;
  let form;
  let t4;
  let emailinput;
  let updating_emailInputValid;
  let t5;
  let div0;
  let t8;
  let t9;
  let div1;
  let t10;
  let current_block_type_index;
  let if_block2;
  let t11;
  let div2;
  let button;
  let t13;
  let t14;
  let modalfooter;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (!/*params*/
  ctx[2] || !/*params*/
  ctx[2].hideCloseButton) && create_if_block_6$2(ctx);
  figureelement = new FigureElement({});
  let each_value_1 = (
    /*$app*/
    ctx[7].customFields
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  function emailinput_emailInputValid_binding(value) {
    ctx[12](value);
  }
  let emailinput_props = {};
  if (
    /*emailInputValid*/
    ctx[4] !== void 0
  ) {
    emailinput_props.emailInputValid = /*emailInputValid*/
    ctx[4];
  }
  emailinput = new EmailInput({ props: emailinput_props });
  binding_callbacks.push(() => bind(emailinput, "emailInputValid", emailinput_emailInputValid_binding));
  let if_block1 = (
    /*$PasswordlessStore*/
    ctx[6].passwordlessMode === false && create_if_block_4$3(ctx)
  );
  const if_block_creators = [create_if_block_3$3, create_else_block_1$4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$PasswordlessStore*/
      ctx2[6].passwordlessMode === false
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block3 = (
    /*$app*/
    (ctx[7].authProviders.length > 0 || /*$app*/
    ctx[7].additionalAuthMethods.passwordless.enabled === true) && create_if_block$e(ctx)
  );
  modalfooter = new ModalFooter({});
  return {
    c() {
      div4 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div3 = element("div");
      create_component(figureelement.$$.fragment);
      t1 = space();
      h2 = element("h2");
      h2.textContent = "Create an account";
      t3 = space();
      form = element("form");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t4 = space();
      create_component(emailinput.$$.fragment);
      t5 = space();
      div0 = element("div");
      div0.innerHTML = `<label class="ms-form__label" for="Rey">Rey was here</label> 
        <input class="ms-form__input" type="text" placeholder="Rey&#39;s Favorite Color" name="Rey"/>`;
      t8 = space();
      if (if_block1)
        if_block1.c();
      t9 = space();
      div1 = element("div");
      t10 = space();
      if_block2.c();
      t11 = space();
      div2 = element("div");
      button = element("button");
      button.textContent = "Already have an account?";
      t13 = space();
      if (if_block3)
        if_block3.c();
      t14 = space();
      create_component(modalfooter.$$.fragment);
      attr(h2, "class", "ms-modal__title");
      attr(div0, "class", "ms-form__group rey-was-here svelte-1w8lbd8");
      attr(div1, "id", "hcaptcha");
      attr(div1, "class", "h-captcha");
      attr(button, "class", "ms-form__button ms-form__button--text ms-form__button--top-spacing");
      attr(div2, "class", "ms-form__flex ms-form__flex--centered");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(div3, "class", "ms-modal__content");
      attr(div4, "class", "ms-modal");
      attr(div4, "id", "SignupModal");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      if (if_block0)
        if_block0.m(div4, null);
      append(div4, t0);
      append(div4, div3);
      mount_component(figureelement, div3, null);
      append(div3, t1);
      append(div3, h2);
      append(div3, t3);
      append(div3, form);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(form, null);
        }
      }
      append(form, t4);
      mount_component(emailinput, form, null);
      append(form, t5);
      append(form, div0);
      append(form, t8);
      if (if_block1)
        if_block1.m(form, null);
      append(form, t9);
      append(form, div1);
      append(form, t10);
      if_blocks[current_block_type_index].m(form, null);
      append(form, t11);
      append(form, div2);
      append(div2, button);
      append(div3, t13);
      if (if_block3)
        if_block3.m(div3, null);
      append(div4, t14);
      mount_component(modalfooter, div4, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button,
            "click",
            /*click_handler*/
            ctx[14]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitSignup*/
            ctx[9]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!/*params*/
      ctx2[2] || !/*params*/
      ctx2[2].hideCloseButton) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*params*/
          4) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_6$2(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div4, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (dirty & /*$app*/
      128) {
        each_value_1 = /*$app*/
        ctx2[7].customFields;
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(form, t4);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
      const emailinput_changes = {};
      if (!updating_emailInputValid && dirty & /*emailInputValid*/
      16) {
        updating_emailInputValid = true;
        emailinput_changes.emailInputValid = /*emailInputValid*/
        ctx2[4];
        add_flush_callback(() => updating_emailInputValid = false);
      }
      emailinput.$set(emailinput_changes);
      if (
        /*$PasswordlessStore*/
        ctx2[6].passwordlessMode === false
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*$PasswordlessStore*/
          64) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_4$3(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(form, t9);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block2 = if_blocks[current_block_type_index];
        if (!if_block2) {
          if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block2.c();
        } else {
          if_block2.p(ctx2, dirty);
        }
        transition_in(if_block2, 1);
        if_block2.m(form, t11);
      }
      if (
        /*$app*/
        ctx2[7].authProviders.length > 0 || /*$app*/
        ctx2[7].additionalAuthMethods.passwordless.enabled === true
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty & /*$app*/
          128) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block$e(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(div3, null);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(figureelement.$$.fragment, local);
      transition_in(emailinput.$$.fragment, local);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(figureelement.$$.fragment, local);
      transition_out(emailinput.$$.fragment, local);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block0)
        if_block0.d();
      destroy_component(figureelement);
      destroy_each(each_blocks, detaching);
      destroy_component(emailinput);
      if (if_block1)
        if_block1.d();
      if_blocks[current_block_type_index].d();
      if (if_block3)
        if_block3.d();
      destroy_component(modalfooter);
      mounted = false;
      run_all(dispose);
    }
  };
}
var hcaptchaSitekey = "838711f9-0e30-48e9-89e6-8f1ec4b79705";
function executeCaptcha() {
  return __async(this, null, function* () {
    const { response } = yield window.hcaptcha.execute({ async: true });
    return response;
  });
}
function instance$i($$self, $$props, $$invalidate) {
  var _a;
  let $PasswordlessStore;
  let $app;
  let $textStore;
  component_subscribe($$self, PasswordlessStore, ($$value) => $$invalidate(6, $PasswordlessStore = $$value));
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(7, $app = $$value));
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(19, $textStore = $$value));
  let { closeModal } = $$props;
  let { display } = $$props;
  let { onSuccessSignup } = $$props;
  let { params } = $$props;
  if ($app.additionalAuthMethods.passwordless.isDefault === true) {
    setPasswordlessMode(true);
  }
  let text2 = $textStore.text;
  let showLoader2 = false;
  let emailInputValid = false;
  let passwordInputValid = false;
  let captchaRequired = $app.captchaRequired;
  let hcaptchaWidgetID;
  const plans = (((_a = params == null ? void 0 : params.signup) == null ? void 0 : _a.plans) || []).map((plan) => {
    return { planId: plan };
  });
  function renderCaptcha() {
    return __async(this, null, function* () {
      if (captchaRequired) {
        yield window.$memberstackDom._captchaReady;
        hcaptchaWidgetID = window.hcaptcha.render("hcaptcha", { sitekey: hcaptchaSitekey, theme: "light" });
      }
    });
  }
  renderCaptcha();
  function getCaptcha() {
    return window.hcaptcha.getResponse(hcaptchaWidgetID);
  }
  function resetCaptcha() {
    if (captchaRequired && window.hcaptcha) {
      window.hcaptcha.reset(hcaptchaWidgetID);
    }
  }
  function submitSignup(e) {
    return __async(this, null, function* () {
      var _a2;
      const emailInput = e.target.querySelector("[type=email]");
      const passwordInput = e.target.querySelector("[data-ms-internal-password]");
      const customFields = {};
      const customFieldInputs = Array.from(e.target.querySelectorAll("[data-ms-custom-field]"));
      customFieldInputs.map((input) => {
        customFields[input.getAttribute("name")] = input.value;
      }).length;
      if ($PasswordlessStore.passwordlessMode !== true) {
        if (!emailInputValid || !passwordInputValid)
          return;
      } else {
        if (!emailInputValid)
          return;
      }
      $$invalidate(3, showLoader2 = true);
      if (e.target.querySelector("[name=Rey]").value) {
        e.target.reset();
        $$invalidate(3, showLoader2 = false);
        return;
      }
      let captchaToken;
      if (captchaRequired) {
        yield window.$memberstackDom._captchaReady;
        captchaToken = getCaptcha();
        if (!captchaToken) {
          try {
            captchaToken = yield executeCaptcha();
          } catch (err) {
            $$invalidate(3, showLoader2 = false);
            return;
          }
        }
      }
      if ($PasswordlessStore.passwordlessMode !== true) {
        try {
          const { data } = yield window.$memberstackDom.signupMemberEmailPassword(
            {
              email: emailInput.value,
              password: passwordInput.value,
              plans,
              customFields,
              captchaToken
            },
            { includeContentGroups: true }
          );
          onSuccessSignup({ type: "SIGNUP", data });
          $$invalidate(3, showLoader2 = false);
        } catch (err) {
          $$invalidate(3, showLoader2 = false);
          window.$memberstackDom._showMessage(err.message, true);
          resetCaptcha();
        }
      } else {
        try {
          yield window.$memberstackDom.sendMemberSignupPasswordlessEmail({ email: emailInput.value });
          setPasswordlessModalType("signup");
          setPasswordlessEmail(emailInput.value);
          setPasswordlessPlans(((_a2 = params == null ? void 0 : params.signup) == null ? void 0 : _a2.plans) || []);
          setPasswordlessCustomFields(customFields);
          $$invalidate(0, display = "passwordless_token");
          $$invalidate(3, showLoader2 = false);
        } catch (err) {
          $$invalidate(3, showLoader2 = false);
          window.$memberstackDom._showMessage(err.message, true);
          resetCaptcha();
        }
      }
    });
  }
  function submitSignupWithProvider(provider) {
    return __async(this, null, function* () {
      try {
        const { data } = yield window.$memberstackDom.signupWithProvider({ provider, plans });
        onSuccessSignup({ type: "SIGNUP", data });
      } catch (err) {
        $$invalidate(3, showLoader2 = false);
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function emailinput_emailInputValid_binding(value) {
    emailInputValid = value;
    $$invalidate(4, emailInputValid);
  }
  function passwordinput_passwordInputValid_binding(value) {
    passwordInputValid = value;
    $$invalidate(5, passwordInputValid);
  }
  const click_handler = () => $$invalidate(0, display = "login");
  const click_handler_1 = () => setPasswordlessMode(true);
  const click_handler_2 = () => setPasswordlessMode(false);
  const click_handler_3 = (provider) => submitSignupWithProvider(provider.provider);
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(1, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
    if ("onSuccessSignup" in $$props2)
      $$invalidate(11, onSuccessSignup = $$props2.onSuccessSignup);
    if ("params" in $$props2)
      $$invalidate(2, params = $$props2.params);
  };
  return [
    display,
    closeModal,
    params,
    showLoader2,
    emailInputValid,
    passwordInputValid,
    $PasswordlessStore,
    $app,
    text2,
    submitSignup,
    submitSignupWithProvider,
    onSuccessSignup,
    emailinput_emailInputValid_binding,
    passwordinput_passwordInputValid_binding,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3
  ];
}
var SignupModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$i,
      create_fragment$t,
      safe_not_equal,
      {
        closeModal: 1,
        display: 0,
        onSuccessSignup: 11,
        params: 2
      },
      add_css$1
    );
  }
};
function create_fragment$s(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M7.41 1.41L6 0L0 6L6 12L7.41 10.59L2.83 6L7.41 1.41Z");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 8 12");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var BackIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$s, safe_not_equal, {});
  }
};
function create_fragment$r(ctx) {
  let div4;
  let div0;
  let button;
  let backicon;
  let t0;
  let div3;
  let figureelement;
  let t1;
  let h2;
  let t3;
  let p;
  let t5;
  let form;
  let emailinput;
  let updating_emailInputValid;
  let t6;
  let submitbutton;
  let t7;
  let div2;
  let div1;
  let t9;
  let modalfooter;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  figureelement = new FigureElement({});
  function emailinput_emailInputValid_binding(value) {
    ctx[7](value);
  }
  let emailinput_props = {
    placeholder: (
      /*text*/
      ctx[3]["reset_email_placeholder"]
    )
  };
  if (
    /*emailInputValid*/
    ctx[1] !== void 0
  ) {
    emailinput_props.emailInputValid = /*emailInputValid*/
    ctx[1];
  }
  emailinput = new EmailInput({ props: emailinput_props });
  binding_callbacks.push(() => bind(emailinput, "emailInputValid", emailinput_emailInputValid_binding));
  submitbutton = new SubmitButton({
    props: {
      buttonText: (
        /*text*/
        ctx[3]["reset"] || "Send Link"
      ),
      isLoading: (
        /*showLoader*/
        ctx[2]
      )
    }
  });
  modalfooter = new ModalFooter({});
  return {
    c() {
      div4 = element("div");
      div0 = element("div");
      button = element("button");
      create_component(backicon.$$.fragment);
      t0 = space();
      div3 = element("div");
      create_component(figureelement.$$.fragment);
      t1 = space();
      h2 = element("h2");
      h2.textContent = `${/*text*/
      ctx[3]["reset_your_password"] || "Reset your password"}`;
      t3 = space();
      p = element("p");
      p.textContent = `${/*text*/
      ctx[3]["reset_instructions"] || "We\u2019ll email you a secure link to reset the password for your account."}`;
      t5 = space();
      form = element("form");
      create_component(emailinput.$$.fragment);
      t6 = space();
      create_component(submitbutton.$$.fragment);
      t7 = space();
      div2 = element("div");
      div1 = element("div");
      div1.textContent = `${/*text*/
      ctx[3]["reset_already_have_code"] || "I already have a code"}`;
      t9 = space();
      create_component(modalfooter.$$.fragment);
      attr(div0, "data-cy", "back-btn");
      attr(div0, "class", "ms-modal__back");
      attr(h2, "class", "ms-modal__title ms-modal__title--sub-text");
      attr(p, "class", "ms-modal__text");
      attr(div1, "class", "ms-form__link");
      attr(div2, "class", "ms-form__flex ms-form__flex--centered");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(div3, "class", "ms-modal__content");
      attr(div4, "class", "ms-modal");
      attr(div4, "id", "PasswordResetModal");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div0);
      append(div0, button);
      mount_component(backicon, button, null);
      append(div4, t0);
      append(div4, div3);
      mount_component(figureelement, div3, null);
      append(div3, t1);
      append(div3, h2);
      append(div3, t3);
      append(div3, p);
      append(div3, t5);
      append(div3, form);
      mount_component(emailinput, form, null);
      append(form, t6);
      mount_component(submitbutton, form, null);
      append(form, t7);
      append(form, div2);
      append(div2, div1);
      append(div4, t9);
      mount_component(modalfooter, div4, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button,
            "click",
            /*click_handler*/
            ctx[6]
          ),
          listen(
            div1,
            "click",
            /*click_handler_1*/
            ctx[8]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitPasswordReset*/
            ctx[4]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const emailinput_changes = {};
      if (!updating_emailInputValid && dirty & /*emailInputValid*/
      2) {
        updating_emailInputValid = true;
        emailinput_changes.emailInputValid = /*emailInputValid*/
        ctx2[1];
        add_flush_callback(() => updating_emailInputValid = false);
      }
      emailinput.$set(emailinput_changes);
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      4)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[2];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      transition_in(figureelement.$$.fragment, local);
      transition_in(emailinput.$$.fragment, local);
      transition_in(submitbutton.$$.fragment, local);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      transition_out(figureelement.$$.fragment, local);
      transition_out(emailinput.$$.fragment, local);
      transition_out(submitbutton.$$.fragment, local);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      destroy_component(backicon);
      destroy_component(figureelement);
      destroy_component(emailinput);
      destroy_component(submitbutton);
      destroy_component(modalfooter);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$h($$self, $$props, $$invalidate) {
  let $textStore;
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(9, $textStore = $$value));
  let text2 = $textStore.text;
  let { closeModal } = $$props;
  let { display } = $$props;
  let emailInputValid = false;
  let showLoader2 = false;
  function submitPasswordReset(e) {
    return __async(this, null, function* () {
      const emailInput = e.target[0];
      if (!emailInputValid)
        return;
      $$invalidate(2, showLoader2 = true);
      try {
        yield window.$memberstackDom.sendMemberResetPasswordEmail({ email: emailInput.value });
        $$invalidate(0, display = "reset_password");
      } catch (err) {
        console.log(err);
        $$invalidate(2, showLoader2 = false);
        if (err.message) {
          window.$memberstackDom._showMessage(err.message, false);
        }
      }
    });
  }
  const click_handler = () => $$invalidate(0, display = "login");
  function emailinput_emailInputValid_binding(value) {
    emailInputValid = value;
    $$invalidate(1, emailInputValid);
  }
  const click_handler_1 = () => $$invalidate(0, display = "reset_password");
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(5, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
  };
  return [
    display,
    emailInputValid,
    showLoader2,
    text2,
    submitPasswordReset,
    closeModal,
    click_handler,
    emailinput_emailInputValid_binding,
    click_handler_1
  ];
}
var PassResetModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$h, create_fragment$r, safe_not_equal, { closeModal: 5, display: 0 });
  }
};
function create_if_block$d(ctx) {
  let div;
  let erroricon;
  let t;
  let current;
  erroricon = new ErrorIcon({});
  return {
    c() {
      div = element("div");
      create_component(erroricon.$$.fragment);
      t = text(" Please enter a valid code");
      attr(div, "class", "ms-form__error");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(erroricon, div, null);
      append(div, t);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(erroricon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(erroricon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(erroricon);
    }
  };
}
function create_fragment$q(ctx) {
  let div3;
  let div0;
  let button;
  let backicon;
  let t0;
  let closebutton;
  let t1;
  let div2;
  let figureelement;
  let t2;
  let h2;
  let t4;
  let form;
  let div1;
  let label;
  let t6;
  let fieldset;
  let t12;
  let t13;
  let passwordinput;
  let updating_passwordInputValid;
  let t14;
  let submitbutton;
  let t15;
  let modalfooter;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[1]
    ) }
  });
  figureelement = new FigureElement({});
  let if_block = !/*tokenInputValid*/
  ctx[3] && create_if_block$d();
  function passwordinput_passwordInputValid_binding(value) {
    ctx[9](value);
  }
  let passwordinput_props = {
    passwordPlaceholder: (
      /*text*/
      ctx[5]["reset_password_placeholder"]
    ),
    passwordLabel: (
      /*text*/
      ctx[5]["password"] || "Password"
    )
  };
  if (
    /*passwordInputValid*/
    ctx[4] !== void 0
  ) {
    passwordinput_props.passwordInputValid = /*passwordInputValid*/
    ctx[4];
  }
  passwordinput = new PasswordInput({ props: passwordinput_props });
  binding_callbacks.push(() => bind(passwordinput, "passwordInputValid", passwordinput_passwordInputValid_binding));
  submitbutton = new SubmitButton({
    props: {
      buttonText: (
        /*text*/
        ctx[5]["reset_confirm_reset"] || "Confirm & Reset"
      ),
      isLoading: (
        /*showLoader*/
        ctx[2]
      )
    }
  });
  modalfooter = new ModalFooter({});
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      button = element("button");
      create_component(backicon.$$.fragment);
      t0 = space();
      create_component(closebutton.$$.fragment);
      t1 = space();
      div2 = element("div");
      create_component(figureelement.$$.fragment);
      t2 = space();
      h2 = element("h2");
      h2.textContent = `${/*text*/
      ctx[5]["reset_your_password"] || "Reset your password"}`;
      t4 = space();
      form = element("form");
      div1 = element("div");
      label = element("label");
      label.textContent = `${/*text*/
      ctx[5]["reset_enter_code"] || "Enter your 6-digit code"}`;
      t6 = space();
      fieldset = element("fieldset");
      fieldset.innerHTML = `<input type="tel" name="token" class="ms-form__input ms-form__input--token" required=""/> 
          <input type="tel" name="token" class="ms-form__input ms-form__input--token" required=""/> 
          <input type="tel" name="token" class="ms-form__input ms-form__input--token" required=""/> 
          <input type="tel" name="token" class="ms-form__input ms-form__input--token" required=""/> 
          <input type="tel" name="token" class="ms-form__input ms-form__input--token" required=""/> 
          <input type="tel" name="token" class="ms-form__input ms-form__input--token"/>`;
      t12 = space();
      if (if_block)
        if_block.c();
      t13 = space();
      create_component(passwordinput.$$.fragment);
      t14 = space();
      create_component(submitbutton.$$.fragment);
      t15 = space();
      create_component(modalfooter.$$.fragment);
      attr(div0, "class", "ms-modal__back");
      attr(h2, "class", "ms-modal__title");
      attr(label, "class", "ms-form__label");
      attr(label, "for", "token-fieldset");
      attr(fieldset, "class", "ms-form__fieldset");
      attr(fieldset, "name", "token-fieldset");
      attr(div1, "class", "ms-form__group");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(div2, "class", "ms-modal__content");
      attr(div3, "class", "ms-modal");
      attr(div3, "id", "PasswordTokenModal");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div0, button);
      mount_component(backicon, button, null);
      append(div3, t0);
      mount_component(closebutton, div3, null);
      append(div3, t1);
      append(div3, div2);
      mount_component(figureelement, div2, null);
      append(div2, t2);
      append(div2, h2);
      append(div2, t4);
      append(div2, form);
      append(form, div1);
      append(div1, label);
      append(div1, t6);
      append(div1, fieldset);
      append(div1, t12);
      if (if_block)
        if_block.m(div1, null);
      append(form, t13);
      mount_component(passwordinput, form, null);
      append(form, t14);
      mount_component(submitbutton, form, null);
      append(div3, t15);
      mount_component(modalfooter, div3, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button,
            "click",
            /*click_handler*/
            ctx[8]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitPasswordToken*/
            ctx[6]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      2)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[1];
      closebutton.$set(closebutton_changes);
      if (!/*tokenInputValid*/
      ctx2[3]) {
        if (if_block) {
          if (dirty & /*tokenInputValid*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$d();
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const passwordinput_changes = {};
      if (!updating_passwordInputValid && dirty & /*passwordInputValid*/
      16) {
        updating_passwordInputValid = true;
        passwordinput_changes.passwordInputValid = /*passwordInputValid*/
        ctx2[4];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput.$set(passwordinput_changes);
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      4)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[2];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      transition_in(closebutton.$$.fragment, local);
      transition_in(figureelement.$$.fragment, local);
      transition_in(if_block);
      transition_in(passwordinput.$$.fragment, local);
      transition_in(submitbutton.$$.fragment, local);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      transition_out(closebutton.$$.fragment, local);
      transition_out(figureelement.$$.fragment, local);
      transition_out(if_block);
      transition_out(passwordinput.$$.fragment, local);
      transition_out(submitbutton.$$.fragment, local);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      destroy_component(backicon);
      destroy_component(closebutton);
      destroy_component(figureelement);
      if (if_block)
        if_block.d();
      destroy_component(passwordinput);
      destroy_component(submitbutton);
      destroy_component(modalfooter);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$g($$self, $$props, $$invalidate) {
  let $textStore;
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(10, $textStore = $$value));
  let text2 = $textStore.text;
  let { closeModal } = $$props;
  let { display } = $$props;
  let { onSuccessPasswordReset } = $$props;
  let showLoader2 = false;
  let tokenInputValid = true;
  let passwordInputValid = true;
  onMount(() => {
    const tokenElements = [...document.querySelectorAll("input.ms-form__input--token")];
    tokenElements.forEach((ele, index) => {
      ele.addEventListener("keydown", (e) => {
        if (e.keyCode === 8 && e.target.value === "")
          tokenElements[Math.max(0, index - 1)].focus();
      });
      ele.addEventListener("input", (e) => {
        const [first, ...rest] = e.target.value;
        e.target.value = first != null ? first : "";
        const lastInputBox = index === tokenElements.length - 1;
        const insertedContent = first !== void 0;
        if (insertedContent && !lastInputBox) {
          tokenElements[index + 1].focus();
          tokenElements[index + 1].value = rest.join("");
          tokenElements[index + 1].dispatchEvent(new Event("input"));
        }
      });
    });
  });
  const validateFields = (e) => {
    const tokenElements = [...document.querySelectorAll("input.ms-form__input--token")];
    const hasEmpty = tokenElements.some((el) => {
      if (!el.value) {
        return true;
      }
      return false;
    });
    if (hasEmpty) {
      $$invalidate(3, tokenInputValid = false);
    } else {
      $$invalidate(3, tokenInputValid = true);
    }
    return !hasEmpty;
  };
  function submitPasswordToken(e) {
    return __async(this, null, function* () {
      const passwordInput = e.target[7];
      const isValid = validateFields();
      if (!isValid)
        return;
      const token = [...document.getElementsByName("token")].filter(({ name }) => name).map(({ value }) => value).join("");
      try {
        $$invalidate(2, showLoader2 = true);
        const { _internalUseOnly: { message } } = yield window.$memberstackDom.resetMemberPassword({ token, newPassword: passwordInput.value });
        window.$memberstackDom._showMessage(message, false);
        onSuccessPasswordReset({ type: "PASSWORD_RESET", data: {} });
        $$invalidate(2, showLoader2 = false);
        $$invalidate(0, display = "reset_password_success");
      } catch (err) {
        $$invalidate(2, showLoader2 = false);
        console.log(err);
        if (err.message) {
          window.$memberstackDom._showMessage(err.message, true);
        }
      }
    });
  }
  const click_handler = () => $$invalidate(0, display = "forgot_password");
  function passwordinput_passwordInputValid_binding(value) {
    passwordInputValid = value;
    $$invalidate(4, passwordInputValid);
  }
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(1, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
    if ("onSuccessPasswordReset" in $$props2)
      $$invalidate(7, onSuccessPasswordReset = $$props2.onSuccessPasswordReset);
  };
  return [
    display,
    closeModal,
    showLoader2,
    tokenInputValid,
    passwordInputValid,
    text2,
    submitPasswordToken,
    onSuccessPasswordReset,
    click_handler,
    passwordinput_passwordInputValid_binding
  ];
}
var PassTokenModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$g, create_fragment$q, safe_not_equal, {
      closeModal: 1,
      display: 0,
      onSuccessPasswordReset: 7
    });
  }
};
function create_fragment$p(ctx) {
  let div2;
  let div0;
  let t0;
  let closebutton;
  let t1;
  let div1;
  let figureelement;
  let t2;
  let h2;
  let t4;
  let p;
  let t7;
  let modalfooter;
  let current;
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[0]
    ) }
  });
  figureelement = new FigureElement({});
  modalfooter = new ModalFooter({});
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      create_component(closebutton.$$.fragment);
      t1 = space();
      div1 = element("div");
      create_component(figureelement.$$.fragment);
      t2 = space();
      h2 = element("h2");
      h2.textContent = "Success!";
      t4 = space();
      p = element("p");
      p.innerHTML = `Your password has been reset. <br/>
      Please login with your new credentials.`;
      t7 = space();
      create_component(modalfooter.$$.fragment);
      attr(div0, "data-cy", "back-btn");
      attr(div0, "class", "ms-modal__back");
      attr(h2, "class", "ms-modal__title ms-modal__title--sub-text");
      attr(p, "class", "ms-modal__text");
      attr(div1, "class", "ms-modal__content");
      attr(div2, "class", "ms-modal");
      attr(div2, "id", "PasswordSuccessModal");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div2, t0);
      mount_component(closebutton, div2, null);
      append(div2, t1);
      append(div2, div1);
      mount_component(figureelement, div1, null);
      append(div1, t2);
      append(div1, h2);
      append(div1, t4);
      append(div1, p);
      append(div2, t7);
      mount_component(modalfooter, div2, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      1)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[0];
      closebutton.$set(closebutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      transition_in(figureelement.$$.fragment, local);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      transition_out(figureelement.$$.fragment, local);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      destroy_component(closebutton);
      destroy_component(figureelement);
      destroy_component(modalfooter);
    }
  };
}
function instance$f($$self, $$props, $$invalidate) {
  let { closeModal } = $$props;
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(0, closeModal = $$props2.closeModal);
  };
  return [closeModal];
}
var PassSuccessModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$f, create_fragment$p, safe_not_equal, { closeModal: 0 });
  }
};
function create_else_block_1$3(ctx) {
  let button;
  let backicon;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  return {
    c() {
      button = element("button");
      create_component(backicon.$$.fragment);
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(backicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[10]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(backicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$7(ctx) {
  let button;
  let backicon;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  return {
    c() {
      button = element("button");
      create_component(backicon.$$.fragment);
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(backicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(backicon);
      mounted = false;
      dispose();
    }
  };
}
function create_else_block$6(ctx) {
  let h2;
  return {
    c() {
      h2 = element("h2");
      h2.textContent = `${/*text*/
      ctx[5]["passwordless_token_heading"] || "Create an account"}`;
      attr(h2, "class", "ms-modal__title ms-modal__title--sub-text");
    },
    m(target, anchor) {
      insert(target, h2, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(h2);
    }
  };
}
function create_if_block_1$a(ctx) {
  let h2;
  return {
    c() {
      h2 = element("h2");
      h2.textContent = `${/*text*/
      ctx[5]["login_to_your_account"] || "Login to your account"}`;
      attr(h2, "class", "ms-modal__title ms-modal__title--sub-text");
    },
    m(target, anchor) {
      insert(target, h2, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(h2);
    }
  };
}
function create_if_block$c(ctx) {
  let div;
  let erroricon;
  let t;
  let current;
  erroricon = new ErrorIcon({});
  return {
    c() {
      div = element("div");
      create_component(erroricon.$$.fragment);
      t = text(" Please enter a valid code");
      attr(div, "class", "ms-form__error");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(erroricon, div, null);
      append(div, t);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(erroricon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(erroricon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(erroricon);
    }
  };
}
function create_fragment$o(ctx) {
  let div3;
  let div0;
  let current_block_type_index;
  let if_block0;
  let t0;
  let closebutton;
  let t1;
  let div2;
  let figureelement;
  let t2;
  let t3;
  let p;
  let t5;
  let form;
  let div1;
  let label;
  let t7;
  let fieldset;
  let t13;
  let t14;
  let submitbutton;
  let t15;
  let modalfooter;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_2$7, create_else_block_1$3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$PasswordlessStore*/
      ctx2[4].passwordlessModalType === "login"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[1]
    ) }
  });
  figureelement = new FigureElement({});
  function select_block_type_1(ctx2, dirty) {
    if (
      /*$PasswordlessStore*/
      ctx2[4].passwordlessModalType === "login"
    )
      return create_if_block_1$a;
    return create_else_block$6;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block1 = current_block_type(ctx);
  let if_block2 = !/*tokenInputValid*/
  ctx[3] && create_if_block$c();
  submitbutton = new SubmitButton({
    props: {
      buttonText: (
        /*text*/
        ctx[5]["login_verify_email"] || "Verify Email"
      ),
      isLoading: (
        /*showLoader*/
        ctx[2]
      )
    }
  });
  modalfooter = new ModalFooter({});
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      if_block0.c();
      t0 = space();
      create_component(closebutton.$$.fragment);
      t1 = space();
      div2 = element("div");
      create_component(figureelement.$$.fragment);
      t2 = space();
      if_block1.c();
      t3 = space();
      p = element("p");
      p.textContent = `${/*text*/
      ctx[5]["login_passwordless_instructions"] || "Enter the verification code sent to your email address"}`;
      t5 = space();
      form = element("form");
      div1 = element("div");
      label = element("label");
      label.textContent = `${/*text*/
      ctx[5]["login_verification_code"] || "Verification Code"}`;
      t7 = space();
      fieldset = element("fieldset");
      fieldset.innerHTML = `<input name="token" class="ms-form__input ms-form__input--token" required="" type="tel"/> 
          <input name="token" class="ms-form__input ms-form__input--token" required="" type="tel"/> 
          <input name="token" class="ms-form__input ms-form__input--token" required="" type="tel"/> 
          <input name="token" class="ms-form__input ms-form__input--token" required="" type="tel"/> 
          <input name="token" class="ms-form__input ms-form__input--token" required="" type="tel"/> 
          <input name="token" class="ms-form__input ms-form__input--token" type="tel"/>`;
      t13 = space();
      if (if_block2)
        if_block2.c();
      t14 = space();
      create_component(submitbutton.$$.fragment);
      t15 = space();
      create_component(modalfooter.$$.fragment);
      attr(div0, "class", "ms-modal__back");
      attr(p, "class", "ms-modal__text");
      attr(label, "class", "ms-form__label");
      attr(label, "for", "token-fieldset");
      attr(fieldset, "class", "ms-form__fieldset");
      attr(fieldset, "name", "token-fieldset");
      attr(div1, "class", "ms-form__group");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(div2, "class", "ms-modal__content");
      attr(div3, "class", "ms-modal");
      attr(div3, "id", "PasswordlessTokenModal");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      if_blocks[current_block_type_index].m(div0, null);
      append(div3, t0);
      mount_component(closebutton, div3, null);
      append(div3, t1);
      append(div3, div2);
      mount_component(figureelement, div2, null);
      append(div2, t2);
      if_block1.m(div2, null);
      append(div2, t3);
      append(div2, p);
      append(div2, t5);
      append(div2, form);
      append(form, div1);
      append(div1, label);
      append(div1, t7);
      append(div1, fieldset);
      append(div1, t13);
      if (if_block2)
        if_block2.m(div1, null);
      append(form, t14);
      mount_component(submitbutton, form, null);
      append(div3, t15);
      mount_component(modalfooter, div3, null);
      current = true;
      if (!mounted) {
        dispose = listen(form, "submit", stop_propagation(prevent_default(
          /*submitPasswordlessToken*/
          ctx[6]
        )));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div0, null);
      }
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      2)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[1];
      closebutton.$set(closebutton_changes);
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div2, t3);
        }
      }
      if (!/*tokenInputValid*/
      ctx2[3]) {
        if (if_block2) {
          if (dirty & /*tokenInputValid*/
          8) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block$c();
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div1, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      4)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[2];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(closebutton.$$.fragment, local);
      transition_in(figureelement.$$.fragment, local);
      transition_in(if_block2);
      transition_in(submitbutton.$$.fragment, local);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(closebutton.$$.fragment, local);
      transition_out(figureelement.$$.fragment, local);
      transition_out(if_block2);
      transition_out(submitbutton.$$.fragment, local);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      if_blocks[current_block_type_index].d();
      destroy_component(closebutton);
      destroy_component(figureelement);
      if_block1.d();
      if (if_block2)
        if_block2.d();
      destroy_component(submitbutton);
      destroy_component(modalfooter);
      mounted = false;
      dispose();
    }
  };
}
function instance$e($$self, $$props, $$invalidate) {
  let $PasswordlessStore;
  let $textStore;
  component_subscribe($$self, PasswordlessStore, ($$value) => $$invalidate(4, $PasswordlessStore = $$value));
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(11, $textStore = $$value));
  let text2 = $textStore.text;
  let { closeModal } = $$props;
  let { display } = $$props;
  let { onSuccessPasswordlessToken } = $$props;
  let { onSuccess } = $$props;
  let showLoader2 = false;
  let tokenInputValid = true;
  onMount(() => {
    const tokenElements = [...document.querySelectorAll("input.ms-form__input--token")];
    tokenElements.forEach((ele, index) => {
      ele.addEventListener("keydown", (e) => {
        if (e.keyCode === 8 && e.target.value === "")
          tokenElements[Math.max(0, index - 1)].focus();
      });
      ele.addEventListener("input", (e) => {
        const [first, ...rest] = e.target.value;
        e.target.value = first != null ? first : "";
        const lastInputBox = index === tokenElements.length - 1;
        const insertedContent = first !== void 0;
        if (insertedContent && !lastInputBox) {
          tokenElements[index + 1].focus();
          tokenElements[index + 1].value = rest.join("");
          tokenElements[index + 1].dispatchEvent(new Event("input"));
        }
      });
    });
  });
  const validateFields = (e) => {
    const tokenElements = [...document.querySelectorAll("input.ms-form__input--token")];
    const hasEmpty = tokenElements.some((el) => {
      if (!el.value) {
        return true;
      }
      return false;
    });
    if (hasEmpty) {
      $$invalidate(3, tokenInputValid = false);
    } else {
      $$invalidate(3, tokenInputValid = true);
    }
    return !hasEmpty;
  };
  function submitPasswordlessToken(e) {
    return __async(this, null, function* () {
      e.target[7];
      const isValid = validateFields();
      if (!isValid)
        return;
      const token = [...document.getElementsByName("token")].filter(({ name }) => name).map(({ value }) => value).join("");
      try {
        $$invalidate(2, showLoader2 = true);
        if ($PasswordlessStore.passwordlessModalType === "login") {
          const { data } = yield window.$memberstackDom.loginMemberPasswordless(
            {
              passwordlessToken: token,
              email: $PasswordlessStore.passwordlessEmail
            },
            { includeContentGroups: true }
          );
          onSuccess({ type: "LOGIN", data });
          $$invalidate(2, showLoader2 = false);
        } else {
          const plans = ($PasswordlessStore.passwordlessPlans || []).map((plan) => {
            return { planId: plan };
          });
          const { data } = yield window.$memberstackDom.signupMemberPasswordless(
            {
              passwordlessToken: token,
              email: $PasswordlessStore.passwordlessEmail,
              plans,
              customFields: $PasswordlessStore.passwordlessCustomFields
            },
            { includeContentGroups: true }
          );
          onSuccess({ type: "SIGNUP", data });
          $$invalidate(2, showLoader2 = false);
        }
      } catch (err) {
        $$invalidate(2, showLoader2 = false);
        console.log(err);
        if (err.message) {
          window.$memberstackDom._showMessage(err.message, true);
        }
      }
    });
  }
  const click_handler = () => $$invalidate(0, display = "login");
  const click_handler_1 = () => $$invalidate(0, display = "signup");
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(1, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
    if ("onSuccessPasswordlessToken" in $$props2)
      $$invalidate(7, onSuccessPasswordlessToken = $$props2.onSuccessPasswordlessToken);
    if ("onSuccess" in $$props2)
      $$invalidate(8, onSuccess = $$props2.onSuccess);
  };
  return [
    display,
    closeModal,
    showLoader2,
    tokenInputValid,
    $PasswordlessStore,
    text2,
    submitPasswordlessToken,
    onSuccessPasswordlessToken,
    onSuccess,
    click_handler,
    click_handler_1
  ];
}
var PasswordlessTokenModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$e, create_fragment$o, safe_not_equal, {
      closeModal: 1,
      display: 0,
      onSuccessPasswordlessToken: 7,
      onSuccess: 8
    });
  }
};
function create_fragment$n(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "m8 8c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z");
      attr(path, "fill", "currentColor");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 16 16");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ProfileIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$n, safe_not_equal, {});
  }
};
function create_fragment$m(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "m9 0-9 4v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12v-6l-9-4zm0 10.99h7c-0.53 4.12-3.28 7.79-7 8.94v-8.93h-7v-5.7l7-3.11v8.8z");
      attr(path, "fill", "currentColor");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 18 22");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var SecurityIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$m, safe_not_equal, {});
  }
};
function create_fragment$l(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M16 16H2V2H9V0H2C0.89 0 0 0.9 0 2V16C0 17.1 0.89 18 2 18H16C17.1 18 18 17.1 18 16V9H16V16ZM11 0V2H14.59L4.76 11.83L6.17 13.24L16 3.41V7H18V0H11Z");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 18 18");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var LinkOutIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$l, safe_not_equal, {});
  }
};
function create_fragment$k(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "M16 7H3.83L9.42 1.41L8 0L0 8L8 16L9.41 14.59L3.83 9H16V7Z");
      attr(path, "fill", "currentColor");
      attr(svg, "width", "16");
      attr(svg, "height", "16");
      attr(svg, "viewBox", "0 0 16 16");
      attr(svg, "fill", "none");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var LogoutIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$k, safe_not_equal, {});
  }
};
function create_fragment$j(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M12 2l-5.5 9h11L12 2zm0 3.84L13.93 9h-3.87L12 5.84zM17.5 13c-2.49 0-4.5 2.01-4.5 4.5s2.01 4.5 4.5 4.5 4.5-2.01 4.5-4.5-2.01-4.5-4.5-4.5zm0 7c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM3 21.5h8v-8H3v8zm2-6h4v4H5v-4z");
      attr(svg, "fill", "none");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "3 2 19 20");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var PlansIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$j, safe_not_equal, {});
  }
};
function create_if_block_1$9(ctx) {
  let button;
  let profileicon;
  let t;
  let current;
  let mounted;
  let dispose;
  profileicon = new ProfileIcon({});
  return {
    c() {
      button = element("button");
      create_component(profileicon.$$.fragment);
      t = text(" Profile");
      attr(button, "data-cy", "profile-btn");
      attr(button, "class", "ms-modal__profile-option");
      toggle_class(
        button,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "profile"
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(profileicon, button, null);
      append(button, t);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "profile"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(profileicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(profileicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$b(ctx) {
  let button;
  let plansicon;
  let t;
  let current;
  let mounted;
  let dispose;
  plansicon = new PlansIcon({});
  return {
    c() {
      button = element("button");
      create_component(plansicon.$$.fragment);
      t = text(" Plans");
      attr(button, "data-cy", "plans-btn");
      attr(button, "class", "ms-modal__profile-option");
      toggle_class(
        button,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "plans"
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(plansicon, button, null);
      append(button, t);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_2*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "plans"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(plansicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(plansicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(plansicon);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$i(ctx) {
  let t0;
  let button0;
  let securityicon;
  let t1;
  let t2;
  let show_if = (
    /*showPlansNavButton*/
    ctx[3]()
  );
  let t3;
  let button1;
  let logouticon;
  let t4;
  let current;
  let mounted;
  let dispose;
  let if_block0 = !/*hideProfileSection*/
  ctx[1] && create_if_block_1$9(ctx);
  securityicon = new SecurityIcon({});
  let if_block1 = show_if && create_if_block$b(ctx);
  logouticon = new LogoutIcon({});
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t0 = space();
      button0 = element("button");
      create_component(securityicon.$$.fragment);
      t1 = text(" Security");
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      button1 = element("button");
      create_component(logouticon.$$.fragment);
      t4 = text(" Logout");
      attr(button0, "data-cy", "security-btn");
      attr(button0, "class", "ms-modal__profile-option");
      toggle_class(
        button0,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "security" || /*displayProfile*/
        ctx[0] === "changePassword"
      );
      attr(button1, "data-cy", "logout-btn");
      attr(button1, "class", "ms-modal__profile-option");
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t0, anchor);
      insert(target, button0, anchor);
      mount_component(securityicon, button0, null);
      append(button0, t1);
      insert(target, t2, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t3, anchor);
      insert(target, button1, anchor);
      mount_component(logouticon, button1, null);
      append(button1, t4);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler_1*/
            ctx[8]
          ),
          listen(
            button1,
            "click",
            /*logout*/
            ctx[2]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!/*hideProfileSection*/
      ctx2[1]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*hideProfileSection*/
          2) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$9(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button0,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "security" || /*displayProfile*/
          ctx2[0] === "changePassword"
        );
      }
      if (show_if)
        if_block1.p(ctx2, dirty);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(securityicon.$$.fragment, local);
      transition_in(if_block1);
      transition_in(logouticon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(securityicon.$$.fragment, local);
      transition_out(if_block1);
      transition_out(logouticon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(button0);
      destroy_component(securityicon);
      if (detaching)
        detach(t2);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(t3);
      if (detaching)
        detach(button1);
      destroy_component(logouticon);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$d($$self, $$props, $$invalidate) {
  let { member } = $$props;
  let { onSuccessLogout } = $$props;
  let { displayProfile } = $$props;
  let { profileLoader } = $$props;
  let { hideProfileSection: hideProfileSection2 } = $$props;
  const unsubscribe = AppStore.subscribe((data) => {
    if (!data.initialValue) {
      const container = document.getElementById("msOverlay");
      const css = document.createElement("style");
      const color = data.branding.colors.lightMode.primaryButton;
      const fullCSS = `.ms-modal__profile-option:hover { color: ${color};} .ms-modal__profile-option--active { color: ${color};} .ms-modal__save-button { background: ${color};} .ms-modal__save-button:disabled { background: ${color};}`;
      css.appendChild(document.createTextNode(fullCSS));
      container.appendChild(css);
    }
  });
  onDestroy(() => {
    unsubscribe();
  });
  function logout(e) {
    return __async(this, null, function* () {
      try {
        const { data, _internalUseOnly: { message } } = yield window.$memberstackDom.logout();
        window.$memberstackDom._showMessage(message, false);
        onSuccessLogout({ type: "LOGOUT", data });
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function showPlansNavButton() {
    return member.stripeCustomerId || member.planConnections.some((plan) => plan.type === "FREE");
  }
  const click_handler = () => $$invalidate(0, displayProfile = "profile");
  const click_handler_1 = () => $$invalidate(0, displayProfile = "security");
  const click_handler_2 = () => $$invalidate(0, displayProfile = "plans");
  $$self.$$set = ($$props2) => {
    if ("member" in $$props2)
      $$invalidate(4, member = $$props2.member);
    if ("onSuccessLogout" in $$props2)
      $$invalidate(5, onSuccessLogout = $$props2.onSuccessLogout);
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("profileLoader" in $$props2)
      $$invalidate(6, profileLoader = $$props2.profileLoader);
    if ("hideProfileSection" in $$props2)
      $$invalidate(1, hideProfileSection2 = $$props2.hideProfileSection);
  };
  return [
    displayProfile,
    hideProfileSection2,
    logout,
    showPlansNavButton,
    member,
    onSuccessLogout,
    profileLoader,
    click_handler,
    click_handler_1,
    click_handler_2
  ];
}
var ProfileModalNav = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$d, create_fragment$i, safe_not_equal, {
      member: 4,
      onSuccessLogout: 5,
      displayProfile: 0,
      profileLoader: 6,
      hideProfileSection: 1
    });
  }
};
function create_fragment$h(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "white");
      attr(path, "d", "M21 21C24.315 21 27 18.315 27 15C27 11.685 24.315 9 21 9C17.685 9 15 11.685 15 15C15 18.315 17.685 21 21 21ZM21 24C16.995 24 9 26.01 9 30V31.5C9 32.325 9.675 33 10.5 33H31.5C32.325 33 33 32.325 33 31.5V30C33 26.01 25.005 24 21 24Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "width", "42");
      attr(svg, "height", "42");
      attr(svg, "viewBox", "0 0 42 42");
      attr(svg, "fill", "none");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ProfileDefaultImage = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$h, safe_not_equal, {});
  }
};
function create_fragment$g(ctx) {
  let svg;
  let g;
  let path0;
  let defs;
  let clipPath;
  let path1;
  return {
    c() {
      svg = svg_element("svg");
      g = svg_element("g");
      path0 = svg_element("path");
      defs = svg_element("defs");
      clipPath = svg_element("clipPath");
      path1 = svg_element("path");
      attr(path0, "fill", "#494949");
      attr(path0, "d", "M6.667 10.667h2.666c.367 0 .667-.3.667-.667V6.667h1.06c.593 0 .893-.72.473-1.14l-3.06-3.06a.664.664 0 0 0-.94 0l-3.06 3.06c-.42.42-.126 1.14.467 1.14H6V10c0 .367.3.667.667.667zM4 12h8c.367 0 .667.3.667.667 0 .367-.3.667-.667.667H4a.669.669 0 0 1-.667-.667c0-.367.3-.667.667-.667z");
      attr(g, "clip-path", "url(#a)");
      attr(path1, "fill", "#fff");
      attr(path1, "d", "M0 0h16v16H0z");
      attr(clipPath, "id", "a");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 16 16");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, g);
      append(g, path0);
      append(svg, defs);
      append(defs, clipPath);
      append(clipPath, path1);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var UploadIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$g, safe_not_equal, {});
  }
};
function get_each_context$4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  child_ctx[11] = list;
  child_ctx[12] = i;
  return child_ctx;
}
function create_else_block_1$2(ctx) {
  let profiledefaultimage;
  let current;
  profiledefaultimage = new ProfileDefaultImage({});
  return {
    c() {
      create_component(profiledefaultimage.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profiledefaultimage, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(profiledefaultimage.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profiledefaultimage.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profiledefaultimage, detaching);
    }
  };
}
function create_if_block_2$6(ctx) {
  let img;
  let img_src_value;
  return {
    c() {
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*member*/
      ctx[0].profileImage))
        attr(img, "src", img_src_value);
      attr(img, "alt", "profile image");
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*member*/
      1 && !src_url_equal(img.src, img_src_value = /*member*/
      ctx2[0].profileImage)) {
        attr(img, "src", img_src_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(img);
    }
  };
}
function create_else_block$5(ctx) {
  let t;
  return {
    c() {
      t = text("Replace Image");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_1$8(ctx) {
  let t;
  return {
    c() {
      t = text("Upload Profile Image");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block$a(ctx) {
  let div1;
  let div0;
  let label;
  let t0_value = (
    /*customField*/
    ctx[10].label + ""
  );
  let t0;
  let label_for_value;
  let t1;
  let input;
  let input_placeholder_value;
  let input_name_value;
  let t2;
  let mounted;
  let dispose;
  function input_input_handler() {
    ctx[6].call(
      input,
      /*customField*/
      ctx[10]
    );
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      label = element("label");
      t0 = text(t0_value);
      t1 = space();
      input = element("input");
      t2 = space();
      attr(label, "class", "ms-form__label");
      attr(label, "for", label_for_value = /*customField*/
      ctx[10].key);
      attr(input, "class", "ms-form__input");
      attr(input, "type", "text");
      attr(input, "placeholder", input_placeholder_value = /*customField*/
      ctx[10].label);
      attr(input, "name", input_name_value = /*customField*/
      ctx[10].key);
      attr(div0, "class", "ms-form__group");
      attr(div1, "class", "ms-modal__custom-field-container");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, label);
      append(label, t0);
      append(div0, t1);
      append(div0, input);
      set_input_value(
        input,
        /*member*/
        ctx[0].customFields[
          /*customField*/
          ctx[10].key
        ]
      );
      append(div1, t2);
      if (!mounted) {
        dispose = [
          listen(input, "input", input_input_handler),
          listen(
            input,
            "keyup",
            /*checkForChange*/
            ctx[4]
          ),
          listen(
            input,
            "paste",
            /*checkForChange*/
            ctx[4]
          )
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*customFields*/
      2 && t0_value !== (t0_value = /*customField*/
      ctx[10].label + ""))
        set_data(t0, t0_value);
      if (dirty & /*customFields*/
      2 && label_for_value !== (label_for_value = /*customField*/
      ctx[10].key)) {
        attr(label, "for", label_for_value);
      }
      if (dirty & /*customFields*/
      2 && input_placeholder_value !== (input_placeholder_value = /*customField*/
      ctx[10].label)) {
        attr(input, "placeholder", input_placeholder_value);
      }
      if (dirty & /*customFields*/
      2 && input_name_value !== (input_name_value = /*customField*/
      ctx[10].key)) {
        attr(input, "name", input_name_value);
      }
      if (dirty & /*member, customFields*/
      3 && input.value !== /*member*/
      ctx[0].customFields[
        /*customField*/
        ctx[10].key
      ]) {
        set_input_value(
          input,
          /*member*/
          ctx[0].customFields[
            /*customField*/
            ctx[10].key
          ]
        );
      }
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block$4(ctx) {
  let if_block_anchor;
  let if_block = (
    /*customField*/
    ctx[10].hidden !== true && create_if_block$a(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*customField*/
        ctx2[10].hidden !== true
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$a(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment$f(ctx) {
  let div1;
  let h2;
  let t1;
  let div0;
  let button0;
  let t2;
  let t3;
  let div4;
  let div2;
  let current_block_type_index;
  let if_block0;
  let t4;
  let div3;
  let button1;
  let uploadicon;
  let t5;
  let form;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_2$6, create_else_block_1$2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*member*/
      ctx2[0].profileImage
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  uploadicon = new UploadIcon({});
  function select_block_type_1(ctx2, dirty) {
    if (!/*member*/
    ctx2[0].profileImage)
      return create_if_block_1$8;
    return create_else_block$5;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block1 = current_block_type(ctx);
  let each_value = (
    /*customFields*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
  }
  return {
    c() {
      div1 = element("div");
      h2 = element("h2");
      h2.textContent = "Profile Information";
      t1 = space();
      div0 = element("div");
      button0 = element("button");
      t2 = text("Save");
      t3 = space();
      div4 = element("div");
      div2 = element("div");
      if_block0.c();
      t4 = space();
      div3 = element("div");
      button1 = element("button");
      create_component(uploadicon.$$.fragment);
      if_block1.c();
      t5 = space();
      form = element("form");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(h2, "class", "ms-modal__title ms-modal__title--profile");
      attr(button0, "class", "ms-modal__save-button");
      button0.disabled = /*saveDisabled*/
      ctx[2];
      attr(div0, "class", "ms-modal__action-container");
      attr(div1, "class", "ms-modal__title-container");
      attr(div2, "class", "ms-modal__profile-image");
      attr(button1, "data-cy", "change-profile-image");
      attr(button1, "type", "submit");
      attr(button1, "class", "ms-modal__outline-button");
      attr(button1, "data-image-btn", "");
      attr(div3, "class", "ms-modal__profile-image-button-container");
      attr(div4, "class", "ms-modal__profile-image-container");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, h2);
      append(div1, t1);
      append(div1, div0);
      append(div0, button0);
      append(button0, t2);
      insert(target, t3, anchor);
      insert(target, div4, anchor);
      append(div4, div2);
      if_blocks[current_block_type_index].m(div2, null);
      append(div4, t4);
      append(div4, div3);
      append(div3, button1);
      mount_component(uploadicon, button1, null);
      if_block1.m(button1, null);
      insert(target, t5, anchor);
      insert(target, form, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(form, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*saveProfile*/
            ctx[3]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*saveProfile*/
            ctx[3]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*saveDisabled*/
      4) {
        button0.disabled = /*saveDisabled*/
        ctx2[2];
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div2, null);
      }
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(button1, null);
        }
      }
      if (dirty & /*customFields, member, checkForChange*/
      19) {
        each_value = /*customFields*/
        ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$4(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(form, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(uploadicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(uploadicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (detaching)
        detach(t3);
      if (detaching)
        detach(div4);
      if_blocks[current_block_type_index].d();
      destroy_component(uploadicon);
      if_block1.d();
      if (detaching)
        detach(t5);
      if (detaching)
        detach(form);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$c($$self, $$props, $$invalidate) {
  let { customFields } = $$props;
  let { member } = $$props;
  let { profileLoader } = $$props;
  const createFileInputElement = () => {
    const fileInputField = document.createElement("input");
    fileInputField.setAttribute("required", "");
    fileInputField.setAttribute("type", "file");
    fileInputField.setAttribute("accept", "image/*");
    fileInputField.setAttribute("profile-image", "true");
    fileInputField.setAttribute("name", "profile-image");
    fileInputField.setAttribute("DATA-name", "File");
    fileInputField.setAttribute("hidden", "");
    fileInputField.setAttribute("tabindex", "-1");
    return fileInputField;
  };
  const initProfileImageButton = (uploadButton) => {
    const fileInputField = createFileInputElement();
    uploadButton.parentNode.insertBefore(fileInputField, uploadButton.nextSibling);
    uploadButton.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      fileInputField.click();
    });
    fileInputField.addEventListener("change", (e) => __async(this, null, function* () {
      e.preventDefault();
      e.stopPropagation();
      const file = e.target.files[0];
      const { size: fileSize, type: fileType } = file;
      if (fileType.includes("image") === false)
        return window.$memberstackDom._showMessage("File is not an image.", true);
      if (fileSize > 4e6)
        return window.$memberstackDom._showMessage("Image must be less than 2MB.", true);
      try {
        $$invalidate(5, profileLoader = true);
        const updateMemberProfileImageFunction = window.$memberstackDom.updateMemberProfileImage;
        const { data, _internalUseOnly: { message } } = yield updateMemberProfileImageFunction({ profileImage: file });
        $$invalidate(0, member.profileImage = data.profileImage, member);
        if (message) {
          window.$memberstackDom._showMessage(message, false);
        }
      } catch (err) {
        console.log(err);
        if (err.message) {
          window.$memberstackDom._showMessage(err.message, true);
        }
      }
      $$invalidate(5, profileLoader = false);
    }));
  };
  onMount(() => {
    const upload = document.querySelector("[data-image-btn]");
    initProfileImageButton(upload);
  });
  let initialCustomFields = JSON.parse(JSON.stringify(member.customFields));
  let saveDisabled = true;
  function saveProfile(e) {
    return __async(this, null, function* () {
      $$invalidate(5, profileLoader = true);
      try {
        const { _internalUseOnly: { message: msg } } = yield window.$memberstackDom.updateMember({ customFields: member.customFields });
        $$invalidate(5, profileLoader = false);
        $$invalidate(2, saveDisabled = true);
        initialCustomFields = JSON.parse(JSON.stringify(member.customFields));
        window.$memberstackDom._showMessage(msg, false);
      } catch (err) {
        $$invalidate(5, profileLoader = false);
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function checkForChange(e) {
    if (e.target.value !== initialCustomFields[e.target.name]) {
      $$invalidate(2, saveDisabled = false);
      return;
    }
    $$invalidate(2, saveDisabled = true);
  }
  function input_input_handler(customField) {
    member.customFields[customField.key] = this.value;
    $$invalidate(0, member);
  }
  $$self.$$set = ($$props2) => {
    if ("customFields" in $$props2)
      $$invalidate(1, customFields = $$props2.customFields);
    if ("member" in $$props2)
      $$invalidate(0, member = $$props2.member);
    if ("profileLoader" in $$props2)
      $$invalidate(5, profileLoader = $$props2.profileLoader);
  };
  return [
    member,
    customFields,
    saveDisabled,
    saveProfile,
    checkForChange,
    profileLoader,
    input_input_handler
  ];
}
var ProfileInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$c, create_fragment$f, safe_not_equal, {
      customFields: 1,
      member: 0,
      profileLoader: 5
    });
  }
};
function create_fragment$e(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m14 7h-1v-2c0-2.76-2.24-5-5-5s-5 2.24-5 5v2h-1c-1.1 0-2 0.9-2 2v10c0 1.1 0.9 2 2 2h12c1.1 0 2-0.9 2-2v-10c0-1.1-0.9-2-2-2zm-9-2c0-1.66 1.34-3 3-3s3 1.34 3 3v2h-6v-2zm9 14h-12v-10h12v10zm-6-3c1.1 0 2-0.9 2-2s-0.9-2-2-2-2 0.9-2 2 0.9 2 2 2z");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 16 21");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var PasswordLockIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$e, safe_not_equal, {});
  }
};
function get_each_context$3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function create_else_block_1$1(ctx) {
  let t;
  return {
    c() {
      t = text("Change Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_2$5(ctx) {
  let t;
  return {
    c() {
      t = text("Set Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block$9(ctx) {
  let p;
  let t1;
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_value = (
    /*$app*/
    ctx[4].authProviders
  );
  const get_key = (ctx2) => (
    /*provider*/
    ctx2[16].provider
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context$3(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
  }
  return {
    c() {
      p = element("p");
      p.textContent = "Connect Additional Accounts";
      t1 = space();
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(p, "class", "ms-form__label");
      attr(div, "class", "ms-modal__social");
    },
    m(target, anchor) {
      insert(target, p, anchor);
      insert(target, t1, anchor);
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*disconnectProvider, $app, member, connectAdditionalProvider*/
      210) {
        each_value = /*$app*/
        ctx2[4].authProviders;
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, destroy_block, create_each_block$3, null, get_each_context$3);
      }
    },
    d(detaching) {
      if (detaching)
        detach(p);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
    }
  };
}
function create_else_block$4(ctx) {
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1;
  let t2_value = (
    /*provider*/
    ctx[16].name + ""
  );
  let t2;
  let mounted;
  let dispose;
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[14](
        /*provider*/
        ctx[16]
      )
    );
  }
  return {
    c() {
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text("Connect with ");
      t2 = text(t2_value);
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[16].name);
      attr(button, "class", "ms-modal__social-button");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_2);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      16 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      16 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[16].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      16 && t2_value !== (t2_value = /*provider*/
      ctx[16].name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$7(ctx) {
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1;
  let t2_value = (
    /*provider*/
    ctx[16].name + ""
  );
  let t2;
  let mounted;
  let dispose;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[13](
        /*provider*/
        ctx[16]
      )
    );
  }
  return {
    c() {
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text("Disconnect ");
      t2 = text(t2_value);
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[16].name);
      attr(button, "class", "ms-modal__social-button");
      set_style(button, "background-color", "#F6F6F6");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      16 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      16 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[16].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      16 && t2_value !== (t2_value = /*provider*/
      ctx[16].name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$3(key_1, ctx) {
  let div;
  let show_if;
  let t;
  function func(...args) {
    return (
      /*func*/
      ctx[9](
        /*provider*/
        ctx[16],
        ...args
      )
    );
  }
  function select_block_type_1(ctx2, dirty) {
    if (dirty & /*member, $app*/
    18)
      show_if = null;
    if (show_if == null)
      show_if = !!/*member*/
      ctx2[1].auth.providers.some(func);
    if (show_if)
      return create_if_block_1$7;
    return create_else_block$4;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    key: key_1,
    first: null,
    c() {
      div = element("div");
      if_block.c();
      t = space();
      attr(div, "class", "ms-modal__social-buttons");
      this.first = div;
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_block.m(div, null);
      append(div, t);
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
        if_block.p(ctx, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx);
        if (if_block) {
          if_block.c();
          if_block.m(div, t);
        }
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_block.d();
    }
  };
}
function create_fragment$d(ctx) {
  let div1;
  let h2;
  let t1;
  let div0;
  let button0;
  let t2;
  let button0_disabled_value;
  let t3;
  let form;
  let emailinput;
  let updating_emailInputValid;
  let updating_emailValue;
  let t4;
  let div2;
  let label;
  let t6;
  let button1;
  let passwordlockicon;
  let t7;
  let t8;
  let if_block1_anchor;
  let current;
  let mounted;
  let dispose;
  function emailinput_emailInputValid_binding(value) {
    ctx[10](value);
  }
  function emailinput_emailValue_binding(value) {
    ctx[11](value);
  }
  let emailinput_props = {};
  if (
    /*emailInputValid*/
    ctx[3] !== void 0
  ) {
    emailinput_props.emailInputValid = /*emailInputValid*/
    ctx[3];
  }
  if (
    /*emailValue*/
    ctx[2] !== void 0
  ) {
    emailinput_props.emailValue = /*emailValue*/
    ctx[2];
  }
  emailinput = new EmailInput({ props: emailinput_props });
  binding_callbacks.push(() => bind(emailinput, "emailInputValid", emailinput_emailInputValid_binding));
  binding_callbacks.push(() => bind(emailinput, "emailValue", emailinput_emailValue_binding));
  passwordlockicon = new PasswordLockIcon({});
  function select_block_type(ctx2, dirty) {
    if (!/*member*/
    ctx2[1].auth.hasPassword)
      return create_if_block_2$5;
    return create_else_block_1$1;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*$app*/
    ctx[4].authProviders.length > 0 && create_if_block$9(ctx)
  );
  return {
    c() {
      div1 = element("div");
      h2 = element("h2");
      h2.textContent = "Security";
      t1 = space();
      div0 = element("div");
      button0 = element("button");
      t2 = text("Save");
      t3 = space();
      form = element("form");
      create_component(emailinput.$$.fragment);
      t4 = space();
      div2 = element("div");
      label = element("label");
      label.textContent = "Password";
      t6 = space();
      button1 = element("button");
      create_component(passwordlockicon.$$.fragment);
      t7 = space();
      if_block0.c();
      t8 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      attr(h2, "class", "ms-modal__title ms-modal__title--profile");
      attr(button0, "class", "ms-modal__save-button");
      button0.disabled = button0_disabled_value = !/*emailInputValid*/
      ctx[3];
      attr(div0, "class", "ms-modal__action-container");
      attr(div1, "class", "ms-modal__title-container");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(label, "class", "ms-form__label");
      attr(label, "for", "setPassword");
      attr(button1, "data-cy", "change-password-btn");
      attr(button1, "class", "ms-modal__outline-button");
      attr(button1, "name", "setPassword");
      attr(div2, "class", "ms-form__group");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, h2);
      append(div1, t1);
      append(div1, div0);
      append(div0, button0);
      append(button0, t2);
      insert(target, t3, anchor);
      insert(target, form, anchor);
      mount_component(emailinput, form, null);
      insert(target, t4, anchor);
      insert(target, div2, anchor);
      append(div2, label);
      append(div2, t6);
      append(div2, button1);
      mount_component(passwordlockicon, button1, null);
      append(button1, t7);
      if_block0.m(button1, null);
      insert(target, t8, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*submitEmailChange*/
            ctx[5]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitEmailChange*/
            ctx[5]
          ))),
          listen(
            button1,
            "click",
            /*click_handler*/
            ctx[12]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*emailInputValid*/
      8 && button0_disabled_value !== (button0_disabled_value = !/*emailInputValid*/
      ctx2[3])) {
        button0.disabled = button0_disabled_value;
      }
      const emailinput_changes = {};
      if (!updating_emailInputValid && dirty & /*emailInputValid*/
      8) {
        updating_emailInputValid = true;
        emailinput_changes.emailInputValid = /*emailInputValid*/
        ctx2[3];
        add_flush_callback(() => updating_emailInputValid = false);
      }
      if (!updating_emailValue && dirty & /*emailValue*/
      4) {
        updating_emailValue = true;
        emailinput_changes.emailValue = /*emailValue*/
        ctx2[2];
        add_flush_callback(() => updating_emailValue = false);
      }
      emailinput.$set(emailinput_changes);
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(button1, null);
        }
      }
      if (
        /*$app*/
        ctx2[4].authProviders.length > 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$9(ctx2);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(emailinput.$$.fragment, local);
      transition_in(passwordlockicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(emailinput.$$.fragment, local);
      transition_out(passwordlockicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (detaching)
        detach(t3);
      if (detaching)
        detach(form);
      destroy_component(emailinput);
      if (detaching)
        detach(t4);
      if (detaching)
        detach(div2);
      destroy_component(passwordlockicon);
      if_block0.d();
      if (detaching)
        detach(t8);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(if_block1_anchor);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$b($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(4, $app = $$value));
  let { displayProfile } = $$props;
  let { member } = $$props;
  let { emailValue } = $$props;
  let { profileLoader } = $$props;
  $app.authProviders.sort((a, b) => {
    if (isConnected(a) === isConnected(b)) {
      return a.order - b.order;
    }
    return isConnected(a) ? -1 : 1;
  });
  let emailInputValid = false;
  function submitEmailChange(e) {
    return __async(this, null, function* () {
      if (!emailInputValid || !emailValue)
        return;
      $$invalidate(8, profileLoader = true);
      try {
        const { _internalUseOnly: { message } } = yield window.$memberstackDom.updateMemberAuth({ email: emailValue });
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(8, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function disconnectProvider(provider) {
    return __async(this, null, function* () {
      $$invalidate(8, profileLoader = true);
      try {
        const { data, _internalUseOnly: { message } } = yield window.$memberstackDom.disconnectProvider({ provider });
        $$invalidate(1, member = __spreadProps(__spreadValues({}, member), {
          auth: __spreadProps(__spreadValues({}, member.auth), {
            providers: data.providers
          })
        }));
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(8, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function connectAdditionalProvider(provider) {
    return __async(this, null, function* () {
      console.log("connect", provider);
      try {
        const { data } = yield window.$memberstackDom.connectProvider({ provider });
        $$invalidate(1, member = __spreadProps(__spreadValues({}, member), {
          auth: __spreadProps(__spreadValues({}, member.auth), {
            providers: data.providers
          })
        }));
        window.$memberstackDom._showMessage(data.message, false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function isConnected(provider) {
    return member.auth.providers.some((prv) => prv.provider === provider.provider);
  }
  const func = (provider, prv) => prv.provider === provider.provider;
  function emailinput_emailInputValid_binding(value) {
    emailInputValid = value;
    $$invalidate(3, emailInputValid);
  }
  function emailinput_emailValue_binding(value) {
    emailValue = value;
    $$invalidate(2, emailValue);
  }
  const click_handler = () => $$invalidate(0, displayProfile = "changePassword");
  const click_handler_1 = (provider) => disconnectProvider(provider.provider);
  const click_handler_2 = (provider) => connectAdditionalProvider(provider.provider);
  $$self.$$set = ($$props2) => {
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
    if ("emailValue" in $$props2)
      $$invalidate(2, emailValue = $$props2.emailValue);
    if ("profileLoader" in $$props2)
      $$invalidate(8, profileLoader = $$props2.profileLoader);
  };
  return [
    displayProfile,
    member,
    emailValue,
    emailInputValid,
    $app,
    submitEmailChange,
    disconnectProvider,
    connectAdditionalProvider,
    profileLoader,
    func,
    emailinput_emailInputValid_binding,
    emailinput_emailValue_binding,
    click_handler,
    click_handler_1,
    click_handler_2
  ];
}
var SecurityInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$b, create_fragment$d, safe_not_equal, {
      displayProfile: 0,
      member: 1,
      emailValue: 2,
      profileLoader: 8
    });
  }
};
function create_else_block$3(ctx) {
  let t;
  return {
    c() {
      t = text("Change Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_1$6(ctx) {
  let t;
  return {
    c() {
      t = text("Set Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block$8(ctx) {
  let passwordinput;
  let updating_passwordValue;
  let updating_passwordInputValid;
  let current;
  function passwordinput_passwordValue_binding(value) {
    ctx[11](value);
  }
  function passwordinput_passwordInputValid_binding(value) {
    ctx[12](value);
  }
  let passwordinput_props = {
    passwordLabel: "Current Password",
    passwordPlaceholder: "Enter current password"
  };
  if (
    /*currentPasswordValue*/
    ctx[2] !== void 0
  ) {
    passwordinput_props.passwordValue = /*currentPasswordValue*/
    ctx[2];
  }
  if (
    /*currentPasswordValid*/
    ctx[5] !== void 0
  ) {
    passwordinput_props.passwordInputValid = /*currentPasswordValid*/
    ctx[5];
  }
  passwordinput = new PasswordInput({ props: passwordinput_props });
  binding_callbacks.push(() => bind(passwordinput, "passwordValue", passwordinput_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput, "passwordInputValid", passwordinput_passwordInputValid_binding));
  return {
    c() {
      create_component(passwordinput.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordinput, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordinput_changes = {};
      if (!updating_passwordValue && dirty & /*currentPasswordValue*/
      4) {
        updating_passwordValue = true;
        passwordinput_changes.passwordValue = /*currentPasswordValue*/
        ctx2[2];
        add_flush_callback(() => updating_passwordValue = false);
      }
      if (!updating_passwordInputValid && dirty & /*currentPasswordValid*/
      32) {
        updating_passwordInputValid = true;
        passwordinput_changes.passwordInputValid = /*currentPasswordValid*/
        ctx2[5];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput.$set(passwordinput_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordinput.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordinput.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordinput, detaching);
    }
  };
}
function create_fragment$c(ctx) {
  let div3;
  let div1;
  let div0;
  let button0;
  let backicon;
  let t0;
  let h2;
  let t1;
  let div2;
  let button1;
  let t2;
  let button1_disabled_value;
  let t3;
  let form;
  let t4;
  let passwordinput0;
  let updating_passwordValue;
  let updating_passwordInputValid;
  let t5;
  let passwordinput1;
  let updating_passwordValue_1;
  let updating_passwordInputValid_1;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  function select_block_type(ctx2, dirty) {
    if (!/*member*/
    ctx2[1].auth.hasPassword)
      return create_if_block_1$6;
    return create_else_block$3;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*member*/
    ctx[1].auth.hasPassword && create_if_block$8(ctx)
  );
  function passwordinput0_passwordValue_binding(value) {
    ctx[13](value);
  }
  function passwordinput0_passwordInputValid_binding(value) {
    ctx[14](value);
  }
  let passwordinput0_props = {
    passwordLabel: "New Password",
    passwordPlaceholder: "Enter a strong password"
  };
  if (
    /*newPasswordValue*/
    ctx[3] !== void 0
  ) {
    passwordinput0_props.passwordValue = /*newPasswordValue*/
    ctx[3];
  }
  if (
    /*newPasswordValid*/
    ctx[6] !== void 0
  ) {
    passwordinput0_props.passwordInputValid = /*newPasswordValid*/
    ctx[6];
  }
  passwordinput0 = new PasswordInput({ props: passwordinput0_props });
  binding_callbacks.push(() => bind(passwordinput0, "passwordValue", passwordinput0_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput0, "passwordInputValid", passwordinput0_passwordInputValid_binding));
  function passwordinput1_passwordValue_binding(value) {
    ctx[15](value);
  }
  function passwordinput1_passwordInputValid_binding(value) {
    ctx[16](value);
  }
  let passwordinput1_props = {
    passwordLabel: "Confirm New Password",
    passwordPlaceholder: "Enter a strong password"
  };
  if (
    /*confirmPasswordValue*/
    ctx[4] !== void 0
  ) {
    passwordinput1_props.passwordValue = /*confirmPasswordValue*/
    ctx[4];
  }
  if (
    /*confirmPasswordValid*/
    ctx[7] !== void 0
  ) {
    passwordinput1_props.passwordInputValid = /*confirmPasswordValid*/
    ctx[7];
  }
  passwordinput1 = new PasswordInput({ props: passwordinput1_props });
  binding_callbacks.push(() => bind(passwordinput1, "passwordValue", passwordinput1_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput1, "passwordInputValid", passwordinput1_passwordInputValid_binding));
  return {
    c() {
      div3 = element("div");
      div1 = element("div");
      div0 = element("div");
      button0 = element("button");
      create_component(backicon.$$.fragment);
      t0 = space();
      h2 = element("h2");
      if_block0.c();
      t1 = space();
      div2 = element("div");
      button1 = element("button");
      t2 = text("Save");
      t3 = space();
      form = element("form");
      if (if_block1)
        if_block1.c();
      t4 = space();
      create_component(passwordinput0.$$.fragment);
      t5 = space();
      create_component(passwordinput1.$$.fragment);
      attr(div0, "class", "ms-modal__profile-back");
      attr(h2, "class", "ms-modal__title ms-modal__title--profile");
      attr(div1, "class", "ms-modal__title-group");
      attr(button1, "class", "ms-modal__save-button");
      button1.disabled = button1_disabled_value = /*member*/
      ctx[1].auth.hasPassword && !/*currentPasswordValid*/
      ctx[5] || !/*newPasswordValid*/
      ctx[6] || !/*confirmPasswordValid*/
      ctx[7];
      attr(div2, "class", "ms-modal__action-container");
      attr(div3, "class", "ms-modal__title-container");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div1);
      append(div1, div0);
      append(div0, button0);
      mount_component(backicon, button0, null);
      append(div1, t0);
      append(div1, h2);
      if_block0.m(h2, null);
      append(div3, t1);
      append(div3, div2);
      append(div2, button1);
      append(button1, t2);
      insert(target, t3, anchor);
      insert(target, form, anchor);
      if (if_block1)
        if_block1.m(form, null);
      append(form, t4);
      mount_component(passwordinput0, form, null);
      append(form, t5);
      mount_component(passwordinput1, form, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[10]
          ),
          listen(
            button1,
            "click",
            /*submitPasswordChange*/
            ctx[8]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitPasswordChange*/
            ctx[8]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(h2, null);
        }
      }
      if (!current || dirty & /*member, currentPasswordValid, newPasswordValid, confirmPasswordValid*/
      226 && button1_disabled_value !== (button1_disabled_value = /*member*/
      ctx2[1].auth.hasPassword && !/*currentPasswordValid*/
      ctx2[5] || !/*newPasswordValid*/
      ctx2[6] || !/*confirmPasswordValid*/
      ctx2[7])) {
        button1.disabled = button1_disabled_value;
      }
      if (
        /*member*/
        ctx2[1].auth.hasPassword
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*member*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$8(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(form, t4);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      const passwordinput0_changes = {};
      if (!updating_passwordValue && dirty & /*newPasswordValue*/
      8) {
        updating_passwordValue = true;
        passwordinput0_changes.passwordValue = /*newPasswordValue*/
        ctx2[3];
        add_flush_callback(() => updating_passwordValue = false);
      }
      if (!updating_passwordInputValid && dirty & /*newPasswordValid*/
      64) {
        updating_passwordInputValid = true;
        passwordinput0_changes.passwordInputValid = /*newPasswordValid*/
        ctx2[6];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput0.$set(passwordinput0_changes);
      const passwordinput1_changes = {};
      if (!updating_passwordValue_1 && dirty & /*confirmPasswordValue*/
      16) {
        updating_passwordValue_1 = true;
        passwordinput1_changes.passwordValue = /*confirmPasswordValue*/
        ctx2[4];
        add_flush_callback(() => updating_passwordValue_1 = false);
      }
      if (!updating_passwordInputValid_1 && dirty & /*confirmPasswordValid*/
      128) {
        updating_passwordInputValid_1 = true;
        passwordinput1_changes.passwordInputValid = /*confirmPasswordValid*/
        ctx2[7];
        add_flush_callback(() => updating_passwordInputValid_1 = false);
      }
      passwordinput1.$set(passwordinput1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      transition_in(if_block1);
      transition_in(passwordinput0.$$.fragment, local);
      transition_in(passwordinput1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      transition_out(if_block1);
      transition_out(passwordinput0.$$.fragment, local);
      transition_out(passwordinput1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      destroy_component(backicon);
      if_block0.d();
      if (detaching)
        detach(t3);
      if (detaching)
        detach(form);
      if (if_block1)
        if_block1.d();
      destroy_component(passwordinput0);
      destroy_component(passwordinput1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$a($$self, $$props, $$invalidate) {
  let { displayProfile } = $$props;
  let { profileLoader } = $$props;
  let { member } = $$props;
  let currentPasswordValue = "";
  let newPasswordValue = "";
  let confirmPasswordValue = "";
  let currentPasswordValid = false;
  let newPasswordValid = false;
  let confirmPasswordValid = false;
  function submitPasswordChange(e) {
    return __async(this, null, function* () {
      if (member.auth.hasPassword && !currentPasswordValid && !newPasswordValid && !confirmPasswordValid)
        return;
      if (!member.auth.hasPassword && !newPasswordValid && !confirmPasswordValid)
        return;
      $$invalidate(9, profileLoader = true);
      try {
        let message;
        if (member.auth.hasPassword) {
          const { _internalUseOnly: { message: msg } } = yield window.$memberstackDom.updateMemberAuth({
            oldPassword: currentPasswordValue,
            newPassword: newPasswordValue
          });
          message = msg;
        } else {
          const { _internalUseOnly: { message: msg } } = yield window.$memberstackDom.setPassword({ password: newPasswordValue });
          $$invalidate(1, member.auth.hasPassword = true, member);
          message = msg;
        }
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(2, currentPasswordValue = "");
        $$invalidate(3, newPasswordValue = "");
        $$invalidate(4, confirmPasswordValue = "");
        $$invalidate(9, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(9, profileLoader = false);
      }
    });
  }
  const click_handler = () => $$invalidate(0, displayProfile = "security");
  function passwordinput_passwordValue_binding(value) {
    currentPasswordValue = value;
    $$invalidate(2, currentPasswordValue);
  }
  function passwordinput_passwordInputValid_binding(value) {
    currentPasswordValid = value;
    $$invalidate(5, currentPasswordValid);
  }
  function passwordinput0_passwordValue_binding(value) {
    newPasswordValue = value;
    $$invalidate(3, newPasswordValue);
  }
  function passwordinput0_passwordInputValid_binding(value) {
    newPasswordValid = value;
    $$invalidate(6, newPasswordValid);
  }
  function passwordinput1_passwordValue_binding(value) {
    confirmPasswordValue = value;
    $$invalidate(4, confirmPasswordValue);
  }
  function passwordinput1_passwordInputValid_binding(value) {
    confirmPasswordValid = value;
    $$invalidate(7, confirmPasswordValid);
  }
  $$self.$$set = ($$props2) => {
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("profileLoader" in $$props2)
      $$invalidate(9, profileLoader = $$props2.profileLoader);
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
  };
  return [
    displayProfile,
    member,
    currentPasswordValue,
    newPasswordValue,
    confirmPasswordValue,
    currentPasswordValid,
    newPasswordValid,
    confirmPasswordValid,
    submitPasswordChange,
    profileLoader,
    click_handler,
    passwordinput_passwordValue_binding,
    passwordinput_passwordInputValid_binding,
    passwordinput0_passwordValue_binding,
    passwordinput0_passwordInputValid_binding,
    passwordinput1_passwordValue_binding,
    passwordinput1_passwordInputValid_binding
  ];
}
var PasswordInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$a, create_fragment$c, safe_not_equal, {
      displayProfile: 0,
      profileLoader: 9,
      member: 1
    });
  }
};
function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
  const o = +getComputedStyle(node).opacity;
  return {
    delay,
    duration,
    easing,
    css: (t) => `opacity: ${t * o}`
  };
}
function create_fragment$b(ctx) {
  let div;
  let loadingicon;
  let div_transition;
  let current;
  loadingicon = new LoadingIcon({});
  return {
    c() {
      div = element("div");
      create_component(loadingicon.$$.fragment);
      attr(div, "class", "ms__profile__loader");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(loadingicon, div, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(loadingicon.$$.fragment, local);
      add_render_callback(() => {
        if (!current)
          return;
        if (!div_transition)
          div_transition = create_bidirectional_transition(div, fade, {}, true);
        div_transition.run(1);
      });
      current = true;
    },
    o(local) {
      transition_out(loadingicon.$$.fragment, local);
      if (!div_transition)
        div_transition = create_bidirectional_transition(div, fade, {}, false);
      div_transition.run(0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(loadingicon);
      if (detaching && div_transition)
        div_transition.end();
    }
  };
}
var ProfileLoader = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$b, safe_not_equal, {});
  }
};
function create_fragment$a(ctx) {
  let button;
  let switch_instance0;
  let t0;
  let t1;
  let t2;
  let switch_instance1;
  let button_class_value;
  let current;
  let mounted;
  let dispose;
  var switch_value = (
    /*buttonLeftIcon*/
    ctx[2]
  );
  function switch_props(ctx2) {
    return {};
  }
  if (switch_value) {
    switch_instance0 = construct_svelte_component(switch_value, switch_props());
  }
  var switch_value_1 = (
    /*buttonRightIcon*/
    ctx[1]
  );
  function switch_props_1(ctx2) {
    return {};
  }
  if (switch_value_1) {
    switch_instance1 = construct_svelte_component(switch_value_1, switch_props_1());
  }
  return {
    c() {
      button = element("button");
      if (switch_instance0)
        create_component(switch_instance0.$$.fragment);
      t0 = space();
      t1 = text(
        /*buttonText*/
        ctx[0]
      );
      t2 = space();
      if (switch_instance1)
        create_component(switch_instance1.$$.fragment);
      attr(button, "class", button_class_value = "ms-modal__regular-button " + /*$$restProps*/
      (ctx[5].class || ""));
      set_style(
        button,
        "background",
        /*buttonColor*/
        ctx[4]
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (switch_instance0)
        mount_component(switch_instance0, button, null);
      append(button, t0);
      append(button, t1);
      append(button, t2);
      if (switch_instance1)
        mount_component(switch_instance1, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", function() {
          if (is_function(
            /*onClick*/
            ctx[3]
          ))
            ctx[3].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*buttonLeftIcon*/
      4 && switch_value !== (switch_value = /*buttonLeftIcon*/
      ctx[2])) {
        if (switch_instance0) {
          group_outros();
          const old_component = switch_instance0;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance0 = construct_svelte_component(switch_value, switch_props());
          create_component(switch_instance0.$$.fragment);
          transition_in(switch_instance0.$$.fragment, 1);
          mount_component(switch_instance0, button, t0);
        } else {
          switch_instance0 = null;
        }
      }
      if (!current || dirty & /*buttonText*/
      1)
        set_data(
          t1,
          /*buttonText*/
          ctx[0]
        );
      if (dirty & /*buttonRightIcon*/
      2 && switch_value_1 !== (switch_value_1 = /*buttonRightIcon*/
      ctx[1])) {
        if (switch_instance1) {
          group_outros();
          const old_component = switch_instance1;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value_1) {
          switch_instance1 = construct_svelte_component(switch_value_1, switch_props_1());
          create_component(switch_instance1.$$.fragment);
          transition_in(switch_instance1.$$.fragment, 1);
          mount_component(switch_instance1, button, null);
        } else {
          switch_instance1 = null;
        }
      }
      if (!current || dirty & /*$$restProps*/
      32 && button_class_value !== (button_class_value = "ms-modal__regular-button " + /*$$restProps*/
      (ctx[5].class || ""))) {
        attr(button, "class", button_class_value);
      }
      if (!current || dirty & /*buttonColor*/
      16) {
        set_style(
          button,
          "background",
          /*buttonColor*/
          ctx[4]
        );
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance0)
        transition_in(switch_instance0.$$.fragment, local);
      if (switch_instance1)
        transition_in(switch_instance1.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance0)
        transition_out(switch_instance0.$$.fragment, local);
      if (switch_instance1)
        transition_out(switch_instance1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      if (switch_instance0)
        destroy_component(switch_instance0);
      if (switch_instance1)
        destroy_component(switch_instance1);
      mounted = false;
      dispose();
    }
  };
}
function instance$9($$self, $$props, $$invalidate) {
  const omit_props_names = ["buttonText", "buttonRightIcon", "buttonLeftIcon", "onClick"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(6, $app = $$value));
  let { buttonText = "Submit" } = $$props;
  let { buttonRightIcon = null } = $$props;
  let { buttonLeftIcon = null } = $$props;
  let { onClick = () => {
  } } = $$props;
  let buttonColor = "rgb(41, 98, 255)";
  if ($app.branding.colors.lightMode.primaryButton) {
    buttonColor = $app.branding.colors.lightMode.primaryButton;
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("buttonText" in $$new_props)
      $$invalidate(0, buttonText = $$new_props.buttonText);
    if ("buttonRightIcon" in $$new_props)
      $$invalidate(1, buttonRightIcon = $$new_props.buttonRightIcon);
    if ("buttonLeftIcon" in $$new_props)
      $$invalidate(2, buttonLeftIcon = $$new_props.buttonLeftIcon);
    if ("onClick" in $$new_props)
      $$invalidate(3, onClick = $$new_props.onClick);
  };
  return [buttonText, buttonRightIcon, buttonLeftIcon, onClick, buttonColor, $$restProps];
}
var RegularButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$9, create_fragment$a, safe_not_equal, {
      buttonText: 0,
      buttonRightIcon: 1,
      buttonLeftIcon: 2,
      onClick: 3
    });
  }
};
function create_fragment$9(ctx) {
  let button;
  let t;
  let button_class_value;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      t = text(
        /*buttonText*/
        ctx[0]
      );
      attr(button, "class", button_class_value = "ms-modal__text-button " + /*$$restProps*/
      ctx[3].class);
      set_style(
        button,
        "color",
        /*buttonColor*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, t);
      if (!mounted) {
        dispose = listen(button, "click", function() {
          if (is_function(
            /*onClick*/
            ctx[1]
          ))
            ctx[1].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*buttonText*/
      1)
        set_data(
          t,
          /*buttonText*/
          ctx[0]
        );
      if (dirty & /*$$restProps*/
      8 && button_class_value !== (button_class_value = "ms-modal__text-button " + /*$$restProps*/
      ctx[3].class)) {
        attr(button, "class", button_class_value);
      }
      if (dirty & /*buttonColor*/
      4) {
        set_style(
          button,
          "color",
          /*buttonColor*/
          ctx[2]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function instance$8($$self, $$props, $$invalidate) {
  const omit_props_names = ["buttonText", "onClick"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(4, $app = $$value));
  let { buttonText = "Submit" } = $$props;
  let { onClick = () => {
  } } = $$props;
  let buttonColor = "rgb(41, 98, 255)";
  if ($app.branding.colors.lightMode.primaryButton) {
    buttonColor = $app.branding.colors.lightMode.primaryButton;
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("buttonText" in $$new_props)
      $$invalidate(0, buttonText = $$new_props.buttonText);
    if ("onClick" in $$new_props)
      $$invalidate(1, onClick = $$new_props.onClick);
  };
  return [buttonText, onClick, buttonColor, $$restProps];
}
var TextButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$8, create_fragment$9, safe_not_equal, { buttonText: 0, onClick: 1 });
  }
};
function get_each_context$2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list[i];
  child_ctx[10] = i;
  return child_ctx;
}
function create_if_block_2$4(ctx) {
  let div;
  let regularbutton;
  let current;
  regularbutton = new RegularButton({
    props: {
      onClick: (
        /*launchPortal*/
        ctx[3]
      ),
      class: "ms-modal__regular-button--margin-right ms-modal__regular-button--left-icon",
      buttonText: "Manage Subscriptions",
      buttonLeftIcon: LinkOutIcon
    }
  });
  return {
    c() {
      div = element("div");
      create_component(regularbutton.$$.fragment);
      set_style(div, "display", "flex");
      set_style(div, "flex-wrap", "wrap");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(regularbutton, div, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(regularbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(regularbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(regularbutton);
    }
  };
}
function create_if_block_1$5(ctx) {
  let h3;
  let t1;
  let each_1_anchor;
  let current;
  let each_value = (
    /*freePlanConnections*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      h3 = element("h3");
      h3.textContent = "Free Plans";
      t1 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      insert(target, t1, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*removeFreePlan, freePlanConnections, $app*/
      22) {
        each_value = /*freePlanConnections*/
        ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block$2(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(h3);
      if (detaching)
        detach(t1);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_each_block$2(ctx) {
  let div1;
  let div0;
  let b;
  let t0_value = (
    /*$app*/
    ctx[2].plans.find(func).name + ""
  );
  let t0;
  let t1;
  let textbutton;
  let t2;
  let current;
  function func(...args) {
    return (
      /*func*/
      ctx[6](
        /*memberPlan*/
        ctx[8],
        ...args
      )
    );
  }
  function func_1() {
    return (
      /*func_1*/
      ctx[7](
        /*memberPlan*/
        ctx[8]
      )
    );
  }
  textbutton = new TextButton({
    props: { buttonText: "Remove", onClick: func_1 }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      b = element("b");
      t0 = text(t0_value);
      t1 = space();
      create_component(textbutton.$$.fragment);
      t2 = space();
      attr(div1, "class", "ms-modal__card");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, b);
      append(b, t0);
      append(div1, t1);
      mount_component(textbutton, div1, null);
      append(div1, t2);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & /*$app, freePlanConnections*/
      6) && t0_value !== (t0_value = /*$app*/
      ctx[2].plans.find(func).name + ""))
        set_data(t0, t0_value);
      const textbutton_changes = {};
      if (dirty & /*freePlanConnections*/
      2)
        textbutton_changes.onClick = func_1;
      textbutton.$set(textbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(textbutton);
    }
  };
}
function create_if_block$7(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.textContent = "You currently have no plans.";
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment$8(ctx) {
  let div;
  let t1;
  let t2;
  let t3;
  let if_block2_anchor;
  let current;
  let if_block0 = (
    /*member*/
    ctx[0].stripeCustomerId && create_if_block_2$4(ctx)
  );
  let if_block1 = (
    /*freePlanConnections*/
    ctx[1].length > 0 && create_if_block_1$5(ctx)
  );
  let if_block2 = !/*member*/
  ctx[0].stripeCustomerId && /*freePlanConnections*/
  ctx[1].length === 0 && create_if_block$7();
  return {
    c() {
      div = element("div");
      div.innerHTML = `<h2 class="ms-modal__title ms-modal__title--profile">Plans</h2>`;
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      if (if_block2)
        if_block2.c();
      if_block2_anchor = empty();
      attr(div, "class", "ms-modal__title-container");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      insert(target, t1, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t2, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t3, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, if_block2_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*member*/
        ctx2[0].stripeCustomerId
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*member*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_2$4(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t2.parentNode, t2);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*freePlanConnections*/
        ctx2[1].length > 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*freePlanConnections*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1$5(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t3.parentNode, t3);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!/*member*/
      ctx2[0].stripeCustomerId && /*freePlanConnections*/
      ctx2[1].length === 0) {
        if (if_block2)
          ;
        else {
          if_block2 = create_if_block$7();
          if_block2.c();
          if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (detaching)
        detach(t1);
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach(t2);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(t3);
      if (if_block2)
        if_block2.d(detaching);
      if (detaching)
        detach(if_block2_anchor);
    }
  };
}
function instance$7($$self, $$props, $$invalidate) {
  let freePlanConnections;
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(2, $app = $$value));
  let { profileLoader } = $$props;
  let { member } = $$props;
  function launchPortal(e) {
    return __async(this, null, function* () {
      $$invalidate(5, profileLoader = true);
      yield window.$memberstackDom.launchStripeCustomerPortal({ priceIds: [], autoRedirect: true });
    });
  }
  function removeFreePlan(planId) {
    return __async(this, null, function* () {
      $$invalidate(5, profileLoader = true);
      try {
        yield window.$memberstackDom.removePlan({ planId });
        $$invalidate(0, member.planConnections = member.planConnections.filter((plan) => plan.planId !== planId), member);
      } catch (err) {
        console.log(err);
        window.$memberstackDom._showMessage(err.message, true);
      } finally {
        $$invalidate(5, profileLoader = false);
      }
    });
  }
  const func = (memberPlan, plan) => plan.id === memberPlan.planId;
  const func_1 = (memberPlan) => removeFreePlan(memberPlan.planId);
  $$self.$$set = ($$props2) => {
    if ("profileLoader" in $$props2)
      $$invalidate(5, profileLoader = $$props2.profileLoader);
    if ("member" in $$props2)
      $$invalidate(0, member = $$props2.member);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*member*/
    1) {
      $$invalidate(1, freePlanConnections = member.planConnections.filter((plan) => plan.type === "FREE"));
    }
  };
  return [
    member,
    freePlanConnections,
    $app,
    launchPortal,
    removeFreePlan,
    profileLoader,
    func,
    func_1
  ];
}
var PlansInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$7, create_fragment$8, safe_not_equal, { profileLoader: 5, member: 0 });
  }
};
function create_if_block_4$2(ctx) {
  let profileloader;
  let current;
  profileloader = new ProfileLoader({});
  return {
    c() {
      create_component(profileloader.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profileloader, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(profileloader.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileloader.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profileloader, detaching);
    }
  };
}
function create_if_block_3$2(ctx) {
  let plansinfocontent;
  let updating_member;
  let updating_profileLoader;
  let current;
  function plansinfocontent_member_binding(value) {
    ctx[17](value);
  }
  function plansinfocontent_profileLoader_binding(value) {
    ctx[18](value);
  }
  let plansinfocontent_props = {};
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    plansinfocontent_props.member = /*member*/
    ctx[1];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    plansinfocontent_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  plansinfocontent = new PlansInfoContent({ props: plansinfocontent_props });
  binding_callbacks.push(() => bind(plansinfocontent, "member", plansinfocontent_member_binding));
  binding_callbacks.push(() => bind(plansinfocontent, "profileLoader", plansinfocontent_profileLoader_binding));
  return {
    c() {
      create_component(plansinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(plansinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const plansinfocontent_changes = {};
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        plansinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        plansinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      plansinfocontent.$set(plansinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(plansinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(plansinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(plansinfocontent, detaching);
    }
  };
}
function create_if_block_2$3(ctx) {
  let passwordinfocontent;
  let updating_displayProfile;
  let updating_profileLoader;
  let updating_member;
  let current;
  function passwordinfocontent_displayProfile_binding(value) {
    ctx[14](value);
  }
  function passwordinfocontent_profileLoader_binding(value) {
    ctx[15](value);
  }
  function passwordinfocontent_member_binding(value) {
    ctx[16](value);
  }
  let passwordinfocontent_props = {};
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    passwordinfocontent_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    passwordinfocontent_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    passwordinfocontent_props.member = /*member*/
    ctx[1];
  }
  passwordinfocontent = new PasswordInfoContent({ props: passwordinfocontent_props });
  binding_callbacks.push(() => bind(passwordinfocontent, "displayProfile", passwordinfocontent_displayProfile_binding));
  binding_callbacks.push(() => bind(passwordinfocontent, "profileLoader", passwordinfocontent_profileLoader_binding));
  binding_callbacks.push(() => bind(passwordinfocontent, "member", passwordinfocontent_member_binding));
  return {
    c() {
      create_component(passwordinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordinfocontent_changes = {};
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        passwordinfocontent_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        passwordinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        passwordinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      passwordinfocontent.$set(passwordinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordinfocontent, detaching);
    }
  };
}
function create_if_block_1$4(ctx) {
  let securityinfocontent;
  let updating_displayProfile;
  let updating_profileLoader;
  let updating_member;
  let current;
  function securityinfocontent_displayProfile_binding(value) {
    ctx[11](value);
  }
  function securityinfocontent_profileLoader_binding(value) {
    ctx[12](value);
  }
  function securityinfocontent_member_binding(value) {
    ctx[13](value);
  }
  let securityinfocontent_props = {};
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    securityinfocontent_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    securityinfocontent_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    securityinfocontent_props.member = /*member*/
    ctx[1];
  }
  securityinfocontent = new SecurityInfoContent({ props: securityinfocontent_props });
  binding_callbacks.push(() => bind(securityinfocontent, "displayProfile", securityinfocontent_displayProfile_binding));
  binding_callbacks.push(() => bind(securityinfocontent, "profileLoader", securityinfocontent_profileLoader_binding));
  binding_callbacks.push(() => bind(securityinfocontent, "member", securityinfocontent_member_binding));
  return {
    c() {
      create_component(securityinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(securityinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const securityinfocontent_changes = {};
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        securityinfocontent_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        securityinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        securityinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      securityinfocontent.$set(securityinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(securityinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(securityinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(securityinfocontent, detaching);
    }
  };
}
function create_if_block$6(ctx) {
  let profileinfocontent;
  let updating_member;
  let updating_profileLoader;
  let current;
  function profileinfocontent_member_binding(value) {
    ctx[9](value);
  }
  function profileinfocontent_profileLoader_binding(value) {
    ctx[10](value);
  }
  let profileinfocontent_props = {
    customFields: (
      /*$app*/
      ctx[5].customFields
    )
  };
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    profileinfocontent_props.member = /*member*/
    ctx[1];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    profileinfocontent_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  profileinfocontent = new ProfileInfoContent({ props: profileinfocontent_props });
  binding_callbacks.push(() => bind(profileinfocontent, "member", profileinfocontent_member_binding));
  binding_callbacks.push(() => bind(profileinfocontent, "profileLoader", profileinfocontent_profileLoader_binding));
  return {
    c() {
      create_component(profileinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profileinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const profileinfocontent_changes = {};
      if (dirty & /*$app*/
      32)
        profileinfocontent_changes.customFields = /*$app*/
        ctx2[5].customFields;
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        profileinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        profileinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      profileinfocontent.$set(profileinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(profileinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profileinfocontent, detaching);
    }
  };
}
function create_fragment$7(ctx) {
  let div5;
  let div1;
  let div0;
  let t0_value = (
    /*member*/
    ctx[1].auth.email + ""
  );
  let t0;
  let t1;
  let closebutton;
  let t2;
  let div4;
  let div2;
  let profilemodalnav;
  let updating_member;
  let updating_displayProfile;
  let updating_profileLoader;
  let t3;
  let div3;
  let t4;
  let current_block_type_index;
  let if_block1;
  let t5;
  let modalfooter;
  let current;
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[3]
    ) }
  });
  function profilemodalnav_member_binding(value) {
    ctx[6](value);
  }
  function profilemodalnav_displayProfile_binding(value) {
    ctx[7](value);
  }
  function profilemodalnav_profileLoader_binding(value) {
    ctx[8](value);
  }
  let profilemodalnav_props = {
    onSuccessLogout: (
      /*onSuccessLogout*/
      ctx[2]
    ),
    hideProfileSection
  };
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    profilemodalnav_props.member = /*member*/
    ctx[1];
  }
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    profilemodalnav_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    profilemodalnav_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  profilemodalnav = new ProfileModalNav({ props: profilemodalnav_props });
  binding_callbacks.push(() => bind(profilemodalnav, "member", profilemodalnav_member_binding));
  binding_callbacks.push(() => bind(profilemodalnav, "displayProfile", profilemodalnav_displayProfile_binding));
  binding_callbacks.push(() => bind(profilemodalnav, "profileLoader", profilemodalnav_profileLoader_binding));
  let if_block0 = (
    /*profileLoader*/
    ctx[4] && create_if_block_4$2()
  );
  const if_block_creators = [create_if_block$6, create_if_block_1$4, create_if_block_2$3, create_if_block_3$2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*displayProfile*/
      ctx2[0] === "profile"
    )
      return 0;
    if (
      /*displayProfile*/
      ctx2[0] === "security"
    )
      return 1;
    if (
      /*displayProfile*/
      ctx2[0] === "changePassword"
    )
      return 2;
    if (
      /*displayProfile*/
      ctx2[0] === "plans"
    )
      return 3;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  modalfooter = new ModalFooter({});
  return {
    c() {
      div5 = element("div");
      div1 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      create_component(closebutton.$$.fragment);
      t2 = space();
      div4 = element("div");
      div2 = element("div");
      create_component(profilemodalnav.$$.fragment);
      t3 = space();
      div3 = element("div");
      if (if_block0)
        if_block0.c();
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      create_component(modalfooter.$$.fragment);
      attr(div1, "class", "ms-modal__header");
      attr(div2, "class", "ms-modal__content-left");
      attr(div3, "class", "ms-modal__content-right");
      attr(div4, "class", "ms-modal__content ms-modal__content--profile");
      attr(div5, "class", "ms-modal ms-modal--profile");
      attr(div5, "id", "ProfileModal");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div1);
      append(div1, div0);
      append(div0, t0);
      append(div1, t1);
      mount_component(closebutton, div1, null);
      append(div5, t2);
      append(div5, div4);
      append(div4, div2);
      mount_component(profilemodalnav, div2, null);
      append(div4, t3);
      append(div4, div3);
      if (if_block0)
        if_block0.m(div3, null);
      append(div3, t4);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div3, null);
      }
      append(div5, t5);
      mount_component(modalfooter, div5, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & /*member*/
      2) && t0_value !== (t0_value = /*member*/
      ctx2[1].auth.email + ""))
        set_data(t0, t0_value);
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      8)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[3];
      closebutton.$set(closebutton_changes);
      const profilemodalnav_changes = {};
      if (dirty & /*onSuccessLogout*/
      4)
        profilemodalnav_changes.onSuccessLogout = /*onSuccessLogout*/
        ctx2[2];
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        profilemodalnav_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        profilemodalnav_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        profilemodalnav_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      profilemodalnav.$set(profilemodalnav_changes);
      if (
        /*profileLoader*/
        ctx2[4]
      ) {
        if (if_block0) {
          if (dirty & /*profileLoader*/
          16) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_4$2();
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div3, t4);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block1) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block1 = if_blocks[current_block_type_index];
          if (!if_block1) {
            if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block1.c();
          } else {
            if_block1.p(ctx2, dirty);
          }
          transition_in(if_block1, 1);
          if_block1.m(div3, null);
        } else {
          if_block1 = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      transition_in(profilemodalnav.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      transition_out(profilemodalnav.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div5);
      destroy_component(closebutton);
      destroy_component(profilemodalnav);
      if (if_block0)
        if_block0.d();
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      destroy_component(modalfooter);
    }
  };
}
var hideProfileSection = false;
function instance$6($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(5, $app = $$value));
  let { onSuccessLogout } = $$props;
  let { closeModal } = $$props;
  let { displayProfile = "profile" } = $$props;
  let { member } = $$props;
  let profileLoader = false;
  function profilemodalnav_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function profilemodalnav_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function profilemodalnav_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  function profileinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function profileinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  function securityinfocontent_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function securityinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  function securityinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function passwordinfocontent_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function passwordinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  function passwordinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function plansinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function plansinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  $$self.$$set = ($$props2) => {
    if ("onSuccessLogout" in $$props2)
      $$invalidate(2, onSuccessLogout = $$props2.onSuccessLogout);
    if ("closeModal" in $$props2)
      $$invalidate(3, closeModal = $$props2.closeModal);
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
  };
  return [
    displayProfile,
    member,
    onSuccessLogout,
    closeModal,
    profileLoader,
    $app,
    profilemodalnav_member_binding,
    profilemodalnav_displayProfile_binding,
    profilemodalnav_profileLoader_binding,
    profileinfocontent_member_binding,
    profileinfocontent_profileLoader_binding,
    securityinfocontent_displayProfile_binding,
    securityinfocontent_profileLoader_binding,
    securityinfocontent_member_binding,
    passwordinfocontent_displayProfile_binding,
    passwordinfocontent_profileLoader_binding,
    passwordinfocontent_member_binding,
    plansinfocontent_member_binding,
    plansinfocontent_profileLoader_binding
  ];
}
var ProfileModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$6, create_fragment$7, safe_not_equal, {
      onSuccessLogout: 2,
      closeModal: 3,
      displayProfile: 0,
      member: 1
    });
  }
};
function create_fragment$6(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M7.41 1.41L6 0L0 6L6 12L7.41 10.59L2.83 6L7.41 1.41Z");
      attr(svg, "fill", "none");
      attr(svg, "transform", "rotate(180)");
      attr(svg, "viewBox", "0 0 8 12");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ForwardIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$6, safe_not_equal, {});
  }
};
function create_if_block_1$3(ctx) {
  let button;
  let div;
  let profileicon;
  let t0;
  let t1;
  let forwardicon;
  let current;
  let mounted;
  let dispose;
  profileicon = new ProfileIcon({});
  forwardicon = new ForwardIcon({});
  return {
    c() {
      button = element("button");
      div = element("div");
      create_component(profileicon.$$.fragment);
      t0 = text(" Profile");
      t1 = space();
      create_component(forwardicon.$$.fragment);
      attr(button, "class", "ms-modal__profile-option");
      toggle_class(
        button,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "profile"
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, div);
      mount_component(profileicon, div, null);
      append(div, t0);
      append(button, t1);
      mount_component(forwardicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "profile"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(profileicon.$$.fragment, local);
      transition_in(forwardicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileicon.$$.fragment, local);
      transition_out(forwardicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(profileicon);
      destroy_component(forwardicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$5(ctx) {
  let button;
  let div;
  let linkouticon;
  let t0;
  let t1;
  let forwardicon;
  let current;
  let mounted;
  let dispose;
  linkouticon = new LinkOutIcon({});
  forwardicon = new ForwardIcon({});
  return {
    c() {
      button = element("button");
      div = element("div");
      create_component(linkouticon.$$.fragment);
      t0 = text(" Billing Portal");
      t1 = space();
      create_component(forwardicon.$$.fragment);
      attr(button, "class", "ms-modal__profile-option");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, div);
      mount_component(linkouticon, div, null);
      append(div, t0);
      append(button, t1);
      mount_component(forwardicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*launchPortal*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(linkouticon.$$.fragment, local);
      transition_in(forwardicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(linkouticon.$$.fragment, local);
      transition_out(forwardicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(linkouticon);
      destroy_component(forwardicon);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$5(ctx) {
  let div2;
  let t0;
  let button0;
  let div0;
  let securityicon;
  let t1;
  let t2;
  let forwardicon0;
  let t3;
  let t4;
  let button1;
  let div1;
  let logouticon;
  let t5;
  let t6;
  let forwardicon1;
  let current;
  let mounted;
  let dispose;
  let if_block0 = !/*hideProfileSection*/
  ctx[2] && create_if_block_1$3(ctx);
  securityicon = new SecurityIcon({});
  forwardicon0 = new ForwardIcon({});
  let if_block1 = (
    /*member*/
    ctx[1].stripeCustomerId && create_if_block$5(ctx)
  );
  logouticon = new LogoutIcon({});
  forwardicon1 = new ForwardIcon({});
  return {
    c() {
      div2 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      button0 = element("button");
      div0 = element("div");
      create_component(securityicon.$$.fragment);
      t1 = text(" Security");
      t2 = space();
      create_component(forwardicon0.$$.fragment);
      t3 = space();
      if (if_block1)
        if_block1.c();
      t4 = space();
      button1 = element("button");
      div1 = element("div");
      create_component(logouticon.$$.fragment);
      t5 = text(" Logout");
      t6 = space();
      create_component(forwardicon1.$$.fragment);
      attr(button0, "class", "ms-modal__profile-option");
      toggle_class(
        button0,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "security" || /*displayProfile*/
        ctx[0] === "changePassword"
      );
      attr(button1, "class", "ms-modal__profile-option");
      attr(div2, "class", "ms-modal__mobile-profile-nav");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      if (if_block0)
        if_block0.m(div2, null);
      append(div2, t0);
      append(div2, button0);
      append(button0, div0);
      mount_component(securityicon, div0, null);
      append(div0, t1);
      append(button0, t2);
      mount_component(forwardicon0, button0, null);
      append(div2, t3);
      if (if_block1)
        if_block1.m(div2, null);
      append(div2, t4);
      append(div2, button1);
      append(button1, div1);
      mount_component(logouticon, div1, null);
      append(div1, t5);
      append(button1, t6);
      mount_component(forwardicon1, button1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler_1*/
            ctx[8]
          ),
          listen(
            button1,
            "click",
            /*logout*/
            ctx[3]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!/*hideProfileSection*/
      ctx2[2]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*hideProfileSection*/
          4) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$3(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div2, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button0,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "security" || /*displayProfile*/
          ctx2[0] === "changePassword"
        );
      }
      if (
        /*member*/
        ctx2[1].stripeCustomerId
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*member*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$5(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div2, t4);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(securityicon.$$.fragment, local);
      transition_in(forwardicon0.$$.fragment, local);
      transition_in(if_block1);
      transition_in(logouticon.$$.fragment, local);
      transition_in(forwardicon1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(securityicon.$$.fragment, local);
      transition_out(forwardicon0.$$.fragment, local);
      transition_out(if_block1);
      transition_out(logouticon.$$.fragment, local);
      transition_out(forwardicon1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if (if_block0)
        if_block0.d();
      destroy_component(securityicon);
      destroy_component(forwardicon0);
      if (if_block1)
        if_block1.d();
      destroy_component(logouticon);
      destroy_component(forwardicon1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$5($$self, $$props, $$invalidate) {
  let { member } = $$props;
  let { onSuccessLogout } = $$props;
  let { displayProfile } = $$props;
  let { profileLoader } = $$props;
  let { hideProfileSection: hideProfileSection2 } = $$props;
  const unsubscribe = AppStore.subscribe((data) => {
    if (!data.initialValue) {
      const container = document.getElementById("msOverlay");
      const css = document.createElement("style");
      const color = data.branding.colors.lightMode.primaryButton;
      const fullCSS = `.ms-modal__profile-option:hover { color: ${color};} .ms-modal__profile-option--active { color: ${color};} .ms-modal__save-button { background: ${color};} .ms-modal__save-button:disabled { background: ${color};}`;
      css.appendChild(document.createTextNode(fullCSS));
      container.appendChild(css);
    }
  });
  onDestroy(() => {
    unsubscribe();
  });
  function logout(e) {
    return __async(this, null, function* () {
      try {
        const { data, _internalUseOnly: { message } } = yield window.$memberstackDom.logout();
        window.$memberstackDom._showMessage(message, false);
        onSuccessLogout({ type: "LOGOUT", data });
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function launchPortal(e) {
    return __async(this, null, function* () {
      $$invalidate(5, profileLoader = true);
      yield window.$memberstackDom.launchStripeCustomerPortal({ priceIds: [], autoRedirect: true });
    });
  }
  const click_handler = () => $$invalidate(0, displayProfile = "profile");
  const click_handler_1 = () => $$invalidate(0, displayProfile = "security");
  $$self.$$set = ($$props2) => {
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
    if ("onSuccessLogout" in $$props2)
      $$invalidate(6, onSuccessLogout = $$props2.onSuccessLogout);
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("profileLoader" in $$props2)
      $$invalidate(5, profileLoader = $$props2.profileLoader);
    if ("hideProfileSection" in $$props2)
      $$invalidate(2, hideProfileSection2 = $$props2.hideProfileSection);
  };
  return [
    displayProfile,
    member,
    hideProfileSection2,
    logout,
    launchPortal,
    profileLoader,
    onSuccessLogout,
    click_handler,
    click_handler_1
  ];
}
var MobileProfileModalNav = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5, create_fragment$5, safe_not_equal, {
      member: 1,
      onSuccessLogout: 6,
      displayProfile: 0,
      profileLoader: 5,
      hideProfileSection: 2
    });
  }
};
function get_each_context$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[5] = list[i];
  child_ctx[6] = list;
  child_ctx[7] = i;
  return child_ctx;
}
function create_if_block$4(ctx) {
  let div1;
  let div0;
  let label;
  let t0_value = (
    /*customField*/
    ctx[5].label + ""
  );
  let t0;
  let label_for_value;
  let t1;
  let input;
  let input_placeholder_value;
  let input_name_value;
  let t2;
  let mounted;
  let dispose;
  function input_input_handler() {
    ctx[4].call(
      input,
      /*customField*/
      ctx[5]
    );
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      label = element("label");
      t0 = text(t0_value);
      t1 = space();
      input = element("input");
      t2 = space();
      attr(label, "class", "ms-form__label");
      attr(label, "for", label_for_value = /*customField*/
      ctx[5].key);
      attr(input, "class", "ms-form__input");
      attr(input, "type", "text");
      attr(input, "placeholder", input_placeholder_value = /*customField*/
      ctx[5].label);
      attr(input, "name", input_name_value = /*customField*/
      ctx[5].key);
      attr(div0, "class", "ms-form__group");
      attr(div1, "class", "ms-modal__custom-field-container");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, label);
      append(label, t0);
      append(div0, t1);
      append(div0, input);
      set_input_value(
        input,
        /*member*/
        ctx[0].customFields[
          /*customField*/
          ctx[5].key
        ]
      );
      append(div1, t2);
      if (!mounted) {
        dispose = listen(input, "input", input_input_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*customFields*/
      2 && t0_value !== (t0_value = /*customField*/
      ctx[5].label + ""))
        set_data(t0, t0_value);
      if (dirty & /*customFields*/
      2 && label_for_value !== (label_for_value = /*customField*/
      ctx[5].key)) {
        attr(label, "for", label_for_value);
      }
      if (dirty & /*customFields*/
      2 && input_placeholder_value !== (input_placeholder_value = /*customField*/
      ctx[5].label)) {
        attr(input, "placeholder", input_placeholder_value);
      }
      if (dirty & /*customFields*/
      2 && input_name_value !== (input_name_value = /*customField*/
      ctx[5].key)) {
        attr(input, "name", input_name_value);
      }
      if (dirty & /*member, customFields*/
      3 && input.value !== /*member*/
      ctx[0].customFields[
        /*customField*/
        ctx[5].key
      ]) {
        set_input_value(
          input,
          /*member*/
          ctx[0].customFields[
            /*customField*/
            ctx[5].key
          ]
        );
      }
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$1(ctx) {
  let if_block_anchor;
  let if_block = (
    /*customField*/
    ctx[5].hidden !== true && create_if_block$4(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*customField*/
        ctx2[5].hidden !== true
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$4(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment$4(ctx) {
  let form;
  let t0;
  let div;
  let button;
  let mounted;
  let dispose;
  let each_value = (
    /*customFields*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
  }
  return {
    c() {
      form = element("form");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t0 = space();
      div = element("div");
      button = element("button");
      button.textContent = "Save";
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(button, "class", "ms-modal__save-button ms-modal__save-button--large");
      attr(div, "class", "ms-modal__action-container");
    },
    m(target, anchor) {
      insert(target, form, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(form, null);
        }
      }
      insert(target, t0, anchor);
      insert(target, div, anchor);
      append(div, button);
      if (!mounted) {
        dispose = [
          listen(form, "submit", stop_propagation(prevent_default(
            /*saveProfile*/
            ctx[2]
          ))),
          listen(
            button,
            "click",
            /*saveProfile*/
            ctx[2]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*customFields, member*/
      3) {
        each_value = /*customFields*/
        ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$1(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(form, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(form);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$4($$self, $$props, $$invalidate) {
  let { customFields } = $$props;
  let { member } = $$props;
  let { profileLoader } = $$props;
  function saveProfile(e) {
    return __async(this, null, function* () {
      $$invalidate(3, profileLoader = true);
      yield window.$memberstackDom.updateMember({ customFields: member.customFields });
      $$invalidate(3, profileLoader = false);
    });
  }
  function input_input_handler(customField) {
    member.customFields[customField.key] = this.value;
    $$invalidate(0, member);
  }
  $$self.$$set = ($$props2) => {
    if ("customFields" in $$props2)
      $$invalidate(1, customFields = $$props2.customFields);
    if ("member" in $$props2)
      $$invalidate(0, member = $$props2.member);
    if ("profileLoader" in $$props2)
      $$invalidate(3, profileLoader = $$props2.profileLoader);
  };
  return [member, customFields, saveProfile, profileLoader, input_input_handler];
}
var MobileProfileInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$4, create_fragment$4, safe_not_equal, {
      customFields: 1,
      member: 0,
      profileLoader: 3
    });
  }
};
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function create_else_block_1(ctx) {
  let t;
  return {
    c() {
      t = text("Change Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_2$2(ctx) {
  let t;
  return {
    c() {
      t = text("Set Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block$3(ctx) {
  let p;
  let t1;
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_value = (
    /*$app*/
    ctx[4].authProviders
  );
  const get_key = (ctx2) => (
    /*provider*/
    ctx2[16].provider
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
  }
  return {
    c() {
      p = element("p");
      p.textContent = "Connect Additional Accounts";
      t1 = space();
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(p, "class", "ms-form__label");
      attr(div, "class", "ms-modal__social");
    },
    m(target, anchor) {
      insert(target, p, anchor);
      insert(target, t1, anchor);
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*disconnectProvider, $app, member, connectAdditionalProvider*/
      210) {
        each_value = /*$app*/
        ctx2[4].authProviders;
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, destroy_block, create_each_block, null, get_each_context);
      }
    },
    d(detaching) {
      if (detaching)
        detach(p);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
    }
  };
}
function create_else_block$2(ctx) {
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1;
  let t2_value = (
    /*provider*/
    ctx[16].name + ""
  );
  let t2;
  let mounted;
  let dispose;
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[14](
        /*provider*/
        ctx[16]
      )
    );
  }
  return {
    c() {
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text("Connect with ");
      t2 = text(t2_value);
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[16].name);
      attr(button, "class", "ms-modal__social-button");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_2);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      16 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      16 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[16].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      16 && t2_value !== (t2_value = /*provider*/
      ctx[16].name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$2(ctx) {
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1;
  let t2_value = (
    /*provider*/
    ctx[16].name + ""
  );
  let t2;
  let mounted;
  let dispose;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[13](
        /*provider*/
        ctx[16]
      )
    );
  }
  return {
    c() {
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text("Disconnect ");
      t2 = text(t2_value);
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[16].name);
      attr(button, "class", "ms-modal__social-button");
      set_style(button, "background-color", "#F6F6F6");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      16 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      16 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[16].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      16 && t2_value !== (t2_value = /*provider*/
      ctx[16].name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block(key_1, ctx) {
  let div;
  let show_if;
  let t;
  function func(...args) {
    return (
      /*func*/
      ctx[9](
        /*provider*/
        ctx[16],
        ...args
      )
    );
  }
  function select_block_type_1(ctx2, dirty) {
    if (dirty & /*member, $app*/
    18)
      show_if = null;
    if (show_if == null)
      show_if = !!/*member*/
      ctx2[1].auth.providers.some(func);
    if (show_if)
      return create_if_block_1$2;
    return create_else_block$2;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    key: key_1,
    first: null,
    c() {
      div = element("div");
      if_block.c();
      t = space();
      attr(div, "class", "ms-modal__social-buttons");
      this.first = div;
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_block.m(div, null);
      append(div, t);
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
        if_block.p(ctx, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx);
        if (if_block) {
          if_block.c();
          if_block.m(div, t);
        }
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_block.d();
    }
  };
}
function create_fragment$3(ctx) {
  let form;
  let emailinput;
  let updating_emailInputValid;
  let updating_emailValue;
  let t0;
  let div0;
  let label;
  let t2;
  let button0;
  let passwordlockicon;
  let t3;
  let t4;
  let t5;
  let div1;
  let button1;
  let t6;
  let button1_disabled_value;
  let current;
  let mounted;
  let dispose;
  function emailinput_emailInputValid_binding(value) {
    ctx[10](value);
  }
  function emailinput_emailValue_binding(value) {
    ctx[11](value);
  }
  let emailinput_props = {};
  if (
    /*emailInputValid*/
    ctx[3] !== void 0
  ) {
    emailinput_props.emailInputValid = /*emailInputValid*/
    ctx[3];
  }
  if (
    /*emailValue*/
    ctx[2] !== void 0
  ) {
    emailinput_props.emailValue = /*emailValue*/
    ctx[2];
  }
  emailinput = new EmailInput({ props: emailinput_props });
  binding_callbacks.push(() => bind(emailinput, "emailInputValid", emailinput_emailInputValid_binding));
  binding_callbacks.push(() => bind(emailinput, "emailValue", emailinput_emailValue_binding));
  passwordlockicon = new PasswordLockIcon({});
  function select_block_type(ctx2, dirty) {
    if (!/*member*/
    ctx2[1].auth.hasPassword)
      return create_if_block_2$2;
    return create_else_block_1;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*$app*/
    ctx[4].authProviders.length > 0 && create_if_block$3(ctx)
  );
  return {
    c() {
      form = element("form");
      create_component(emailinput.$$.fragment);
      t0 = space();
      div0 = element("div");
      label = element("label");
      label.textContent = "Password";
      t2 = space();
      button0 = element("button");
      create_component(passwordlockicon.$$.fragment);
      t3 = space();
      if_block0.c();
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      div1 = element("div");
      button1 = element("button");
      t6 = text("Save");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(label, "class", "ms-form__label");
      attr(label, "for", "setPassword");
      attr(button0, "class", "ms-modal__outline-button ms-modal__outline-button--mobile");
      attr(button0, "name", "setPassword");
      attr(div0, "class", "ms-form__group");
      attr(button1, "class", "ms-modal__save-button ms-modal__save-button--large");
      button1.disabled = button1_disabled_value = !/*emailInputValid*/
      ctx[3];
      attr(div1, "class", "ms-modal__action-container");
    },
    m(target, anchor) {
      insert(target, form, anchor);
      mount_component(emailinput, form, null);
      insert(target, t0, anchor);
      insert(target, div0, anchor);
      append(div0, label);
      append(div0, t2);
      append(div0, button0);
      mount_component(passwordlockicon, button0, null);
      append(button0, t3);
      if_block0.m(button0, null);
      insert(target, t4, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t5, anchor);
      insert(target, div1, anchor);
      append(div1, button1);
      append(button1, t6);
      current = true;
      if (!mounted) {
        dispose = [
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitEmailChange*/
            ctx[5]
          ))),
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[12]
          ),
          listen(
            button1,
            "click",
            /*submitEmailChange*/
            ctx[5]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const emailinput_changes = {};
      if (!updating_emailInputValid && dirty & /*emailInputValid*/
      8) {
        updating_emailInputValid = true;
        emailinput_changes.emailInputValid = /*emailInputValid*/
        ctx2[3];
        add_flush_callback(() => updating_emailInputValid = false);
      }
      if (!updating_emailValue && dirty & /*emailValue*/
      4) {
        updating_emailValue = true;
        emailinput_changes.emailValue = /*emailValue*/
        ctx2[2];
        add_flush_callback(() => updating_emailValue = false);
      }
      emailinput.$set(emailinput_changes);
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(button0, null);
        }
      }
      if (
        /*$app*/
        ctx2[4].authProviders.length > 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$3(ctx2);
          if_block1.c();
          if_block1.m(t5.parentNode, t5);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty & /*emailInputValid*/
      8 && button1_disabled_value !== (button1_disabled_value = !/*emailInputValid*/
      ctx2[3])) {
        button1.disabled = button1_disabled_value;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(emailinput.$$.fragment, local);
      transition_in(passwordlockicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(emailinput.$$.fragment, local);
      transition_out(passwordlockicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(form);
      destroy_component(emailinput);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div0);
      destroy_component(passwordlockicon);
      if_block0.d();
      if (detaching)
        detach(t4);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(t5);
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$3($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(4, $app = $$value));
  let { displayProfile } = $$props;
  let { member } = $$props;
  let { emailValue } = $$props;
  let { profileLoader } = $$props;
  $app.authProviders.sort((a, b) => {
    if (isConnected(a) === isConnected(b)) {
      return a.order - b.order;
    }
    return isConnected(a) ? -1 : 1;
  });
  let emailInputValid = false;
  function submitEmailChange(e) {
    return __async(this, null, function* () {
      if (!emailInputValid || !emailValue)
        return;
      $$invalidate(8, profileLoader = true);
      try {
        const { _internalUseOnly: { message } } = yield window.$memberstackDom.updateMemberAuth({ email: emailValue });
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(8, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function disconnectProvider(provider) {
    return __async(this, null, function* () {
      $$invalidate(8, profileLoader = true);
      try {
        const { data, _internalUseOnly: { message } } = yield window.$memberstackDom.disconnectProvider({ provider });
        $$invalidate(1, member = __spreadProps(__spreadValues({}, member), {
          auth: __spreadProps(__spreadValues({}, member.auth), {
            providers: data.providers
          })
        }));
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(8, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function connectAdditionalProvider(provider) {
    return __async(this, null, function* () {
      console.log("connect", provider);
      try {
        const { data } = yield window.$memberstackDom.connectProvider({ provider });
        $$invalidate(1, member = __spreadProps(__spreadValues({}, member), {
          auth: __spreadProps(__spreadValues({}, member.auth), {
            providers: data.providers
          })
        }));
        window.$memberstackDom._showMessage(data.message, false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function isConnected(provider) {
    return member.auth.providers.some((prv) => prv.provider === provider.provider);
  }
  const func = (provider, prv) => prv.provider === provider.provider;
  function emailinput_emailInputValid_binding(value) {
    emailInputValid = value;
    $$invalidate(3, emailInputValid);
  }
  function emailinput_emailValue_binding(value) {
    emailValue = value;
    $$invalidate(2, emailValue);
  }
  const click_handler = () => $$invalidate(0, displayProfile = "changePassword");
  const click_handler_1 = (provider) => disconnectProvider(provider.provider);
  const click_handler_2 = (provider) => connectAdditionalProvider(provider.provider);
  $$self.$$set = ($$props2) => {
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
    if ("emailValue" in $$props2)
      $$invalidate(2, emailValue = $$props2.emailValue);
    if ("profileLoader" in $$props2)
      $$invalidate(8, profileLoader = $$props2.profileLoader);
  };
  return [
    displayProfile,
    member,
    emailValue,
    emailInputValid,
    $app,
    submitEmailChange,
    disconnectProvider,
    connectAdditionalProvider,
    profileLoader,
    func,
    emailinput_emailInputValid_binding,
    emailinput_emailValue_binding,
    click_handler,
    click_handler_1,
    click_handler_2
  ];
}
var MobileSecurityInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$3, create_fragment$3, safe_not_equal, {
      displayProfile: 0,
      member: 1,
      emailValue: 2,
      profileLoader: 8
    });
  }
};
function create_if_block$2(ctx) {
  let passwordinput;
  let updating_passwordValue;
  let updating_passwordInputValid;
  let current;
  function passwordinput_passwordValue_binding(value) {
    ctx[9](value);
  }
  function passwordinput_passwordInputValid_binding(value) {
    ctx[10](value);
  }
  let passwordinput_props = {
    passwordLabel: "Current Password",
    passwordPlaceholder: "Enter a strong password"
  };
  if (
    /*currentPasswordValue*/
    ctx[1] !== void 0
  ) {
    passwordinput_props.passwordValue = /*currentPasswordValue*/
    ctx[1];
  }
  if (
    /*currentPasswordValid*/
    ctx[4] !== void 0
  ) {
    passwordinput_props.passwordInputValid = /*currentPasswordValid*/
    ctx[4];
  }
  passwordinput = new PasswordInput({ props: passwordinput_props });
  binding_callbacks.push(() => bind(passwordinput, "passwordValue", passwordinput_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput, "passwordInputValid", passwordinput_passwordInputValid_binding));
  return {
    c() {
      create_component(passwordinput.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordinput, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordinput_changes = {};
      if (!updating_passwordValue && dirty & /*currentPasswordValue*/
      2) {
        updating_passwordValue = true;
        passwordinput_changes.passwordValue = /*currentPasswordValue*/
        ctx2[1];
        add_flush_callback(() => updating_passwordValue = false);
      }
      if (!updating_passwordInputValid && dirty & /*currentPasswordValid*/
      16) {
        updating_passwordInputValid = true;
        passwordinput_changes.passwordInputValid = /*currentPasswordValid*/
        ctx2[4];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput.$set(passwordinput_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordinput.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordinput.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordinput, detaching);
    }
  };
}
function create_fragment$2(ctx) {
  let form;
  let t0;
  let passwordinput0;
  let updating_passwordValue;
  let updating_passwordInputValid;
  let t1;
  let passwordinput1;
  let updating_passwordValue_1;
  let updating_passwordInputValid_1;
  let t2;
  let div;
  let button;
  let t3;
  let button_disabled_value;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*member*/
    ctx[0].auth.hasPassword && create_if_block$2(ctx)
  );
  function passwordinput0_passwordValue_binding(value) {
    ctx[11](value);
  }
  function passwordinput0_passwordInputValid_binding(value) {
    ctx[12](value);
  }
  let passwordinput0_props = {
    passwordLabel: "New Password",
    passwordPlaceholder: "Enter a strong password"
  };
  if (
    /*newPasswordValue*/
    ctx[2] !== void 0
  ) {
    passwordinput0_props.passwordValue = /*newPasswordValue*/
    ctx[2];
  }
  if (
    /*newPasswordValid*/
    ctx[5] !== void 0
  ) {
    passwordinput0_props.passwordInputValid = /*newPasswordValid*/
    ctx[5];
  }
  passwordinput0 = new PasswordInput({ props: passwordinput0_props });
  binding_callbacks.push(() => bind(passwordinput0, "passwordValue", passwordinput0_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput0, "passwordInputValid", passwordinput0_passwordInputValid_binding));
  function passwordinput1_passwordValue_binding(value) {
    ctx[13](value);
  }
  function passwordinput1_passwordInputValid_binding(value) {
    ctx[14](value);
  }
  let passwordinput1_props = {
    passwordLabel: "Confirm New Password",
    passwordPlaceholder: "Enter a strong password"
  };
  if (
    /*confirmPasswordValue*/
    ctx[3] !== void 0
  ) {
    passwordinput1_props.passwordValue = /*confirmPasswordValue*/
    ctx[3];
  }
  if (
    /*confirmPasswordValid*/
    ctx[6] !== void 0
  ) {
    passwordinput1_props.passwordInputValid = /*confirmPasswordValid*/
    ctx[6];
  }
  passwordinput1 = new PasswordInput({ props: passwordinput1_props });
  binding_callbacks.push(() => bind(passwordinput1, "passwordValue", passwordinput1_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput1, "passwordInputValid", passwordinput1_passwordInputValid_binding));
  return {
    c() {
      form = element("form");
      if (if_block)
        if_block.c();
      t0 = space();
      create_component(passwordinput0.$$.fragment);
      t1 = space();
      create_component(passwordinput1.$$.fragment);
      t2 = space();
      div = element("div");
      button = element("button");
      t3 = text("Save");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(button, "class", "ms-modal__save-button ms-modal__save-button--large");
      button.disabled = button_disabled_value = /*member*/
      ctx[0].auth.hasPassword && !/*currentPasswordValid*/
      ctx[4] || !/*newPasswordValid*/
      ctx[5] || !/*confirmPasswordValid*/
      ctx[6];
      attr(div, "class", "ms-modal__action-container");
    },
    m(target, anchor) {
      insert(target, form, anchor);
      if (if_block)
        if_block.m(form, null);
      append(form, t0);
      mount_component(passwordinput0, form, null);
      append(form, t1);
      mount_component(passwordinput1, form, null);
      insert(target, t2, anchor);
      insert(target, div, anchor);
      append(div, button);
      append(button, t3);
      current = true;
      if (!mounted) {
        dispose = [
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitPasswordChange*/
            ctx[7]
          ))),
          listen(
            button,
            "click",
            /*submitPasswordChange*/
            ctx[7]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*member*/
        ctx2[0].auth.hasPassword
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*member*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(form, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const passwordinput0_changes = {};
      if (!updating_passwordValue && dirty & /*newPasswordValue*/
      4) {
        updating_passwordValue = true;
        passwordinput0_changes.passwordValue = /*newPasswordValue*/
        ctx2[2];
        add_flush_callback(() => updating_passwordValue = false);
      }
      if (!updating_passwordInputValid && dirty & /*newPasswordValid*/
      32) {
        updating_passwordInputValid = true;
        passwordinput0_changes.passwordInputValid = /*newPasswordValid*/
        ctx2[5];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput0.$set(passwordinput0_changes);
      const passwordinput1_changes = {};
      if (!updating_passwordValue_1 && dirty & /*confirmPasswordValue*/
      8) {
        updating_passwordValue_1 = true;
        passwordinput1_changes.passwordValue = /*confirmPasswordValue*/
        ctx2[3];
        add_flush_callback(() => updating_passwordValue_1 = false);
      }
      if (!updating_passwordInputValid_1 && dirty & /*confirmPasswordValid*/
      64) {
        updating_passwordInputValid_1 = true;
        passwordinput1_changes.passwordInputValid = /*confirmPasswordValid*/
        ctx2[6];
        add_flush_callback(() => updating_passwordInputValid_1 = false);
      }
      passwordinput1.$set(passwordinput1_changes);
      if (!current || dirty & /*member, currentPasswordValid, newPasswordValid, confirmPasswordValid*/
      113 && button_disabled_value !== (button_disabled_value = /*member*/
      ctx2[0].auth.hasPassword && !/*currentPasswordValid*/
      ctx2[4] || !/*newPasswordValid*/
      ctx2[5] || !/*confirmPasswordValid*/
      ctx2[6])) {
        button.disabled = button_disabled_value;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(passwordinput0.$$.fragment, local);
      transition_in(passwordinput1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(passwordinput0.$$.fragment, local);
      transition_out(passwordinput1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(form);
      if (if_block)
        if_block.d();
      destroy_component(passwordinput0);
      destroy_component(passwordinput1);
      if (detaching)
        detach(t2);
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$2($$self, $$props, $$invalidate) {
  let { profileLoader } = $$props;
  let { member } = $$props;
  let currentPasswordValue = "";
  let newPasswordValue = "";
  let confirmPasswordValue = "";
  let currentPasswordValid = false;
  let newPasswordValid = false;
  let confirmPasswordValid = false;
  function submitPasswordChange(e) {
    return __async(this, null, function* () {
      if (member.auth.hasPassword && !currentPasswordValid && !newPasswordValid && !confirmPasswordValid)
        return;
      if (!member.auth.hasPassword && !newPasswordValid && !confirmPasswordValid)
        return;
      $$invalidate(8, profileLoader = true);
      try {
        let message;
        if (member.auth.hasPassword) {
          const { _internalUseOnly: { message: msg } } = yield window.$memberstackDom.updateMemberAuth({
            oldPassword: currentPasswordValue,
            newPassword: newPasswordValue
          });
          message = msg;
        } else {
          const { _internalUseOnly: { message: msg } } = yield window.$memberstackDom.setPassword({ password: newPasswordValue });
          $$invalidate(0, member.auth.hasPassword = true, member);
          message = msg;
        }
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(1, currentPasswordValue = "");
        $$invalidate(2, newPasswordValue = "");
        $$invalidate(3, confirmPasswordValue = "");
        $$invalidate(8, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function passwordinput_passwordValue_binding(value) {
    currentPasswordValue = value;
    $$invalidate(1, currentPasswordValue);
  }
  function passwordinput_passwordInputValid_binding(value) {
    currentPasswordValid = value;
    $$invalidate(4, currentPasswordValid);
  }
  function passwordinput0_passwordValue_binding(value) {
    newPasswordValue = value;
    $$invalidate(2, newPasswordValue);
  }
  function passwordinput0_passwordInputValid_binding(value) {
    newPasswordValid = value;
    $$invalidate(5, newPasswordValid);
  }
  function passwordinput1_passwordValue_binding(value) {
    confirmPasswordValue = value;
    $$invalidate(3, confirmPasswordValue);
  }
  function passwordinput1_passwordInputValid_binding(value) {
    confirmPasswordValid = value;
    $$invalidate(6, confirmPasswordValid);
  }
  $$self.$$set = ($$props2) => {
    if ("profileLoader" in $$props2)
      $$invalidate(8, profileLoader = $$props2.profileLoader);
    if ("member" in $$props2)
      $$invalidate(0, member = $$props2.member);
  };
  return [
    member,
    currentPasswordValue,
    newPasswordValue,
    confirmPasswordValue,
    currentPasswordValid,
    newPasswordValid,
    confirmPasswordValid,
    submitPasswordChange,
    profileLoader,
    passwordinput_passwordValue_binding,
    passwordinput_passwordInputValid_binding,
    passwordinput0_passwordValue_binding,
    passwordinput0_passwordInputValid_binding,
    passwordinput1_passwordValue_binding,
    passwordinput1_passwordInputValid_binding
  ];
}
var MobilePasswordInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$2, create_fragment$2, safe_not_equal, { profileLoader: 8, member: 0 });
  }
};
function create_if_block_6$1(ctx) {
  let div;
  let button;
  let backicon;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  return {
    c() {
      div = element("div");
      button = element("button");
      create_component(backicon.$$.fragment);
      attr(div, "class", "ms-modal__profile-back--mobile");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      mount_component(backicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[8]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(backicon);
      mounted = false;
      dispose();
    }
  };
}
function create_else_block$1(ctx) {
  let memberstackicon;
  let current;
  memberstackicon = new MemberstackIcon({});
  return {
    c() {
      create_component(memberstackicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(memberstackicon, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(memberstackicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(memberstackicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(memberstackicon, detaching);
    }
  };
}
function create_if_block_5$1(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*$app*/
      ctx[7].branding.logo))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*$app*/
      ctx[7].name);
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$app*/
      128 && !src_url_equal(img.src, img_src_value = /*$app*/
      ctx2[7].branding.logo)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      128 && img_alt_value !== (img_alt_value = /*$app*/
      ctx2[7].name)) {
        attr(img, "alt", img_alt_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(img);
    }
  };
}
function create_if_block_4$1(ctx) {
  let profileloader;
  let current;
  profileloader = new ProfileLoader({});
  return {
    c() {
      create_component(profileloader.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profileloader, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(profileloader.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileloader.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profileloader, detaching);
    }
  };
}
function create_if_block_3$1(ctx) {
  let mobilepasswordinfocontent;
  let updating_displayProfile;
  let updating_profileLoader;
  let updating_member;
  let current;
  function mobilepasswordinfocontent_displayProfile_binding(value) {
    ctx[17](value);
  }
  function mobilepasswordinfocontent_profileLoader_binding(value) {
    ctx[18](value);
  }
  function mobilepasswordinfocontent_member_binding(value) {
    ctx[19](value);
  }
  let mobilepasswordinfocontent_props = {};
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    mobilepasswordinfocontent_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[6] !== void 0
  ) {
    mobilepasswordinfocontent_props.profileLoader = /*profileLoader*/
    ctx[6];
  }
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    mobilepasswordinfocontent_props.member = /*member*/
    ctx[1];
  }
  mobilepasswordinfocontent = new MobilePasswordInfoContent({ props: mobilepasswordinfocontent_props });
  binding_callbacks.push(() => bind(mobilepasswordinfocontent, "displayProfile", mobilepasswordinfocontent_displayProfile_binding));
  binding_callbacks.push(() => bind(mobilepasswordinfocontent, "profileLoader", mobilepasswordinfocontent_profileLoader_binding));
  binding_callbacks.push(() => bind(mobilepasswordinfocontent, "member", mobilepasswordinfocontent_member_binding));
  return {
    c() {
      create_component(mobilepasswordinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mobilepasswordinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mobilepasswordinfocontent_changes = {};
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        mobilepasswordinfocontent_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      64) {
        updating_profileLoader = true;
        mobilepasswordinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[6];
        add_flush_callback(() => updating_profileLoader = false);
      }
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        mobilepasswordinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      mobilepasswordinfocontent.$set(mobilepasswordinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mobilepasswordinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mobilepasswordinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mobilepasswordinfocontent, detaching);
    }
  };
}
function create_if_block_2$1(ctx) {
  let mobilesecurityinfocontent;
  let updating_displayProfile;
  let updating_profileLoader;
  let updating_member;
  let current;
  function mobilesecurityinfocontent_displayProfile_binding(value) {
    ctx[14](value);
  }
  function mobilesecurityinfocontent_profileLoader_binding(value) {
    ctx[15](value);
  }
  function mobilesecurityinfocontent_member_binding(value) {
    ctx[16](value);
  }
  let mobilesecurityinfocontent_props = {};
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    mobilesecurityinfocontent_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[6] !== void 0
  ) {
    mobilesecurityinfocontent_props.profileLoader = /*profileLoader*/
    ctx[6];
  }
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    mobilesecurityinfocontent_props.member = /*member*/
    ctx[1];
  }
  mobilesecurityinfocontent = new MobileSecurityInfoContent({ props: mobilesecurityinfocontent_props });
  binding_callbacks.push(() => bind(mobilesecurityinfocontent, "displayProfile", mobilesecurityinfocontent_displayProfile_binding));
  binding_callbacks.push(() => bind(mobilesecurityinfocontent, "profileLoader", mobilesecurityinfocontent_profileLoader_binding));
  binding_callbacks.push(() => bind(mobilesecurityinfocontent, "member", mobilesecurityinfocontent_member_binding));
  return {
    c() {
      create_component(mobilesecurityinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mobilesecurityinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mobilesecurityinfocontent_changes = {};
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        mobilesecurityinfocontent_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      64) {
        updating_profileLoader = true;
        mobilesecurityinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[6];
        add_flush_callback(() => updating_profileLoader = false);
      }
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        mobilesecurityinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      mobilesecurityinfocontent.$set(mobilesecurityinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mobilesecurityinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mobilesecurityinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mobilesecurityinfocontent, detaching);
    }
  };
}
function create_if_block_1$1(ctx) {
  let mobileprofileinfocontent;
  let updating_member;
  let updating_profileLoader;
  let current;
  function mobileprofileinfocontent_member_binding(value) {
    ctx[12](value);
  }
  function mobileprofileinfocontent_profileLoader_binding(value) {
    ctx[13](value);
  }
  let mobileprofileinfocontent_props = {
    customFields: (
      /*$app*/
      ctx[7].customFields
    )
  };
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    mobileprofileinfocontent_props.member = /*member*/
    ctx[1];
  }
  if (
    /*profileLoader*/
    ctx[6] !== void 0
  ) {
    mobileprofileinfocontent_props.profileLoader = /*profileLoader*/
    ctx[6];
  }
  mobileprofileinfocontent = new MobileProfileInfoContent({ props: mobileprofileinfocontent_props });
  binding_callbacks.push(() => bind(mobileprofileinfocontent, "member", mobileprofileinfocontent_member_binding));
  binding_callbacks.push(() => bind(mobileprofileinfocontent, "profileLoader", mobileprofileinfocontent_profileLoader_binding));
  return {
    c() {
      create_component(mobileprofileinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mobileprofileinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mobileprofileinfocontent_changes = {};
      if (dirty & /*$app*/
      128)
        mobileprofileinfocontent_changes.customFields = /*$app*/
        ctx2[7].customFields;
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        mobileprofileinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      64) {
        updating_profileLoader = true;
        mobileprofileinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[6];
        add_flush_callback(() => updating_profileLoader = false);
      }
      mobileprofileinfocontent.$set(mobileprofileinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mobileprofileinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mobileprofileinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mobileprofileinfocontent, detaching);
    }
  };
}
function create_if_block$1(ctx) {
  let mobileprofilemodalnav;
  let updating_member;
  let updating_displayProfile;
  let updating_profileLoader;
  let current;
  function mobileprofilemodalnav_member_binding(value) {
    ctx[9](value);
  }
  function mobileprofilemodalnav_displayProfile_binding(value) {
    ctx[10](value);
  }
  function mobileprofilemodalnav_profileLoader_binding(value) {
    ctx[11](value);
  }
  let mobileprofilemodalnav_props = {
    onSuccessLogout: (
      /*onSuccessLogout*/
      ctx[3]
    ),
    hideProfileSection: (
      /*hideProfileSection*/
      ctx[5]
    )
  };
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    mobileprofilemodalnav_props.member = /*member*/
    ctx[1];
  }
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    mobileprofilemodalnav_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[6] !== void 0
  ) {
    mobileprofilemodalnav_props.profileLoader = /*profileLoader*/
    ctx[6];
  }
  mobileprofilemodalnav = new MobileProfileModalNav({ props: mobileprofilemodalnav_props });
  binding_callbacks.push(() => bind(mobileprofilemodalnav, "member", mobileprofilemodalnav_member_binding));
  binding_callbacks.push(() => bind(mobileprofilemodalnav, "displayProfile", mobileprofilemodalnav_displayProfile_binding));
  binding_callbacks.push(() => bind(mobileprofilemodalnav, "profileLoader", mobileprofilemodalnav_profileLoader_binding));
  return {
    c() {
      create_component(mobileprofilemodalnav.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mobileprofilemodalnav, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mobileprofilemodalnav_changes = {};
      if (dirty & /*onSuccessLogout*/
      8)
        mobileprofilemodalnav_changes.onSuccessLogout = /*onSuccessLogout*/
        ctx2[3];
      if (dirty & /*hideProfileSection*/
      32)
        mobileprofilemodalnav_changes.hideProfileSection = /*hideProfileSection*/
        ctx2[5];
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        mobileprofilemodalnav_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        mobileprofilemodalnav_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      64) {
        updating_profileLoader = true;
        mobileprofilemodalnav_changes.profileLoader = /*profileLoader*/
        ctx2[6];
        add_flush_callback(() => updating_profileLoader = false);
      }
      mobileprofilemodalnav.$set(mobileprofilemodalnav_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mobileprofilemodalnav.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mobileprofilemodalnav.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mobileprofilemodalnav, detaching);
    }
  };
}
function create_fragment$1(ctx) {
  let div5;
  let div2;
  let t0;
  let div1;
  let figure;
  let current_block_type_index;
  let if_block1;
  let t1;
  let div0;
  let b;
  let t2;
  let t3;
  let closebutton;
  let t4;
  let div4;
  let div3;
  let t5;
  let current_block_type_index_1;
  let if_block3;
  let t6;
  let modalfooter;
  let current;
  let if_block0 = (
    /*displayProfile*/
    (ctx[0] === "profile" || /*displayProfile*/
    ctx[0] === "changePassword" || /*displayProfile*/
    ctx[0] === "security") && create_if_block_6$1(ctx)
  );
  const if_block_creators = [create_if_block_5$1, create_else_block$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$app*/
      ctx2[7].branding.logo
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[4]
    ) }
  });
  let if_block2 = (
    /*profileLoader*/
    ctx[6] && create_if_block_4$1()
  );
  const if_block_creators_1 = [create_if_block$1, create_if_block_1$1, create_if_block_2$1, create_if_block_3$1];
  const if_blocks_1 = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*displayProfile*/
      ctx2[0] === "profile-nav"
    )
      return 0;
    if (
      /*displayProfile*/
      ctx2[0] === "profile"
    )
      return 1;
    if (
      /*displayProfile*/
      ctx2[0] === "security"
    )
      return 2;
    if (
      /*displayProfile*/
      ctx2[0] === "changePassword"
    )
      return 3;
    return -1;
  }
  if (~(current_block_type_index_1 = select_block_type_1(ctx))) {
    if_block3 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
  }
  modalfooter = new ModalFooter({});
  return {
    c() {
      div5 = element("div");
      div2 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div1 = element("div");
      figure = element("figure");
      if_block1.c();
      t1 = space();
      div0 = element("div");
      b = element("b");
      t2 = text(
        /*profileTitle*/
        ctx[2]
      );
      t3 = space();
      create_component(closebutton.$$.fragment);
      t4 = space();
      div4 = element("div");
      div3 = element("div");
      if (if_block2)
        if_block2.c();
      t5 = space();
      if (if_block3)
        if_block3.c();
      t6 = space();
      create_component(modalfooter.$$.fragment);
      attr(figure, "class", "ms-modal__figure ms-modal__figure--mobile");
      attr(div1, "class", "ms-modal__header--center");
      attr(div2, "class", "ms-modal__header--mobile");
      attr(div3, "class", "ms-modal__content--mobile");
      attr(div4, "class", "ms-modal__content ms-modal__content--profile");
      attr(div5, "class", "ms-modal ms-modal--profile");
      attr(div5, "id", "MobileProfileModal");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div2);
      if (if_block0)
        if_block0.m(div2, null);
      append(div2, t0);
      append(div2, div1);
      append(div1, figure);
      if_blocks[current_block_type_index].m(figure, null);
      append(div1, t1);
      append(div1, div0);
      append(div0, b);
      append(b, t2);
      append(div2, t3);
      mount_component(closebutton, div2, null);
      append(div5, t4);
      append(div5, div4);
      append(div4, div3);
      if (if_block2)
        if_block2.m(div3, null);
      append(div3, t5);
      if (~current_block_type_index_1) {
        if_blocks_1[current_block_type_index_1].m(div3, null);
      }
      append(div5, t6);
      mount_component(modalfooter, div5, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*displayProfile*/
        ctx2[0] === "profile" || /*displayProfile*/
        ctx2[0] === "changePassword" || /*displayProfile*/
        ctx2[0] === "security"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*displayProfile*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_6$1(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div2, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(figure, null);
      }
      if (!current || dirty & /*profileTitle*/
      4)
        set_data(
          t2,
          /*profileTitle*/
          ctx2[2]
        );
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      16)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[4];
      closebutton.$set(closebutton_changes);
      if (
        /*profileLoader*/
        ctx2[6]
      ) {
        if (if_block2) {
          if (dirty & /*profileLoader*/
          64) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_4$1();
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div3, t5);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      let previous_block_index_1 = current_block_type_index_1;
      current_block_type_index_1 = select_block_type_1(ctx2);
      if (current_block_type_index_1 === previous_block_index_1) {
        if (~current_block_type_index_1) {
          if_blocks_1[current_block_type_index_1].p(ctx2, dirty);
        }
      } else {
        if (if_block3) {
          group_outros();
          transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
            if_blocks_1[previous_block_index_1] = null;
          });
          check_outros();
        }
        if (~current_block_type_index_1) {
          if_block3 = if_blocks_1[current_block_type_index_1];
          if (!if_block3) {
            if_block3 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx2);
            if_block3.c();
          } else {
            if_block3.p(ctx2, dirty);
          }
          transition_in(if_block3, 1);
          if_block3.m(div3, null);
        } else {
          if_block3 = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(closebutton.$$.fragment, local);
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(closebutton.$$.fragment, local);
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div5);
      if (if_block0)
        if_block0.d();
      if_blocks[current_block_type_index].d();
      destroy_component(closebutton);
      if (if_block2)
        if_block2.d();
      if (~current_block_type_index_1) {
        if_blocks_1[current_block_type_index_1].d();
      }
      destroy_component(modalfooter);
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(7, $app = $$value));
  let { onSuccessLogout } = $$props;
  let { closeModal } = $$props;
  let { displayProfile = "profile-nav" } = $$props;
  let { member } = $$props;
  let { profileTitle = member.auth.email } = $$props;
  let hideProfileSection2 = false;
  let profileLoader = false;
  if (!$app.customFields.filter((field) => !field.hidden).length) {
    displayProfile = "security";
    hideProfileSection2 = true;
  }
  const click_handler = () => $$invalidate(0, displayProfile = "profile-nav");
  function mobileprofilemodalnav_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function mobileprofilemodalnav_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function mobileprofilemodalnav_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(6, profileLoader);
  }
  function mobileprofileinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function mobileprofileinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(6, profileLoader);
  }
  function mobilesecurityinfocontent_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function mobilesecurityinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(6, profileLoader);
  }
  function mobilesecurityinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function mobilepasswordinfocontent_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function mobilepasswordinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(6, profileLoader);
  }
  function mobilepasswordinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  $$self.$$set = ($$props2) => {
    if ("onSuccessLogout" in $$props2)
      $$invalidate(3, onSuccessLogout = $$props2.onSuccessLogout);
    if ("closeModal" in $$props2)
      $$invalidate(4, closeModal = $$props2.closeModal);
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
    if ("profileTitle" in $$props2)
      $$invalidate(2, profileTitle = $$props2.profileTitle);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*displayProfile, member*/
    3) {
      if (displayProfile === "profile-nav") {
        $$invalidate(2, profileTitle = member.auth.email);
      } else if (displayProfile === "profile") {
        $$invalidate(2, profileTitle = "My Profile");
      } else if (displayProfile === "security") {
        $$invalidate(2, profileTitle = "Security");
      } else if (displayProfile === "changePassword") {
        if (!member.auth.hasPassword) {
          $$invalidate(2, profileTitle = "Set Password");
        } else {
          $$invalidate(2, profileTitle = "Change Password");
        }
      }
    }
  };
  return [
    displayProfile,
    member,
    profileTitle,
    onSuccessLogout,
    closeModal,
    hideProfileSection2,
    profileLoader,
    $app,
    click_handler,
    mobileprofilemodalnav_member_binding,
    mobileprofilemodalnav_displayProfile_binding,
    mobileprofilemodalnav_profileLoader_binding,
    mobileprofileinfocontent_member_binding,
    mobileprofileinfocontent_profileLoader_binding,
    mobilesecurityinfocontent_displayProfile_binding,
    mobilesecurityinfocontent_profileLoader_binding,
    mobilesecurityinfocontent_member_binding,
    mobilepasswordinfocontent_displayProfile_binding,
    mobilepasswordinfocontent_profileLoader_binding,
    mobilepasswordinfocontent_member_binding
  ];
}
var MobileProfileModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {
      onSuccessLogout: 3,
      closeModal: 4,
      displayProfile: 0,
      member: 1,
      profileTitle: 2
    });
  }
};
function add_css(target) {
  append_styles(target, "svelte-15qvroz", '@import url("https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap");.svelte-15qvroz{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}#msOverlay.svelte-15qvroz{position:fixed;display:flex;justify-content:center;align-items:center;width:100%;height:100%;top:0;left:0;right:0;bottom:0;background-color:rgba(0, 0, 0, 0.5);z-index:99999;overflow:scroll;font-family:"Plus Jakarta Sans", sans-serif;padding:5vh 5vw}.--hide{display:none}.--flex-h-center{display:flex;align-items:center}.ms__loader{position:relative;z-index:10000000}#msLoader path{fill:#007ace}.ms__profile__loader{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center;background:rgb(255 255 255 / 75%)}.ms-modal{box-sizing:border-box;margin:auto;min-width:0;position:relative;outline:none;background:white;border-radius:16px;box-shadow:2px 2px 12px rgb(0 0 0 / 10%);width:360px;color:rgb(10, 10, 10)}.ms-modal--profile{width:700px}.ms-modal__close{box-sizing:border-box;margin:0;min-width:0;position:absolute;top:16px;right:16px;z-index:10;line-height:0}.ms-modal__close button{appearance:none;padding:0;outline:none;width:12px;border:0;background:transparent;cursor:pointer;color:#5c5c5c}.ms-modal__close button:hover{color:#0a0a0a}.ms-modal__back{box-sizing:border-box;margin:0;min-width:0;position:absolute;top:16px;left:16px;z-index:10;line-height:0}.ms-modal__back button{appearance:none;padding:0;outline:none;width:12px;border:0;background:transparent;cursor:pointer;color:#5c5c5c}.ms-modal__back button:hover, .ms-modal__profile-back\n      button:hover{color:#0a0a0a}.ms-modal__back svg{height:12px}.ms-modal__profile-back button{appearance:none;padding:5px;margin-right:6px;outline:none;width:25px;height:25px;border:0;background:transparent;cursor:pointer;color:#5c5c5c;display:flex;align-items:stretch;justify-content:center}.ms-modal__profile-back--mobile{box-sizing:border-box;margin:0;min-width:0;position:absolute;top:16px;left:16px;z-index:10;line-height:0}.ms-modal__profile-back--mobile button{appearance:none;padding:0;outline:none;height:11px;width:7px;border:0;background:transparent;cursor:pointer;color:#5c5c5c}.ms-modal__profile-back--mobile button:hover{color:#0a0a0a}.ms-modal__header{display:flex;align-items:center;padding:12px}.ms-modal__header--mobile{display:flex;padding:42px 42px 16px 42px;flex-direction:column;flex-wrap:wrap;justify-content:center;align-items:center}.ms-modal__header--center{display:flex;flex-direction:column;flex-wrap:wrap;justify-content:center;align-items:center}.ms-modal__content{padding:28px 28px 20px;width:100%;box-sizing:border-box;margin:0 auto}.ms-modal__content--profile{padding:0;display:flex;flex-wrap:wrap;align-content:stretch;align-items:stretch;border-top:1px solid #dddddd}.ms-modal__content-left{display:flex;flex-direction:column;align-items:flex-start;padding:20px;border-right:1px solid #dddddd;min-width:160px}.ms-modal__content-right{padding:20px;flex-grow:1;height:55vh;min-height:300px;overflow-y:auto;position:relative;transition:height 0.3s ease-in-out}.ms-modal__content-right h3{margin-top:40px !important;margin-bottom:10px !important;font-size:18px !important;line-height:1em !important;font-weight:700 !important}.ms-modal__content--mobile{padding:12px;flex-grow:1;height:42vh;min-height:300px;overflow-y:auto;position:relative;transition:height 0.3s ease-in-out}.ms-modal__mobile-profile-nav{display:flex;flex-direction:column;align-content:center;align-items:stretch;flex-wrap:nowrap}.ms-modal__mobile-profile-nav button{display:flex;flex-direction:row;align-content:center;align-items:center;flex-wrap:nowrap;justify-content:space-between;padding:12px;width:100%;margin-bottom:10px}.ms-modal__figure{margin:8px auto;display:flex;position:relative;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;flex-shrink:0;line-height:1}.ms-modal__figure--profile{width:24px;height:24px;padding:0px;margin:0px 8px 0px 0px}.ms-modal__figure--mobile{margin:0px 0px 8px 0px}.ms-modal__figure img, .ms-modal__figure svg{width:auto;height:100%;max-height:42px;text-align:center;object-fit:cover;color:transparent}.ms-modal__title-container{display:flex;justify-content:space-between;align-items:center;margin-bottom:24px}.ms-modal__title{margin-bottom:36px;margin-top:0;text-align:center;font-size:24px;line-height:32px;font-weight:700}.ms-modal__title--profile{margin-bottom:0px}.ms-modal__title-group{display:flex;align-items:center}.ms-modal__title--sub-text{margin-bottom:8px}.ms-modal__text{font-weight:500;font-size:16px;line-height:28px;text-align:center;margin:0 0 20px 0}.ms-modal__regular-button{color:#fff;padding:8px;border-radius:4px;border:none;font-weight:700;font-size:14px;line-height:16px;cursor:pointer;display:flex;align-items:center}.ms-modal__regular-button svg{height:16px;margin-left:6px}.ms-modal__regular-button--left-icon svg{margin-right:6px;margin-left:0px}.ms-modal__regular-button--right-icon svg{margin-left:6px;margin-right:0px}.ms-modal__regular-button--margin-right{margin-right:12px}.ms-modal__text-button{color:#fff;background-color:transparent;padding:8px;border-radius:4px;border:none;font-weight:700;font-size:14px;line-height:16px;cursor:pointer;display:flex;align-items:center}.ms-modal__card{box-shadow:0 0 #0000, 0 0 #0000, 0 0 #0000, 0 0 #0000,\n      0px 2px 2px rgba(0, 0, 0, 0.04);padding:12px;display:flex;flex-direction:row;margin-bottom:12px;border:1px solid rgb(221, 221, 221);border-radius:10px;box-sizing:border-box;width:100%;cursor:default;background:rgb(255, 255, 255);align-items:center;justify-content:space-between}.ms-form{width:100% !important;min-width:0 !important;padding:0 !important}.ms-form__group{margin-bottom:20px}.ms-form__flex{display:flex;justify-content:space-between;align-content:center}.ms-form__flex--centered{justify-content:center}.ms-form__label{margin-bottom:4px;margin-top:0px;font-size:14px;line-height:24px;font-weight:700;text-align:left}.ms-form__fieldset{display:flex;justify-content:space-between;padding:0;border:none}.ms-form__input{box-sizing:border-box;margin:0px;border:1px solid rgb(201, 201, 201);border-radius:6px;font-size:16px;font-weight:400;padding:15px;width:100%}.ms-form__password-container{display:flex;justify-content:space-between;align-content:center;box-sizing:border-box;margin:0px;border:1px solid rgb(201, 201, 201);border-radius:6px;width:100%}.ms-form__password-container:focus-within{border:1px solid rgb(0, 68, 252);outline:rgb(0, 68, 252) solid 1px}.ms-form__password-container:focus-within input{outline:none;border-color:rgb(201, 201, 201);box-shadow:none}.ms-form__input--password{border:none}.ms-form__input--token{font-weight:500;font-size:24.19px;line-height:32px;text-align:center;color:#000000;padding:9px;max-width:42px}.ms-form__show-toggle{cursor:pointer;background:transparent;border-radius:0px 6px 6px 0px;padding:0px 8px;display:flex;align-items:center}.ms-form__eye{display:block;width:22px}.ms-form__eye-slash{display:block;width:22px}.ms-form__error{font-weight:500;font-size:12px;line-height:16px;color:#e40023;margin-top:4px;display:flex;align-items:baseline}.ms-form__error svg{width:10px;height:10px;margin-right:5px}.ms-form__label--right a{color:rgb(10, 10, 10) !important;text-decoration:none;font-weight:400}.ms-form__button{border-radius:6px;font-weight:700;font-size:16px;padding-left:22px;padding-right:22px;height:52px;border:none;display:block;width:100%;background-color:rgb(41, 98, 255);color:#fff;transition:background-color 0.5s ease;cursor:pointer}.ms-form__button:hover{background-color:#0745ff}.ms-form__button:disabled{background-color:#96c0fe;color:#fff;pointer-events:none;display:flex;justify-content:center;align-items:center}.ms-form__button--text{background-color:transparent;padding:0px;height:auto;margin-bottom:0px;margin-top:0px;font-size:14px;line-height:28px;font-weight:500;color:#0a0a0a;opacity:0.8}.ms-form__button--text:hover{background-color:transparent}.ms-form__button--top-spacing{margin-top:10px}#msFormLoader path{fill:#fff}a.ms-form__link, div.ms-form__link{margin-top:8px;font-weight:500;font-size:14px;line-height:24px;color:rgb(10, 10, 10) !important;text-decoration:none;opacity:0.8;cursor:pointer}.ms-modal__cancel-button{background:#f6f6f6;color:#828282;padding:8px;margin-right:8px;border-radius:4px;border:none;font-weight:700;font-size:14px;line-height:16px;cursor:pointer}.ms-modal__save-button{background:#2962ff;color:#fff;padding:8px;border-radius:4px;border:none;font-weight:700;font-size:14px;line-height:16px;cursor:pointer}.ms-modal__save-button:disabled{background:#80a1fc;color:#fff;cursor:default;opacity:0.4}.ms-modal__save-button--large{padding:12px;font-weight:700;font-size:14px;line-height:16px;width:100%}.ms-modal__outline-button{display:block !important;background:#fff;color:#0a0a0a;font-weight:700;font-size:14px;line-height:16px;padding:8px;margin-right:8px;border-radius:4px;border:1px solid #dddddd;cursor:pointer}.ms-modal__outline-button svg{display:inline !important;height:15px;margin-right:6px}.ms-modal__outline-button--mobile{width:100%}.ms-modal__button-label{margin-bottom:4px;margin-top:0px;font-size:14px;line-height:28px;font-weight:500}.ms-modal__profile-option{cursor:pointer;margin-bottom:20px;font-weight:500;font-size:16px;line-height:28px;background:transparent;border:none;padding:0px}.ms-modal__profile-option svg{display:inline !important;height:14px;margin-right:8px}.ms-modal__profile-option:hover{color:#2962ff}.ms-modal__profile-option--active{color:#2962ff}.ms-modal__profile-image-container{display:flex;justify-content:flex-start;width:100%;margin-bottom:21px;align-items:center;flex-direction:row;gap:12px}.ms-modal__profile-image{width:42px;height:42px;border-radius:50%;object-fit:cover;overflow:hidden;background:#ddd;border:1px solid #c9c9c9;display:flex;justify-content:center;align-items:center}.ms-modal__profile-image img{width:100%;height:100%;object-fit:cover}.ms-modal__social-button{display:flex;align-items:center;justify-content:center;width:100%;height:52px;border-radius:6px;font-weight:700;font-size:16px;line-height:28px;color:#0a0a0a;background:none;border:1px solid #c9c9c9;cursor:pointer;margin-bottom:8px}.ms-modal__social-button img, .ms-modal__social-button\n      svg{height:16px;margin-right:8px}.ms-modal__social-button[disabled]{background:#f6f6f6}.ms-modal__social-divider{display:flex;align-items:center;margin:20px 0px}.ms-modal__divider-line{text-align:center;background:#dddddd;height:1px;width:100%}.ms-modal__divider-text{padding:0px 4px}.ms-modal__footer{text-align:center;width:100%;box-sizing:border-box;margin:0;min-width:0;background:#f6f6f6;padding-top:10px;padding-bottom:10px;border-bottom-left-radius:16px;border-bottom-right-radius:16px;border-top:1px solid;border-top-color:#dddddd;font-size:12px;line-height:16px;font-weight:500}.ms-modal__footer a{color:rgb(10, 10, 10);text-decoration:none;display:flex;justify-content:center;align-items:center}.ms-modal__footer svg{height:12px;width:12px;margin-right:5.5px}');
}
function create_if_block_7(ctx) {
  let mediaquery;
  let current;
  mediaquery = new MediaQuery({
    props: {
      query: "(max-width: 520px)",
      $$slots: {
        default: [
          create_default_slot,
          ({ matches }) => ({ 24: matches }),
          ({ matches }) => matches ? 16777216 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(mediaquery.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mediaquery, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mediaquery_changes = {};
      if (dirty & /*$$scope, onSuccess, member, display, matches*/
      50331661) {
        mediaquery_changes.$$scope = { dirty, ctx: ctx2 };
      }
      mediaquery.$set(mediaquery_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mediaquery.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mediaquery.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mediaquery, detaching);
    }
  };
}
function create_if_block_6(ctx) {
  let passwordlesstokenmodal;
  let updating_display;
  let updating_params;
  let current;
  function passwordlesstokenmodal_display_binding(value) {
    ctx[16](value);
  }
  function passwordlesstokenmodal_params_binding(value) {
    ctx[17](value);
  }
  let passwordlesstokenmodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccess: (
      /*onSuccess*/
      ctx[2]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    passwordlesstokenmodal_props.display = /*display*/
    ctx[0];
  }
  if (
    /*params*/
    ctx[1] !== void 0
  ) {
    passwordlesstokenmodal_props.params = /*params*/
    ctx[1];
  }
  passwordlesstokenmodal = new PasswordlessTokenModal({ props: passwordlesstokenmodal_props });
  binding_callbacks.push(() => bind(passwordlesstokenmodal, "display", passwordlesstokenmodal_display_binding));
  binding_callbacks.push(() => bind(passwordlesstokenmodal, "params", passwordlesstokenmodal_params_binding));
  return {
    c() {
      create_component(passwordlesstokenmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordlesstokenmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordlesstokenmodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        passwordlesstokenmodal_changes.onSuccess = /*onSuccess*/
        ctx2[2];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        passwordlesstokenmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      if (!updating_params && dirty & /*params*/
      2) {
        updating_params = true;
        passwordlesstokenmodal_changes.params = /*params*/
        ctx2[1];
        add_flush_callback(() => updating_params = false);
      }
      passwordlesstokenmodal.$set(passwordlesstokenmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordlesstokenmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordlesstokenmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordlesstokenmodal, detaching);
    }
  };
}
function create_if_block_5(ctx) {
  let passwordsuccessmodal;
  let updating_display;
  let current;
  function passwordsuccessmodal_display_binding(value) {
    ctx[15](value);
  }
  let passwordsuccessmodal_props = { closeModal: (
    /*closeModal*/
    ctx[5]
  ) };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    passwordsuccessmodal_props.display = /*display*/
    ctx[0];
  }
  passwordsuccessmodal = new PassSuccessModal({ props: passwordsuccessmodal_props });
  binding_callbacks.push(() => bind(passwordsuccessmodal, "display", passwordsuccessmodal_display_binding));
  return {
    c() {
      create_component(passwordsuccessmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordsuccessmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordsuccessmodal_changes = {};
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        passwordsuccessmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      passwordsuccessmodal.$set(passwordsuccessmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordsuccessmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordsuccessmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordsuccessmodal, detaching);
    }
  };
}
function create_if_block_4(ctx) {
  let passwordtokenmodal;
  let updating_display;
  let current;
  function passwordtokenmodal_display_binding(value) {
    ctx[14](value);
  }
  let passwordtokenmodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessPasswordReset: (
      /*onSuccess*/
      ctx[2]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    passwordtokenmodal_props.display = /*display*/
    ctx[0];
  }
  passwordtokenmodal = new PassTokenModal({ props: passwordtokenmodal_props });
  binding_callbacks.push(() => bind(passwordtokenmodal, "display", passwordtokenmodal_display_binding));
  return {
    c() {
      create_component(passwordtokenmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordtokenmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordtokenmodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        passwordtokenmodal_changes.onSuccessPasswordReset = /*onSuccess*/
        ctx2[2];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        passwordtokenmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      passwordtokenmodal.$set(passwordtokenmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordtokenmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordtokenmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordtokenmodal, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let passwordresetmodal;
  let updating_display;
  let current;
  function passwordresetmodal_display_binding(value) {
    ctx[13](value);
  }
  let passwordresetmodal_props = { closeModal: (
    /*closeModal*/
    ctx[5]
  ) };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    passwordresetmodal_props.display = /*display*/
    ctx[0];
  }
  passwordresetmodal = new PassResetModal({ props: passwordresetmodal_props });
  binding_callbacks.push(() => bind(passwordresetmodal, "display", passwordresetmodal_display_binding));
  return {
    c() {
      create_component(passwordresetmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordresetmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordresetmodal_changes = {};
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        passwordresetmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      passwordresetmodal.$set(passwordresetmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordresetmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordresetmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordresetmodal, detaching);
    }
  };
}
function create_if_block_2(ctx) {
  let signupmodal;
  let updating_display;
  let updating_params;
  let current;
  function signupmodal_display_binding(value) {
    ctx[11](value);
  }
  function signupmodal_params_binding(value) {
    ctx[12](value);
  }
  let signupmodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessSignup: (
      /*onSuccess*/
      ctx[2]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    signupmodal_props.display = /*display*/
    ctx[0];
  }
  if (
    /*params*/
    ctx[1] !== void 0
  ) {
    signupmodal_props.params = /*params*/
    ctx[1];
  }
  signupmodal = new SignupModal({ props: signupmodal_props });
  binding_callbacks.push(() => bind(signupmodal, "display", signupmodal_display_binding));
  binding_callbacks.push(() => bind(signupmodal, "params", signupmodal_params_binding));
  return {
    c() {
      create_component(signupmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(signupmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const signupmodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        signupmodal_changes.onSuccessSignup = /*onSuccess*/
        ctx2[2];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        signupmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      if (!updating_params && dirty & /*params*/
      2) {
        updating_params = true;
        signupmodal_changes.params = /*params*/
        ctx2[1];
        add_flush_callback(() => updating_params = false);
      }
      signupmodal.$set(signupmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(signupmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(signupmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(signupmodal, detaching);
    }
  };
}
function create_if_block_1(ctx) {
  let loginmodal;
  let updating_display;
  let updating_params;
  let current;
  function loginmodal_display_binding(value) {
    ctx[9](value);
  }
  function loginmodal_params_binding(value) {
    ctx[10](value);
  }
  let loginmodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessLogin: (
      /*onSuccess*/
      ctx[2]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    loginmodal_props.display = /*display*/
    ctx[0];
  }
  if (
    /*params*/
    ctx[1] !== void 0
  ) {
    loginmodal_props.params = /*params*/
    ctx[1];
  }
  loginmodal = new LoginModal({ props: loginmodal_props });
  binding_callbacks.push(() => bind(loginmodal, "display", loginmodal_display_binding));
  binding_callbacks.push(() => bind(loginmodal, "params", loginmodal_params_binding));
  return {
    c() {
      create_component(loginmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(loginmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const loginmodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        loginmodal_changes.onSuccessLogin = /*onSuccess*/
        ctx2[2];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        loginmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      if (!updating_params && dirty & /*params*/
      2) {
        updating_params = true;
        loginmodal_changes.params = /*params*/
        ctx2[1];
        add_flush_callback(() => updating_params = false);
      }
      loginmodal.$set(loginmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(loginmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loginmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(loginmodal, detaching);
    }
  };
}
function create_if_block(ctx) {
  let loader;
  let current;
  loader = new Loader({});
  return {
    c() {
      create_component(loader.$$.fragment);
    },
    m(target, anchor) {
      mount_component(loader, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(loader.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loader.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(loader, detaching);
    }
  };
}
function create_else_block(ctx) {
  let profilemodal;
  let updating_display;
  let current;
  function profilemodal_display_binding(value) {
    ctx[19](value);
  }
  let profilemodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessLogout: (
      /*onSuccess*/
      ctx[2]
    ),
    member: (
      /*member*/
      ctx[3]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    profilemodal_props.display = /*display*/
    ctx[0];
  }
  profilemodal = new ProfileModal({ props: profilemodal_props });
  binding_callbacks.push(() => bind(profilemodal, "display", profilemodal_display_binding));
  return {
    c() {
      create_component(profilemodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profilemodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const profilemodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        profilemodal_changes.onSuccessLogout = /*onSuccess*/
        ctx2[2];
      if (dirty & /*member*/
      8)
        profilemodal_changes.member = /*member*/
        ctx2[3];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        profilemodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      profilemodal.$set(profilemodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(profilemodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profilemodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profilemodal, detaching);
    }
  };
}
function create_if_block_8(ctx) {
  let mobileprofilemodal;
  let updating_display;
  let current;
  function mobileprofilemodal_display_binding(value) {
    ctx[18](value);
  }
  let mobileprofilemodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessLogout: (
      /*onSuccess*/
      ctx[2]
    ),
    member: (
      /*member*/
      ctx[3]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    mobileprofilemodal_props.display = /*display*/
    ctx[0];
  }
  mobileprofilemodal = new MobileProfileModal({ props: mobileprofilemodal_props });
  binding_callbacks.push(() => bind(mobileprofilemodal, "display", mobileprofilemodal_display_binding));
  return {
    c() {
      create_component(mobileprofilemodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mobileprofilemodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mobileprofilemodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        mobileprofilemodal_changes.onSuccessLogout = /*onSuccess*/
        ctx2[2];
      if (dirty & /*member*/
      8)
        mobileprofilemodal_changes.member = /*member*/
        ctx2[3];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        mobileprofilemodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      mobileprofilemodal.$set(mobileprofilemodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mobileprofilemodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mobileprofilemodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mobileprofilemodal, detaching);
    }
  };
}
function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_8, create_else_block];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*matches*/
      ctx2[24]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment(ctx) {
  let main;
  let current_block_type_index;
  let if_block;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [
    create_if_block,
    create_if_block_1,
    create_if_block_2,
    create_if_block_3,
    create_if_block_4,
    create_if_block_5,
    create_if_block_6,
    create_if_block_7
  ];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*showLoader*/
      ctx2[4]
    )
      return 0;
    if (
      /*display*/
      ctx2[0] === "login"
    )
      return 1;
    if (
      /*display*/
      ctx2[0] === "signup"
    )
      return 2;
    if (
      /*display*/
      ctx2[0] === "forgot_password"
    )
      return 3;
    if (
      /*display*/
      ctx2[0] === "reset_password"
    )
      return 4;
    if (
      /*display*/
      ctx2[0] === "reset_password_success"
    )
      return 5;
    if (
      /*display*/
      ctx2[0] === "passwordless_token"
    )
      return 6;
    if (
      /*display*/
      ctx2[0] === "profile"
    )
      return 7;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      main = element("main");
      if (if_block)
        if_block.c();
      attr(main, "id", "msOverlay");
      attr(main, "class", "svelte-15qvroz");
    },
    m(target, anchor) {
      insert(target, main, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(main, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen(
          main,
          "mousedown",
          /*closeModalOutside*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(main, null);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(main);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      mounted = false;
      dispose();
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let showLoader2;
  let { display = "login" } = $$props;
  let { onSuccess } = $$props;
  let { params } = $$props;
  let appLoading = true;
  let memberLoading = display === "profile" ? true : false;
  let member;
  function setAppStore(data) {
    AppStore.update(() => data);
    TextStore.set({ text: data.ssoText || {} });
  }
  function closeModal() {
    $$invalidate(7, appLoading = true);
    onSuccess({ type: "CLOSED" });
    const modal2 = document.querySelector("#msOverlay");
    if (modal2) {
      modal2.remove();
    }
  }
  function closeModalOutside(e) {
    if (e.target.id === "msOverlay") {
      closeModal();
    }
  }
  const getApp = () => __async(this, null, function* () {
    const { data } = yield window.$memberstackDom.getApp();
    setAppStore(data);
  });
  function checkApp() {
    return __async(this, null, function* () {
      if (params && params.app) {
        setAppStore(params.app);
      } else {
        console.log("No app specified - request it");
        yield getApp();
      }
      $$invalidate(7, appLoading = false);
      $$invalidate(4, showLoader2 = false);
    });
  }
  const getMember = () => __async(this, null, function* () {
    const { data } = yield window.$memberstackDom.getCurrentMember();
    $$invalidate(8, memberLoading = false);
    $$invalidate(3, member = data);
    if (display === "profile" && !data) {
      closeModal();
      throw new Error("Member not logged in");
    }
  });
  onMount(() => {
    checkApp();
    if (display === "profile") {
      getMember();
    }
  });
  function loginmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function loginmodal_params_binding(value) {
    params = value;
    $$invalidate(1, params);
  }
  function signupmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function signupmodal_params_binding(value) {
    params = value;
    $$invalidate(1, params);
  }
  function passwordresetmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function passwordtokenmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function passwordsuccessmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function passwordlesstokenmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function passwordlesstokenmodal_params_binding(value) {
    params = value;
    $$invalidate(1, params);
  }
  function mobileprofilemodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function profilemodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  $$self.$$set = ($$props2) => {
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
    if ("onSuccess" in $$props2)
      $$invalidate(2, onSuccess = $$props2.onSuccess);
    if ("params" in $$props2)
      $$invalidate(1, params = $$props2.params);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*appLoading, memberLoading*/
    384) {
      $$invalidate(4, showLoader2 = appLoading || memberLoading);
    }
  };
  return [
    display,
    params,
    onSuccess,
    member,
    showLoader2,
    closeModal,
    closeModalOutside,
    appLoading,
    memberLoading,
    loginmodal_display_binding,
    loginmodal_params_binding,
    signupmodal_display_binding,
    signupmodal_params_binding,
    passwordresetmodal_display_binding,
    passwordtokenmodal_display_binding,
    passwordsuccessmodal_display_binding,
    passwordlesstokenmodal_display_binding,
    passwordlesstokenmodal_params_binding,
    mobileprofilemodal_display_binding,
    profilemodal_display_binding
  ];
}
var Main = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { display: 0, onSuccess: 2, params: 1 }, add_css);
  }
};

// src/methods/dom/methods.ts
var initDefaultMessageBox = () => {
  if (document.readyState !== "loading") {
    initMessageBoxes();
  } else {
    document.addEventListener("DOMContentLoaded", function(event) {
      initMessageBoxes();
    });
  }
  function initMessageBoxes() {
    initCSS();
    addSuccessBox();
    addErrorBox();
  }
};
var showMessage = (msg, isError) => {
  if (!msg)
    return;
  if (!document.querySelector("[data-ms-message='success']")) {
    initDefaultMessageBox();
  }
  let messageBox;
  if (isError) {
    messageBox = document.querySelector("[data-ms-message='error']");
  } else {
    messageBox = document.querySelector("[data-ms-message='success']");
  }
  const messageTextBox = messageBox.querySelector("[data-ms-message-text]");
  if (messageTextBox) {
    messageTextBox.innerHTML = msg;
  }
  messageBox.style.display = "block";
  const closeBtn = messageBox.querySelector("[data-ms-message-close]");
  closeBtn == null ? void 0 : closeBtn.addEventListener("click", () => {
    messageBox.style.display = "none";
  });
  setTimeout(() => {
    messageBox.style.display = "none";
  }, 7e3);
};
var showLoader = (element2) => {
  if (element2) {
    element2.style.display = "block";
    return;
  }
  const cssEl = document.createElement("style");
  const css = ".ms__loader { width: 100%; height: 100%; overflow: hidden; position: fixed; top: 0; left: 0; display: flex; justify-content: center; align-items: center; z-index: 10000000; } #msLoader path { fill: #007ace; }";
  cssEl.appendChild(document.createTextNode(css));
  document.head.appendChild(cssEl);
  const loaderHTML = '<?xml version="1.0"?><div class="ms__loader"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="msLoader" x="0px" y="0px" width="40px" height="40px" viewBox="0 0 50 50" style="enable-background: new 0 0 50 50; z-index:1000000" xml:space="preserve"><path fill="#000" d="M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z"><animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite"/></path></svg></div>';
  const div = document.createElement("div");
  div.setAttribute("data-ms-loader", "true");
  div.innerHTML = loaderHTML;
  if (document.readyState !== "loading") {
    document.body.appendChild(div);
  } else {
    document.addEventListener("DOMContentLoaded", function(event) {
      document.body.appendChild(div);
    });
  }
};
var hideLoader = (element2) => {
  var _a;
  if (element2) {
    element2.style.display = "none";
    return;
  }
  (_a = document.querySelector("[data-ms-loader]")) == null ? void 0 : _a.remove();
};
var modal;
var openModal = (_0, ..._1) => __async(void 0, [_0, ..._1], function* (type, params = {}) {
  let resolveModal;
  const modalPromise = new Promise((resolve) => {
    resolveModal = resolve;
  });
  modal = new Main({
    target: document.body,
    props: {
      display: type.toLowerCase(),
      params,
      onSuccess: resolveModal
    }
  });
  return modalPromise;
});
var hideModal = () => {
  try {
    modal == null ? void 0 : modal.$destroy();
  } catch (e) {
  }
  hideLoader();
};

// src/utils/cookies.ts
import Cookie from "js-cookie";
var memberAuthTokenName = "_ms-mid";
function isLocalStorageAvailable() {
  try {
    localStorage.setItem("test", "test");
    localStorage.removeItem("test");
    return true;
  } catch (e) {
    return false;
  }
}
var localStorageAvailable = isLocalStorageAvailable();
var useCookies = false;
var setCookieOnRootDomain = false;
var setUseCookies = (setCookieOnRoot) => {
  useCookies = true;
  if (setCookieOnRoot)
    setCookieOnRootDomain = true;
};
var setMemberToken = (token, expires) => {
  if (localStorageAvailable && !useCookies) {
    localStorage.setItem(memberAuthTokenName, token);
  } else {
    const domain = window.location.hostname.split(".").slice(-2).join(".");
    Cookie.set(memberAuthTokenName, token, __spreadValues({
      expires: expires && Number(expires) || 14,
      sameSite: "strict"
    }, setCookieOnRootDomain && { domain }));
  }
};
var removeMemberToken = () => {
  if (localStorageAvailable) {
    localStorage.removeItem(memberAuthTokenName);
  }
  const domain = window.location.hostname.split(".").slice(-2).join(".");
  Cookie.set(memberAuthTokenName, "", __spreadValues({
    expires: -1,
    sameSite: "strict"
  }, setCookieOnRootDomain && { domain }));
  Cookie.set(memberAuthTokenName, "", {
    expires: -1,
    sameSite: "strict"
  });
};
var getMemberToken = () => {
  if (localStorageAvailable && !useCookies) {
    const memAuthToken = localStorage.getItem(memberAuthTokenName);
    if (memAuthToken)
      return memAuthToken;
  }
  return Cookie.get(memberAuthTokenName);
};
var setMemberTokenIfAvailable = () => {
  if (typeof window !== "undefined") {
    const urlParams = new URLSearchParams(window.location.search);
    const memberToken = urlParams.get("memberToken");
    if (memberToken)
      setMemberToken(memberToken);
  }
};

// src/methods/requests/requests.ts
import axios from "axios";

// src/constants/endpoints.ts
var endpoints = {
  API: "https://client.memberstack.com"
};

// src/methods/requests/requests.ts
var createRequestHandler = ({
  publicKey,
  appId,
  token,
  customEndpoint
}) => {
  return {
    sendRequest: (data, options) => __async(void 0, null, function* () {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      try {
        const { url } = data;
        const memberToken = getMemberToken();
        const authHeader = [
          (_b = (_a = data.headers) == null ? void 0 : _a["Authorization"]) == null ? void 0 : _b.replace("Bearer ", ""),
          memberToken,
          options == null ? void 0 : options.token
        ].find((x) => x);
        const formattedUrl = `${customEndpoint || endpoints.API}${url}`;
        const res = yield axios({
          method: data.method,
          data: data.data,
          url: formattedUrl,
          headers: __spreadValues(__spreadProps(__spreadValues(__spreadValues(__spreadValues({}, authHeader && { authorization: `Bearer ${authHeader}` }), publicKey && { ["X-API-Key" /* API_KEY */]: publicKey }), appId && { ["X-APP-ID" /* APP_ID */]: appId }), {
            ["X-User-Agent" /* USER_AGENT */]: "@memberstack/client@1.2.0"
          }), data.contentType && { "Content-Type": data.contentType }),
          withCredentials: true
        });
        if ((_c = res == null ? void 0 : res.headers) == null ? void 0 : _c["ms-mid"]) {
          token = res.headers["ms-mid"];
        }
        if ((_d = res == null ? void 0 : res.data) == null ? void 0 : _d.error) {
          if (res.data.error.name === "JsonWebTokenError") {
            throw {
              code: "client/invalid-token",
              message: "An invalid token has been provided. Please make sure the token is valid."
            };
          }
          throw (_e = res.data) == null ? void 0 : _e.error;
        }
        return res == null ? void 0 : res.data;
      } catch (e) {
        if (!e.response)
          throw e;
        throw ((_g = (_f = e.response) == null ? void 0 : _f.data) == null ? void 0 : _g.error) || ((_h = e.response) == null ? void 0 : _h.data);
      }
    })
  };
};

// src/auth/index.ts
var createObservable = () => {
  const observer = /* @__PURE__ */ new Map();
  return {
    subscribe: (key, fn) => {
      if (typeof fn !== "function")
        return;
      return observer.set(key, fn);
    },
    unsubscribe: (key) => {
      return observer.delete(key);
    },
    notify: (data) => {
      return [...observer.values()].forEach((fn) => fn(data));
    }
  };
};
var observable = createObservable();
var getPersistedMember = () => {
  return JSON.parse(localStorage == null ? void 0 : localStorage.getItem("_ms-mem"));
};
var setPersistedMember = (member) => {
  if (member) {
    const data = JSON.stringify(member);
    if (data)
      localStorage == null ? void 0 : localStorage.setItem("_ms-mem", data);
    observable.notify(member);
  }
};
var updatePersistedMember = (member) => {
  if (member) {
    const data = JSON.stringify(member);
    if (data)
      localStorage == null ? void 0 : localStorage.setItem("_ms-mem", data);
  } else {
    localStorage == null ? void 0 : localStorage.removeItem("_ms-mem");
    removeMemberToken();
  }
};
var unsetPersistedMember = () => {
  localStorage == null ? void 0 : localStorage.removeItem("_ms-mem");
  removeMemberToken();
  observable.notify(null);
};
var onAuthChange = (cb) => {
  const id = Math.floor(Math.random() * 1e3);
  observable.subscribe(id, cb);
  return {
    unsubscribe: () => observable.unsubscribe(id)
  };
};

// src/methods/requests/index.ts
function getSessionDurationDays(unixTimestampMillis) {
  const now2 = Date.now();
  const differenceMillis = unixTimestampMillis - now2;
  return Math.ceil(differenceMillis / (24 * 60 * 60 * 1e3));
}
var addHeaders = (options) => __spreadValues({}, (options == null ? void 0 : options.token) && {
  Authorization: `Bearer ${options.token}`
});
var promiseResolve;
var promiseReject;
var receiveMessage = (event) => {
  var _a;
  const { data, origin } = event;
  if (API_ENDPOINT !== origin)
    return;
  if ((_a = data == null ? void 0 : data.data) == null ? void 0 : _a.member) {
    const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
    setPersistedMember(data.data.member);
    setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
  }
  if (data == null ? void 0 : data.error) {
    promiseReject(data.error);
  }
  promiseResolve(data);
};
var windowObjectReference = null;
var previousUrl = null;
var openSignInWindow = (url, name) => __async(void 0, null, function* () {
  window.removeEventListener("message", receiveMessage);
  const dualScreenLeft = window.screenLeft !== void 0 ? window.screenLeft : window.screenX;
  const dualScreenTop = window.screenTop !== void 0 ? window.screenTop : window.screenY;
  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;
  const systemZoom = width / window.screen.availWidth;
  const left = (width - 600) / 2 / systemZoom + dualScreenLeft;
  const top = (height - 700) / 2 / systemZoom + dualScreenTop;
  const strWindowFeatures = `toolbar=no, menubar=no, width=${600 / systemZoom}, height=${700 / systemZoom}, top=${top}, left=${left}`;
  if (windowObjectReference === null || windowObjectReference.closed) {
    windowObjectReference = window.open(url, name, strWindowFeatures);
  } else if (previousUrl !== url) {
    windowObjectReference = window.open(url, name, strWindowFeatures);
    windowObjectReference.focus();
  } else {
    windowObjectReference.focus();
  }
  window.addEventListener("message", (event) => receiveMessage(event), false);
  previousUrl = url;
  window.addEventListener("beforeunload", () => {
    windowObjectReference == null ? void 0 : windowObjectReference.close();
  });
  return new Promise((resolve, reject) => {
    promiseResolve = resolve;
    promiseReject = reject;
  });
});
var API_ENDPOINT;
var initRequest = ({
  publicKey,
  appId,
  token,
  domain
  //sessionDurationDays
}) => {
  const { sendRequest } = createRequestHandler({
    publicKey,
    token,
    customEndpoint: domain,
    appId
  });
  API_ENDPOINT = domain;
  return {
    postIsTyping(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/posts/typing`,
          data: {
            channelKey: params.channelKey
          }
        });
      });
    },
    getChannelInfo(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams({
          channelKey: params.channelKey
        });
        return sendRequest({
          method: "GET" /* GET */,
          url: `/comments/channels/info?${queryParams}`
        });
      });
    },
    getPosts(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadValues(__spreadValues(__spreadValues({
          channelKey: params.channelKey
        }, params.after && {
          after: params.after
        }), params.order && {
          order: params.order
        }), params.limit && {
          limit: params.limit.toString()
        }));
        return sendRequest({
          method: "GET" /* GET */,
          url: `/comments/posts?${queryParams}`
        });
      });
    },
    getThreads(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadValues(__spreadValues(__spreadValues({
          postId: params.postId
        }, params.after && {
          after: params.after
        }), params.order && {
          order: params.order
        }), params.limit && {
          limit: params.limit.toString()
        }));
        return sendRequest({
          method: "GET" /* GET */,
          url: `/comments/threads?${queryParams}`
        });
      });
    },
    createPost(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/posts`,
          data: {
            channelKey: params.channelKey,
            content: params.content
          }
        });
      });
    },
    updatePost(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "PATCH" /* PATCH */,
          url: `/comments/posts/${params.postId}/update`,
          data: {
            content: params.content
          }
        });
      });
    },
    postVote(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/posts/${params.postId}/vote`,
          data: {
            vote: params.vote
          }
        });
      });
    },
    deletePost(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "DELETE" /* DELETE */,
          url: `/comments/posts/${params.postId}`
        });
      });
    },
    createThread(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/threads`,
          data: {
            postId: params.postId,
            content: params.content
          }
        });
      });
    },
    updateThread(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "PATCH" /* PATCH */,
          url: `/comments/threads/${params.threadId}/update`,
          data: {
            content: params.content
          }
        });
      });
    },
    // vote thread
    threadVote(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/threads/${params.threadId}/vote`,
          data: {
            vote: params.vote
          }
        });
      });
    },
    deleteThread(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "DELETE" /* DELETE */,
          url: `/comments/threads/${params.threadId}`
        });
      });
    },
    getSecureContent(params) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: "/secure-content",
          data: {
            contentId: params.contentId
          }
        });
        return data;
      });
    },
    signupWithProvider(params) {
      return __async(this, null, function* () {
        const customFields = encodeURIComponent(params.customFields ? JSON.stringify(params.customFields) : "{}");
        const plans = encodeURIComponent(params.plans ? JSON.stringify(params.plans) : "[]");
        const queryParams = new URLSearchParams(__spreadProps(__spreadValues({
          provider: params.provider,
          customFields,
          plans,
          appId
        }, publicKey && {
          publicKey
        }), {
          origin: window.location.hostname
        }));
        return openSignInWindow(`${domain}/auth-provider/signup?${queryParams}`, "signup");
      });
    },
    loginWithProvider(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadProps(__spreadValues({
          provider: params.provider,
          appId
        }, publicKey && {
          publicKey
        }), {
          origin: window.location.hostname
        }));
        return openSignInWindow(`${domain}/auth-provider/login?${queryParams}`, "login");
      });
    },
    connectProvider(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadProps(__spreadValues({
          provider: params.provider,
          appId
        }, publicKey && {
          publicKey
        }), {
          member: getMemberToken(),
          origin: window.location.hostname
        }));
        return openSignInWindow(`${domain}/auth-provider/connect?${queryParams}`, "connect");
      });
    },
    disconnectProvider(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: "/member/disconnect-provider",
          data: {
            provider: params.provider
          }
        });
      });
    },
    getAppAndMember(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams({
          // @ts-ignore
          includeSSOText: window == null ? void 0 : window.ssoUI
        });
        return sendRequest({
          method: "GET" /* GET */,
          url: `/app-member?${queryParams}`
        });
      });
    },
    getApp() {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams({
          // @ts-ignore
          includeSSOText: window == null ? void 0 : window.ssoUI
        });
        return sendRequest({
          method: "GET" /* GET */,
          url: `/app?${queryParams}`
        });
      });
    },
    loginMemberEmailPassword(params, options) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/login`,
          data: {
            email: params.email,
            password: params.password,
            options
          }
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    sendMemberLoginPasswordlessEmail(params, options) {
      return __async(this, null, function* () {
        return yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/passwordless/login/send`,
          data: {
            email: params.email
          }
        });
      });
    },
    sendMemberSignupPasswordlessEmail(params, options) {
      return __async(this, null, function* () {
        return yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/passwordless/signup/send`,
          data: {
            email: params.email
          }
        });
      });
    },
    loginMemberPasswordless(params, options) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/passwordless/login`,
          data: {
            passwordlessToken: params.passwordlessToken,
            email: params.email,
            options
          }
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    getPlan(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "GET" /* GET */,
          url: `/app/plans/${params.planId}`
        });
      });
    },
    getPlans() {
      return __async(this, null, function* () {
        const { data } = yield sendRequest({
          method: "GET" /* GET */,
          url: `/app`
        });
        return {
          data: data.plans
        };
      });
    },
    getRestrictedUrlGroups() {
      return __async(this, null, function* () {
        const { data } = yield sendRequest({
          method: "GET" /* GET */,
          url: `/app`
        });
        return {
          data: data.contentGroups
        };
      });
    },
    getCurrentMember(options) {
      return __async(this, null, function* () {
        const getMemberRequest = sendRequest({
          method: "GET" /* GET */,
          url: `/member?${Math.floor(1e3 + Math.random() * 9e3)}`,
          headers: addHeaders(options)
        });
        function setMember() {
          return __async(this, null, function* () {
            const data = yield getMemberRequest;
            updatePersistedMember(data.data);
          });
        }
        setMember();
        if ((options == null ? void 0 : options.useCache) === true) {
          const member = getPersistedMember();
          return { data: member };
        } else {
          return getMemberRequest;
        }
      });
    },
    getMemberJSON(options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "GET" /* GET */,
          url: `/member/json`,
          headers: addHeaders(options)
        });
      });
    },
    updateMemberJSON(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/json`,
          data: {
            json: params.json
          },
          headers: addHeaders(options)
        });
      });
    },
    addPlan(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/plans/add`,
          data: {
            planId: params.planId
          },
          headers: addHeaders(options)
        });
      });
    },
    purchasePlansWithCheckout(params, options) {
      return __async(this, null, function* () {
        function getRedirectURL(URL) {
          let redirectUrl = window.location.href;
          const urlParam = URL;
          if (urlParam) {
            if (urlParam.indexOf("http://") === 0 || urlParam.indexOf("https://") === 0) {
              redirectUrl = urlParam;
            } else {
              redirectUrl = window.location.origin + urlParam;
            }
          }
          return redirectUrl;
        }
        const success_url = params.successUrl ? getRedirectURL(params.successUrl) : void 0;
        const cancel_url = getRedirectURL(params.cancelUrl);
        const request = yield sendRequest({
          method: "POST" /* POST */,
          url: `/member/plans/create-checkout-session`,
          data: {
            priceId: params.priceId,
            couponId: params.couponId,
            //window.location requires dom
            success_url,
            cancel_url,
            origin_url: window.location.href
          },
          headers: addHeaders(options)
        });
        if (params.autoRedirect === false) {
          return request;
        }
        window.location.href = request.data.url;
      });
    },
    // used for plan updates
    launchStripeCustomerPortal(params, options) {
      return __async(this, null, function* () {
        function getRedirectURL(URL) {
          let redirectUrl = window.location.href;
          const urlParam = URL;
          if (urlParam) {
            if (urlParam.indexOf("http://") === 0 || urlParam.indexOf("https://") === 0) {
              redirectUrl = urlParam;
            } else {
              redirectUrl = window.location.origin + urlParam;
            }
          }
          return redirectUrl;
        }
        const returnUrl = (params == null ? void 0 : params.returnUrl) ? getRedirectURL(params.returnUrl) : void 0;
        const request = yield sendRequest({
          method: "POST" /* POST */,
          url: `/member/create-billing-portal-session`,
          data: __spreadValues({
            //window.location requires dom
            return_url: returnUrl,
            origin_url: window.location.href
          }, params && {
            priceIds: params.priceIds,
            configuration: params.configuration
          }),
          headers: addHeaders(options)
        });
        if ((params == null ? void 0 : params.autoRedirect) === false) {
          return request;
        }
        window.location.href = request.data.url;
      });
    },
    removePlan(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/plans/remove`,
          data: {
            planId: params.planId
          },
          headers: addHeaders(options)
        });
      });
    },
    updateMember(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member`,
          data: __spreadValues({}, params.customFields && { customFields: params.customFields }),
          headers: addHeaders(options)
        });
      });
    },
    updateMemberAuth(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member-auth`,
          data: __spreadValues(__spreadValues(__spreadValues({}, params.email && { email: params.email }), params.oldPassword && { oldPassword: params.oldPassword }), params.newPassword && { newPassword: params.newPassword }),
          headers: addHeaders(options)
        });
      });
    },
    setPassword(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/set-password`,
          data: {
            password: params.password
          },
          headers: addHeaders(options)
        });
      });
    },
    signupMemberPasswordless(params, options) {
      return __async(this, null, function* () {
        var _a2, _b;
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/signup?isPasswordless=true`,
          data: __spreadValues(__spreadProps(__spreadValues({
            email: params.email,
            customFields: params.customFields,
            passwordlessToken: params.passwordlessToken,
            metaData: params.metaData
          }, params.plans && { plans: params.plans }), {
            //internal use only
            origin_domain: window.location.origin,
            options
          }), ((_a2 = window.Rewardful) == null ? void 0 : _a2.referral) && {
            rewardfulData: {
              // @ts-ignore
              referral: window.Rewardful.referral,
              // @ts-ignore
              coupon: (_b = window.Rewardful.coupon) == null ? void 0 : _b.id
            }
          })
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    signupMemberEmailPassword(params, options) {
      return __async(this, null, function* () {
        var _a2, _b;
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/signup`,
          data: __spreadValues(__spreadProps(__spreadValues({
            email: params.email,
            password: params.password,
            customFields: params.customFields,
            metaData: params.metaData,
            captchaToken: params.captchaToken
          }, params.plans && { plans: params.plans }), {
            //internal use only
            origin_domain: window.location.origin,
            options
          }), ((_a2 = window.Rewardful) == null ? void 0 : _a2.referral) && {
            rewardfulData: {
              // @ts-ignore
              referral: window.Rewardful.referral,
              // @ts-ignore
              coupon: (_b = window.Rewardful.coupon) == null ? void 0 : _b.id
            }
          })
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    updateMemberProfileImage(params) {
      return __async(this, null, function* () {
        if (params.profileImage) {
          const formData = new FormData();
          formData.append("profileImage", params.profileImage);
          return sendRequest({
            method: "POST" /* POST */,
            url: `/member/profile-image`,
            data: formData,
            contentType: "multipart/form-data"
          });
        }
      });
    },
    sendMemberVerificationEmail() {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/auth/send-email-verification`,
          data: {
            //internal use only
            origin_domain: window.location.origin
          }
        });
      });
    },
    sendMemberResetPasswordEmail(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/auth/send-reset-password-email`,
          data: {
            email: params.email
          }
        });
      });
    },
    resetMemberPassword(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/auth/reset-password`,
          data: {
            token: params.token,
            newPassword: params.newPassword
          }
        });
      });
    },
    logout(options) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/member/logout`,
          headers: addHeaders(options)
        });
        unsetPersistedMember();
        return data;
      });
    }
  };
};

// src/methods/index.ts
var captchaReadyPromise = new Promise((resolve) => {
  if (typeof window !== "undefined") {
    window._hcaptchaReady = resolve;
  }
});
var methods = {
  openModal,
  hideModal,
  _hideLoader: hideLoader,
  _showLoader: showLoader,
  _showMessage: showMessage,
  getMemberCookie: getMemberToken,
  onAuthChange,
  _captchaReady: captchaReadyPromise
};
function init2(props) {
  if (props.useCookies)
    setUseCookies(props.setCookieOnRootDomain);
  setMemberTokenIfAvailable();
  const requests = initRequest({
    publicKey: props.publicKey,
    appId: props.appId,
    token: getMemberToken(),
    domain: props.domain || endpoints.API
  });
  const allMethods = Object.assign(methods, requests);
  if (typeof window !== "undefined") {
    window.$memberstackDom = allMethods;
  }
  _initCaptchas();
  return allMethods;
}
function _initCaptchas() {
  return __async(this, null, function* () {
    if (typeof window === "undefined")
      return;
    const script = document.createElement("script");
    script.src = "https://js.hcaptcha.com/1/api.js?render=explicit&onload=_hcaptchaReady";
    script.async = true;
    script.defer = true;
    document.head.appendChild(script);
  });
}
var methods_default = { init: (props) => init2(props) };

// src/index.ts
var src_default = { init: methods_default.init };
export {
  src_default as default
};
