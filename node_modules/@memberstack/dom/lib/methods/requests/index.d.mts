import { GetPostsParams, GetThreadsParams, CreatePostParams, UpdatePostParams, PostVoteParams, DeletePostParams, CreateThreadParams, UpdateThreadParams, ThreadVoteParams, DeleteThreadParams, GetSecureContentParams, SignupWithProviderParams, LoginWithProviderParams, LoginMemberEmailPasswordParams, SendMemberLoginPasswordlessEmailParams, LoginMemberPasswordlessParams, GetPlanParams, UpdateMemberJSONParams, AddPlanParams, PurchasePlansWithCheckoutParams, LaunchStripeCustomerPortalParams, RemovePlanParams, UpdateMemberParams, UpdateMemberAuthParams, SetPasswordParams, SignupMemberEmailPasswordParams, UpdateMemberProfileImageParams, SendMemberResetPasswordEmailParams, ResetMemberPasswordParams } from '../../types/params.mjs';
import { GetPostsPayload, GetThreadsPayload, CreatePostPayload, UpdatePostPayload, CreateThreadPayload, UpdateThreadPayload, GetSecureContentPayload, ConnectProviderPayload, GetAppAndMemberPayload, AppPayload, LoginMemberEmailPasswordPayload, SendMemberLoginPasswordlessEmailPayload, GetPlanPayload, GetPlansPayload, GetRestrictedUrlGroupsPayload, GetCurrentMemberPayload, GetMemberJSONPayload, AddPlanPayload, PurchasePlansWithCheckoutPayload, LaunchStripeCustomerPortalPayload, RemovePlanPayload, UpdateMemberPayload, UpdateMemberAuthPayload, SetPasswordPayload, SignupMemberEmailPasswordPayload, UpdateMemberProfileImagePayload, SendMemberVerificationEmailPayload, SendMemberResetPasswordEmailPayload, ResetMemberPassworPayload, LogoutMemberPayload } from '../../types/payloads.mjs';
import '../../types/utils/payloads.mjs';

interface MemberstackOptions {
    token?: BearerToken;
}
interface GetCurrentMemberParams {
    useCache?: Boolean;
}
interface ClientConfig {
    publicKey: string;
    domain: string;
    sessionDurationDays?: number;
    appId?: string;
    token?: string;
}
declare function getSessionDurationDays(unixTimestampMillis: number): number;
type BearerToken = string;
declare const initRequest: ({ publicKey, appId, token, domain, }: ClientConfig) => {
    postIsTyping(params: {
        channelKey: string;
    }): Promise<void>;
    getChannelInfo(params?: {
        channelKey: string;
    }): Promise<any>;
    getPosts(params?: GetPostsParams): Promise<GetPostsPayload>;
    getThreads(params?: GetThreadsParams): Promise<GetThreadsPayload>;
    createPost(params?: CreatePostParams): Promise<CreatePostPayload>;
    updatePost(params?: UpdatePostParams): Promise<UpdatePostPayload>;
    postVote(params?: PostVoteParams): Promise<void>;
    deletePost(params?: DeletePostParams): Promise<void>;
    createThread(params?: CreateThreadParams): Promise<CreateThreadPayload>;
    updateThread(params?: UpdateThreadParams): Promise<UpdateThreadPayload>;
    threadVote(params?: ThreadVoteParams): Promise<void>;
    deleteThread(params?: DeleteThreadParams): Promise<void>;
    getSecureContent(params?: GetSecureContentParams): Promise<GetSecureContentPayload>;
    signupWithProvider(params?: SignupWithProviderParams): Promise<unknown>;
    loginWithProvider(params?: LoginWithProviderParams): Promise<unknown>;
    connectProvider(params?: LoginWithProviderParams): Promise<ConnectProviderPayload>;
    disconnectProvider(params: LoginWithProviderParams): Promise<ConnectProviderPayload>;
    getAppAndMember(params?: any): Promise<GetAppAndMemberPayload>;
    getApp(): Promise<AppPayload>;
    loginMemberEmailPassword(params: LoginMemberEmailPasswordParams, options?: any): Promise<LoginMemberEmailPasswordPayload>;
    sendMemberLoginPasswordlessEmail(params: SendMemberLoginPasswordlessEmailParams, options?: any): Promise<SendMemberLoginPasswordlessEmailPayload>;
    sendMemberSignupPasswordlessEmail(params: SendMemberLoginPasswordlessEmailParams, options?: any): Promise<SendMemberLoginPasswordlessEmailPayload>;
    loginMemberPasswordless(params: LoginMemberPasswordlessParams, options?: any): Promise<LoginMemberEmailPasswordPayload>;
    getPlan(params: GetPlanParams): Promise<GetPlanPayload>;
    getPlans(): Promise<GetPlansPayload>;
    getRestrictedUrlGroups(): Promise<GetRestrictedUrlGroupsPayload>;
    getCurrentMember(options?: GetCurrentMemberParams): Promise<GetCurrentMemberPayload>;
    getMemberJSON(options?: MemberstackOptions): Promise<GetMemberJSONPayload>;
    updateMemberJSON(params: UpdateMemberJSONParams, options?: MemberstackOptions): Promise<GetMemberJSONPayload>;
    addPlan(params: AddPlanParams, options?: MemberstackOptions): Promise<AddPlanPayload>;
    purchasePlansWithCheckout(params: PurchasePlansWithCheckoutParams, options?: MemberstackOptions): Promise<PurchasePlansWithCheckoutPayload>;
    launchStripeCustomerPortal(params: LaunchStripeCustomerPortalParams, options?: MemberstackOptions): Promise<LaunchStripeCustomerPortalPayload>;
    removePlan(params: RemovePlanParams, options?: MemberstackOptions): Promise<RemovePlanPayload>;
    updateMember(params: UpdateMemberParams, options?: MemberstackOptions): Promise<UpdateMemberPayload>;
    updateMemberAuth(params: UpdateMemberAuthParams, options?: MemberstackOptions): Promise<UpdateMemberAuthPayload>;
    setPassword(params: SetPasswordParams, options?: MemberstackOptions): Promise<SetPasswordPayload>;
    signupMemberPasswordless(params: Omit<SignupMemberEmailPasswordParams, "password"> & {
        passwordlessToken: string;
    }, options?: any): Promise<SignupMemberEmailPasswordPayload>;
    signupMemberEmailPassword(params: SignupMemberEmailPasswordParams, options?: any): Promise<SignupMemberEmailPasswordPayload>;
    updateMemberProfileImage(params: UpdateMemberProfileImageParams): Promise<UpdateMemberProfileImagePayload>;
    sendMemberVerificationEmail(): Promise<SendMemberVerificationEmailPayload>;
    sendMemberResetPasswordEmail(params: SendMemberResetPasswordEmailParams): Promise<SendMemberResetPasswordEmailPayload>;
    resetMemberPassword(params: ResetMemberPasswordParams): Promise<ResetMemberPassworPayload>;
    logout(options?: MemberstackOptions): Promise<LogoutMemberPayload>;
};

export { ClientConfig, GetCurrentMemberParams, MemberstackOptions, getSessionDurationDays, initRequest };
