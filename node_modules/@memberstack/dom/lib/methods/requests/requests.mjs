var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/methods/requests/requests.ts
import axios from "axios";

// src/constants/endpoints.ts
var endpoints = {
  API: "https://client.memberstack.com"
};

// src/utils/cookies.ts
import Cookie from "js-cookie";
var memberAuthTokenName = "_ms-mid";
function isLocalStorageAvailable() {
  try {
    localStorage.setItem("test", "test");
    localStorage.removeItem("test");
    return true;
  } catch (e) {
    return false;
  }
}
var localStorageAvailable = isLocalStorageAvailable();
var useCookies = false;
var getMemberToken = () => {
  if (localStorageAvailable && !useCookies) {
    const memAuthToken = localStorage.getItem(memberAuthTokenName);
    if (memAuthToken)
      return memAuthToken;
  }
  return Cookie.get(memberAuthTokenName);
};

// src/methods/requests/requests.ts
var HttpMethod = /* @__PURE__ */ ((HttpMethod2) => {
  HttpMethod2["POST"] = "POST";
  HttpMethod2["GET"] = "GET";
  HttpMethod2["PATCH"] = "PATCH";
  HttpMethod2["DELETE"] = "DELETE";
  return HttpMethod2;
})(HttpMethod || {});
var HttpHeaders = /* @__PURE__ */ ((HttpHeaders2) => {
  HttpHeaders2["AUTHORIZATION"] = "Authorization";
  HttpHeaders2["API_KEY"] = "X-API-Key";
  HttpHeaders2["APP_ID"] = "X-APP-ID";
  HttpHeaders2["API_VERSION"] = "X-API-Version";
  HttpHeaders2["USER_AGENT"] = "X-User-Agent";
  return HttpHeaders2;
})(HttpHeaders || {});
var createRequestHandler = ({
  publicKey,
  appId,
  token,
  customEndpoint
}) => {
  return {
    sendRequest: (data, options) => __async(void 0, null, function* () {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      try {
        const { url } = data;
        const memberToken = getMemberToken();
        const authHeader = [
          (_b = (_a = data.headers) == null ? void 0 : _a["Authorization"]) == null ? void 0 : _b.replace("Bearer ", ""),
          memberToken,
          options == null ? void 0 : options.token
        ].find((x) => x);
        const formattedUrl = `${customEndpoint || endpoints.API}${url}`;
        const res = yield axios({
          method: data.method,
          data: data.data,
          url: formattedUrl,
          headers: __spreadValues(__spreadProps(__spreadValues(__spreadValues(__spreadValues({}, authHeader && { authorization: `Bearer ${authHeader}` }), publicKey && { ["X-API-Key" /* API_KEY */]: publicKey }), appId && { ["X-APP-ID" /* APP_ID */]: appId }), {
            ["X-User-Agent" /* USER_AGENT */]: "@memberstack/client@1.2.0"
          }), data.contentType && { "Content-Type": data.contentType }),
          withCredentials: true
        });
        if ((_c = res == null ? void 0 : res.headers) == null ? void 0 : _c["ms-mid"]) {
          token = res.headers["ms-mid"];
        }
        if ((_d = res == null ? void 0 : res.data) == null ? void 0 : _d.error) {
          if (res.data.error.name === "JsonWebTokenError") {
            throw {
              code: "client/invalid-token",
              message: "An invalid token has been provided. Please make sure the token is valid."
            };
          }
          throw (_e = res.data) == null ? void 0 : _e.error;
        }
        return res == null ? void 0 : res.data;
      } catch (e) {
        if (!e.response)
          throw e;
        throw ((_g = (_f = e.response) == null ? void 0 : _f.data) == null ? void 0 : _g.error) || ((_h = e.response) == null ? void 0 : _h.data);
      }
    })
  };
};
export {
  HttpHeaders,
  HttpMethod,
  createRequestHandler
};
