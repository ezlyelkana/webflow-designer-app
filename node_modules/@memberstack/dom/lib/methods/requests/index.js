var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/methods/requests/index.ts
var requests_exports = {};
__export(requests_exports, {
  getSessionDurationDays: () => getSessionDurationDays,
  initRequest: () => initRequest
});
module.exports = __toCommonJS(requests_exports);

// src/methods/requests/requests.ts
var import_axios = __toESM(require("axios"));

// src/constants/endpoints.ts
var endpoints = {
  API: "https://client.memberstack.com"
};

// src/utils/cookies.ts
var import_js_cookie = __toESM(require("js-cookie"));
var memberAuthTokenName = "_ms-mid";
function isLocalStorageAvailable() {
  try {
    localStorage.setItem("test", "test");
    localStorage.removeItem("test");
    return true;
  } catch (e) {
    return false;
  }
}
var localStorageAvailable = isLocalStorageAvailable();
var useCookies = false;
var setCookieOnRootDomain = false;
var setMemberToken = (token, expires) => {
  if (localStorageAvailable && !useCookies) {
    localStorage.setItem(memberAuthTokenName, token);
  } else {
    const domain = window.location.hostname.split(".").slice(-2).join(".");
    import_js_cookie.default.set(memberAuthTokenName, token, __spreadValues({
      expires: expires && Number(expires) || 14,
      sameSite: "strict"
    }, setCookieOnRootDomain && { domain }));
  }
};
var removeMemberToken = () => {
  if (localStorageAvailable) {
    localStorage.removeItem(memberAuthTokenName);
  }
  const domain = window.location.hostname.split(".").slice(-2).join(".");
  import_js_cookie.default.set(memberAuthTokenName, "", __spreadValues({
    expires: -1,
    sameSite: "strict"
  }, setCookieOnRootDomain && { domain }));
  import_js_cookie.default.set(memberAuthTokenName, "", {
    expires: -1,
    sameSite: "strict"
  });
};
var getMemberToken = () => {
  if (localStorageAvailable && !useCookies) {
    const memAuthToken = localStorage.getItem(memberAuthTokenName);
    if (memAuthToken)
      return memAuthToken;
  }
  return import_js_cookie.default.get(memberAuthTokenName);
};

// src/methods/requests/requests.ts
var createRequestHandler = ({
  publicKey,
  appId,
  token,
  customEndpoint
}) => {
  return {
    sendRequest: (data, options) => __async(void 0, null, function* () {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      try {
        const { url } = data;
        const memberToken = getMemberToken();
        const authHeader = [
          (_b = (_a = data.headers) == null ? void 0 : _a["Authorization"]) == null ? void 0 : _b.replace("Bearer ", ""),
          memberToken,
          options == null ? void 0 : options.token
        ].find((x) => x);
        const formattedUrl = `${customEndpoint || endpoints.API}${url}`;
        const res = yield (0, import_axios.default)({
          method: data.method,
          data: data.data,
          url: formattedUrl,
          headers: __spreadValues(__spreadProps(__spreadValues(__spreadValues(__spreadValues({}, authHeader && { authorization: `Bearer ${authHeader}` }), publicKey && { ["X-API-Key" /* API_KEY */]: publicKey }), appId && { ["X-APP-ID" /* APP_ID */]: appId }), {
            ["X-User-Agent" /* USER_AGENT */]: "@memberstack/client@1.2.0"
          }), data.contentType && { "Content-Type": data.contentType }),
          withCredentials: true
        });
        if ((_c = res == null ? void 0 : res.headers) == null ? void 0 : _c["ms-mid"]) {
          token = res.headers["ms-mid"];
        }
        if ((_d = res == null ? void 0 : res.data) == null ? void 0 : _d.error) {
          if (res.data.error.name === "JsonWebTokenError") {
            throw {
              code: "client/invalid-token",
              message: "An invalid token has been provided. Please make sure the token is valid."
            };
          }
          throw (_e = res.data) == null ? void 0 : _e.error;
        }
        return res == null ? void 0 : res.data;
      } catch (e) {
        if (!e.response)
          throw e;
        throw ((_g = (_f = e.response) == null ? void 0 : _f.data) == null ? void 0 : _g.error) || ((_h = e.response) == null ? void 0 : _h.data);
      }
    })
  };
};

// src/auth/index.ts
var createObservable = () => {
  const observer = /* @__PURE__ */ new Map();
  return {
    subscribe: (key, fn) => {
      if (typeof fn !== "function")
        return;
      return observer.set(key, fn);
    },
    unsubscribe: (key) => {
      return observer.delete(key);
    },
    notify: (data) => {
      return [...observer.values()].forEach((fn) => fn(data));
    }
  };
};
var observable = createObservable();
var getPersistedMember = () => {
  return JSON.parse(localStorage == null ? void 0 : localStorage.getItem("_ms-mem"));
};
var setPersistedMember = (member) => {
  if (member) {
    const data = JSON.stringify(member);
    if (data)
      localStorage == null ? void 0 : localStorage.setItem("_ms-mem", data);
    observable.notify(member);
  }
};
var updatePersistedMember = (member) => {
  if (member) {
    const data = JSON.stringify(member);
    if (data)
      localStorage == null ? void 0 : localStorage.setItem("_ms-mem", data);
  } else {
    localStorage == null ? void 0 : localStorage.removeItem("_ms-mem");
    removeMemberToken();
  }
};
var unsetPersistedMember = () => {
  localStorage == null ? void 0 : localStorage.removeItem("_ms-mem");
  removeMemberToken();
  observable.notify(null);
};

// src/methods/requests/index.ts
function getSessionDurationDays(unixTimestampMillis) {
  const now = Date.now();
  const differenceMillis = unixTimestampMillis - now;
  return Math.ceil(differenceMillis / (24 * 60 * 60 * 1e3));
}
var addHeaders = (options) => __spreadValues({}, (options == null ? void 0 : options.token) && {
  Authorization: `Bearer ${options.token}`
});
var promiseResolve;
var promiseReject;
var receiveMessage = (event) => {
  var _a;
  const { data, origin } = event;
  if (API_ENDPOINT !== origin)
    return;
  if ((_a = data == null ? void 0 : data.data) == null ? void 0 : _a.member) {
    const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
    setPersistedMember(data.data.member);
    setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
  }
  if (data == null ? void 0 : data.error) {
    promiseReject(data.error);
  }
  promiseResolve(data);
};
var windowObjectReference = null;
var previousUrl = null;
var openSignInWindow = (url, name) => __async(void 0, null, function* () {
  window.removeEventListener("message", receiveMessage);
  const dualScreenLeft = window.screenLeft !== void 0 ? window.screenLeft : window.screenX;
  const dualScreenTop = window.screenTop !== void 0 ? window.screenTop : window.screenY;
  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;
  const systemZoom = width / window.screen.availWidth;
  const left = (width - 600) / 2 / systemZoom + dualScreenLeft;
  const top = (height - 700) / 2 / systemZoom + dualScreenTop;
  const strWindowFeatures = `toolbar=no, menubar=no, width=${600 / systemZoom}, height=${700 / systemZoom}, top=${top}, left=${left}`;
  if (windowObjectReference === null || windowObjectReference.closed) {
    windowObjectReference = window.open(url, name, strWindowFeatures);
  } else if (previousUrl !== url) {
    windowObjectReference = window.open(url, name, strWindowFeatures);
    windowObjectReference.focus();
  } else {
    windowObjectReference.focus();
  }
  window.addEventListener("message", (event) => receiveMessage(event), false);
  previousUrl = url;
  window.addEventListener("beforeunload", () => {
    windowObjectReference == null ? void 0 : windowObjectReference.close();
  });
  return new Promise((resolve, reject) => {
    promiseResolve = resolve;
    promiseReject = reject;
  });
});
var API_ENDPOINT;
var initRequest = ({
  publicKey,
  appId,
  token,
  domain
  //sessionDurationDays
}) => {
  const { sendRequest } = createRequestHandler({
    publicKey,
    token,
    customEndpoint: domain,
    appId
  });
  API_ENDPOINT = domain;
  return {
    postIsTyping(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/posts/typing`,
          data: {
            channelKey: params.channelKey
          }
        });
      });
    },
    getChannelInfo(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams({
          channelKey: params.channelKey
        });
        return sendRequest({
          method: "GET" /* GET */,
          url: `/comments/channels/info?${queryParams}`
        });
      });
    },
    getPosts(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadValues(__spreadValues(__spreadValues({
          channelKey: params.channelKey
        }, params.after && {
          after: params.after
        }), params.order && {
          order: params.order
        }), params.limit && {
          limit: params.limit.toString()
        }));
        return sendRequest({
          method: "GET" /* GET */,
          url: `/comments/posts?${queryParams}`
        });
      });
    },
    getThreads(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadValues(__spreadValues(__spreadValues({
          postId: params.postId
        }, params.after && {
          after: params.after
        }), params.order && {
          order: params.order
        }), params.limit && {
          limit: params.limit.toString()
        }));
        return sendRequest({
          method: "GET" /* GET */,
          url: `/comments/threads?${queryParams}`
        });
      });
    },
    createPost(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/posts`,
          data: {
            channelKey: params.channelKey,
            content: params.content
          }
        });
      });
    },
    updatePost(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "PATCH" /* PATCH */,
          url: `/comments/posts/${params.postId}/update`,
          data: {
            content: params.content
          }
        });
      });
    },
    postVote(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/posts/${params.postId}/vote`,
          data: {
            vote: params.vote
          }
        });
      });
    },
    deletePost(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "DELETE" /* DELETE */,
          url: `/comments/posts/${params.postId}`
        });
      });
    },
    createThread(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/threads`,
          data: {
            postId: params.postId,
            content: params.content
          }
        });
      });
    },
    updateThread(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "PATCH" /* PATCH */,
          url: `/comments/threads/${params.threadId}/update`,
          data: {
            content: params.content
          }
        });
      });
    },
    // vote thread
    threadVote(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/threads/${params.threadId}/vote`,
          data: {
            vote: params.vote
          }
        });
      });
    },
    deleteThread(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "DELETE" /* DELETE */,
          url: `/comments/threads/${params.threadId}`
        });
      });
    },
    getSecureContent(params) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: "/secure-content",
          data: {
            contentId: params.contentId
          }
        });
        return data;
      });
    },
    signupWithProvider(params) {
      return __async(this, null, function* () {
        const customFields = encodeURIComponent(params.customFields ? JSON.stringify(params.customFields) : "{}");
        const plans = encodeURIComponent(params.plans ? JSON.stringify(params.plans) : "[]");
        const queryParams = new URLSearchParams(__spreadProps(__spreadValues({
          provider: params.provider,
          customFields,
          plans,
          appId
        }, publicKey && {
          publicKey
        }), {
          origin: window.location.hostname
        }));
        return openSignInWindow(`${domain}/auth-provider/signup?${queryParams}`, "signup");
      });
    },
    loginWithProvider(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadProps(__spreadValues({
          provider: params.provider,
          appId
        }, publicKey && {
          publicKey
        }), {
          origin: window.location.hostname
        }));
        return openSignInWindow(`${domain}/auth-provider/login?${queryParams}`, "login");
      });
    },
    connectProvider(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadProps(__spreadValues({
          provider: params.provider,
          appId
        }, publicKey && {
          publicKey
        }), {
          member: getMemberToken(),
          origin: window.location.hostname
        }));
        return openSignInWindow(`${domain}/auth-provider/connect?${queryParams}`, "connect");
      });
    },
    disconnectProvider(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: "/member/disconnect-provider",
          data: {
            provider: params.provider
          }
        });
      });
    },
    getAppAndMember(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams({
          // @ts-ignore
          includeSSOText: window == null ? void 0 : window.ssoUI
        });
        return sendRequest({
          method: "GET" /* GET */,
          url: `/app-member?${queryParams}`
        });
      });
    },
    getApp() {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams({
          // @ts-ignore
          includeSSOText: window == null ? void 0 : window.ssoUI
        });
        return sendRequest({
          method: "GET" /* GET */,
          url: `/app?${queryParams}`
        });
      });
    },
    loginMemberEmailPassword(params, options) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/login`,
          data: {
            email: params.email,
            password: params.password,
            options
          }
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    sendMemberLoginPasswordlessEmail(params, options) {
      return __async(this, null, function* () {
        return yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/passwordless/login/send`,
          data: {
            email: params.email
          }
        });
      });
    },
    sendMemberSignupPasswordlessEmail(params, options) {
      return __async(this, null, function* () {
        return yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/passwordless/signup/send`,
          data: {
            email: params.email
          }
        });
      });
    },
    loginMemberPasswordless(params, options) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/passwordless/login`,
          data: {
            passwordlessToken: params.passwordlessToken,
            email: params.email,
            options
          }
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    getPlan(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "GET" /* GET */,
          url: `/app/plans/${params.planId}`
        });
      });
    },
    getPlans() {
      return __async(this, null, function* () {
        const { data } = yield sendRequest({
          method: "GET" /* GET */,
          url: `/app`
        });
        return {
          data: data.plans
        };
      });
    },
    getRestrictedUrlGroups() {
      return __async(this, null, function* () {
        const { data } = yield sendRequest({
          method: "GET" /* GET */,
          url: `/app`
        });
        return {
          data: data.contentGroups
        };
      });
    },
    getCurrentMember(options) {
      return __async(this, null, function* () {
        const getMemberRequest = sendRequest({
          method: "GET" /* GET */,
          url: `/member?${Math.floor(1e3 + Math.random() * 9e3)}`,
          headers: addHeaders(options)
        });
        function setMember() {
          return __async(this, null, function* () {
            const data = yield getMemberRequest;
            updatePersistedMember(data.data);
          });
        }
        setMember();
        if ((options == null ? void 0 : options.useCache) === true) {
          const member = getPersistedMember();
          return { data: member };
        } else {
          return getMemberRequest;
        }
      });
    },
    getMemberJSON(options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "GET" /* GET */,
          url: `/member/json`,
          headers: addHeaders(options)
        });
      });
    },
    updateMemberJSON(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/json`,
          data: {
            json: params.json
          },
          headers: addHeaders(options)
        });
      });
    },
    addPlan(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/plans/add`,
          data: {
            planId: params.planId
          },
          headers: addHeaders(options)
        });
      });
    },
    purchasePlansWithCheckout(params, options) {
      return __async(this, null, function* () {
        function getRedirectURL(URL) {
          let redirectUrl = window.location.href;
          const urlParam = URL;
          if (urlParam) {
            if (urlParam.indexOf("http://") === 0 || urlParam.indexOf("https://") === 0) {
              redirectUrl = urlParam;
            } else {
              redirectUrl = window.location.origin + urlParam;
            }
          }
          return redirectUrl;
        }
        const success_url = params.successUrl ? getRedirectURL(params.successUrl) : void 0;
        const cancel_url = getRedirectURL(params.cancelUrl);
        const request = yield sendRequest({
          method: "POST" /* POST */,
          url: `/member/plans/create-checkout-session`,
          data: {
            priceId: params.priceId,
            couponId: params.couponId,
            //window.location requires dom
            success_url,
            cancel_url,
            origin_url: window.location.href
          },
          headers: addHeaders(options)
        });
        if (params.autoRedirect === false) {
          return request;
        }
        window.location.href = request.data.url;
      });
    },
    // used for plan updates
    launchStripeCustomerPortal(params, options) {
      return __async(this, null, function* () {
        function getRedirectURL(URL) {
          let redirectUrl = window.location.href;
          const urlParam = URL;
          if (urlParam) {
            if (urlParam.indexOf("http://") === 0 || urlParam.indexOf("https://") === 0) {
              redirectUrl = urlParam;
            } else {
              redirectUrl = window.location.origin + urlParam;
            }
          }
          return redirectUrl;
        }
        const returnUrl = (params == null ? void 0 : params.returnUrl) ? getRedirectURL(params.returnUrl) : void 0;
        const request = yield sendRequest({
          method: "POST" /* POST */,
          url: `/member/create-billing-portal-session`,
          data: __spreadValues({
            //window.location requires dom
            return_url: returnUrl,
            origin_url: window.location.href
          }, params && {
            priceIds: params.priceIds,
            configuration: params.configuration
          }),
          headers: addHeaders(options)
        });
        if ((params == null ? void 0 : params.autoRedirect) === false) {
          return request;
        }
        window.location.href = request.data.url;
      });
    },
    removePlan(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/plans/remove`,
          data: {
            planId: params.planId
          },
          headers: addHeaders(options)
        });
      });
    },
    updateMember(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member`,
          data: __spreadValues({}, params.customFields && { customFields: params.customFields }),
          headers: addHeaders(options)
        });
      });
    },
    updateMemberAuth(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member-auth`,
          data: __spreadValues(__spreadValues(__spreadValues({}, params.email && { email: params.email }), params.oldPassword && { oldPassword: params.oldPassword }), params.newPassword && { newPassword: params.newPassword }),
          headers: addHeaders(options)
        });
      });
    },
    setPassword(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/set-password`,
          data: {
            password: params.password
          },
          headers: addHeaders(options)
        });
      });
    },
    signupMemberPasswordless(params, options) {
      return __async(this, null, function* () {
        var _a2, _b;
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/signup?isPasswordless=true`,
          data: __spreadValues(__spreadProps(__spreadValues({
            email: params.email,
            customFields: params.customFields,
            passwordlessToken: params.passwordlessToken,
            metaData: params.metaData
          }, params.plans && { plans: params.plans }), {
            //internal use only
            origin_domain: window.location.origin,
            options
          }), ((_a2 = window.Rewardful) == null ? void 0 : _a2.referral) && {
            rewardfulData: {
              // @ts-ignore
              referral: window.Rewardful.referral,
              // @ts-ignore
              coupon: (_b = window.Rewardful.coupon) == null ? void 0 : _b.id
            }
          })
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    signupMemberEmailPassword(params, options) {
      return __async(this, null, function* () {
        var _a2, _b;
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/signup`,
          data: __spreadValues(__spreadProps(__spreadValues({
            email: params.email,
            password: params.password,
            customFields: params.customFields,
            metaData: params.metaData,
            captchaToken: params.captchaToken
          }, params.plans && { plans: params.plans }), {
            //internal use only
            origin_domain: window.location.origin,
            options
          }), ((_a2 = window.Rewardful) == null ? void 0 : _a2.referral) && {
            rewardfulData: {
              // @ts-ignore
              referral: window.Rewardful.referral,
              // @ts-ignore
              coupon: (_b = window.Rewardful.coupon) == null ? void 0 : _b.id
            }
          })
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    updateMemberProfileImage(params) {
      return __async(this, null, function* () {
        if (params.profileImage) {
          const formData = new FormData();
          formData.append("profileImage", params.profileImage);
          return sendRequest({
            method: "POST" /* POST */,
            url: `/member/profile-image`,
            data: formData,
            contentType: "multipart/form-data"
          });
        }
      });
    },
    sendMemberVerificationEmail() {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/auth/send-email-verification`,
          data: {
            //internal use only
            origin_domain: window.location.origin
          }
        });
      });
    },
    sendMemberResetPasswordEmail(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/auth/send-reset-password-email`,
          data: {
            email: params.email
          }
        });
      });
    },
    resetMemberPassword(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/auth/reset-password`,
          data: {
            token: params.token,
            newPassword: params.newPassword
          }
        });
      });
    },
    logout(options) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/member/logout`,
          headers: addHeaders(options)
        });
        unsetPersistedMember();
        return data;
      });
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getSessionDurationDays,
  initRequest
});
