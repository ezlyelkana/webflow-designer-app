var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/utils/cookies.ts
import Cookie from "js-cookie";
var memberAuthTokenName = "_ms-mid";
function isLocalStorageAvailable() {
  try {
    localStorage.setItem("test", "test");
    localStorage.removeItem("test");
    return true;
  } catch (e) {
    return false;
  }
}
var localStorageAvailable = isLocalStorageAvailable();
var useCookies = false;
var setCookieOnRootDomain = false;
var setUseCookies = (setCookieOnRoot) => {
  useCookies = true;
  if (setCookieOnRoot)
    setCookieOnRootDomain = true;
};
var setMemberToken = (token, expires) => {
  if (localStorageAvailable && !useCookies) {
    localStorage.setItem(memberAuthTokenName, token);
  } else {
    const domain = window.location.hostname.split(".").slice(-2).join(".");
    Cookie.set(memberAuthTokenName, token, __spreadValues({
      expires: expires && Number(expires) || 14,
      sameSite: "strict"
    }, setCookieOnRootDomain && { domain }));
  }
};
var removeMemberToken = () => {
  if (localStorageAvailable) {
    localStorage.removeItem(memberAuthTokenName);
  }
  const domain = window.location.hostname.split(".").slice(-2).join(".");
  Cookie.set(memberAuthTokenName, "", __spreadValues({
    expires: -1,
    sameSite: "strict"
  }, setCookieOnRootDomain && { domain }));
  Cookie.set(memberAuthTokenName, "", {
    expires: -1,
    sameSite: "strict"
  });
};
var getMemberToken = () => {
  if (localStorageAvailable && !useCookies) {
    const memAuthToken = localStorage.getItem(memberAuthTokenName);
    if (memAuthToken)
      return memAuthToken;
  }
  return Cookie.get(memberAuthTokenName);
};
var setMemberTokenIfAvailable = () => {
  if (typeof window !== "undefined") {
    const urlParams = new URLSearchParams(window.location.search);
    const memberToken = urlParams.get("memberToken");
    if (memberToken)
      setMemberToken(memberToken);
  }
};
export {
  getMemberToken,
  removeMemberToken,
  setMemberToken,
  setMemberTokenIfAvailable,
  setUseCookies
};
