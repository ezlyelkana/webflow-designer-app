declare namespace Payload {
    interface PaginatedResponse<T> {
        hasNext: boolean;
        endCursor: string | null;
        totalCount: number;
        data: T[];
    }
    interface Transforms {
        Pagination: {
            hasNext: boolean;
            endCursor: string | null;
            totalCount: number;
        };
        RemovePlan: {
            member: Transforms["Member"];
        };
        SendMemberVerificationEmail: {
            success: boolean;
        };
        ResetMemberPassword: {
            success: boolean;
        };
        GetAppAndMember: {
            app: Transforms["App"];
            member: Transforms["Member"] | null;
        };
        SecureContent: {
            content: string;
            type: "HTML" | "CSS" | "LINK" | "JS" | "JSON" | "TEXT" | "IMAGE" | "FILE";
        };
        Post: {
            id: string;
            internalOrder: string;
            createdAt: string;
            content: string;
            member: {
                id: string;
                customFields: object;
                profileImage: string;
            };
            _count: {
                Threads: number;
                likedBy: number;
                dislikedBy: number;
            };
        };
        Posts: {
            posts: Transforms["Post"][];
            totalCount: number;
        };
        Thread: {
            id: string;
            internalOrder: string;
            createdAt: string;
            content: string;
            member: {
                id: string;
                customFields: object;
                profileImage: string;
            };
            _count: {
                Threads: number;
                likedBy: number;
            };
        };
        Threads: {
            threads: Transforms["Thread"][];
        };
        App: {
            id: string;
            name: string;
            mode: "live" | "sandbox";
            plans: Transforms["Plan"][];
            contentGroups: Transforms["RestrictedUrlGroup"][];
            emailVerificationEnabled: boolean;
            requireEmailVerification: boolean;
            customField: Transforms["CustomField"][];
            branding: Transforms["Branding"];
            authProviders: Transforms["AuthProvider"][];
        };
        Branding: {
            logo: string;
            colors: {
                lightMode: {
                    primaryButton: string;
                };
            };
        };
        RestrictedUrlGroup: {
            id: string;
            name: string;
            key: string;
            allowAllMembers: boolean;
            activeMemberHasAccess?: boolean;
            redirect: string;
            urls: {
                url: string;
                filter: string;
            }[];
            plans: {
                id: string;
            }[];
        };
        MemberAuth: {
            tokens: {
                accessToken: string;
                expires: number;
                type: "bearer";
            };
            member: Transforms["Member"];
            redirect: string;
            contentGroups?: Transforms["RestrictedUrlGroup"][];
        };
        MemberJSON: {
            json: object;
        };
        AuthProviders: {
            providers: {
                provider: string;
            }[];
            message?: string;
        };
        Member: {
            id: string;
            verified: boolean;
            profileImage: string;
            auth: {
                email: string;
                hasPassword: boolean;
                providers: {
                    provider: string;
                }[];
            };
            loginRedirect: string;
            stripeCustomerId: string;
            createdAt: string;
            metaData: object;
            customFields: object;
            permissions: string[] | [];
            planConnections: Transforms["MemberPlanConnection"][];
        };
        MemberReceipt: {
            id: string;
            amount: number;
            url: string;
            stripe?: {
                url: string;
            };
            number: string;
            purchase: string;
            invoice: string;
            createdAt: string;
            currency: string;
        };
        MemberInvoices: PaginatedResponse<{
            id: string;
            status: string;
            amount: number;
            url: string;
            description: string;
            number: string;
            purchase: string;
        }>;
        MemberReceipts: PaginatedResponse<{
            id: string;
            amount: string;
            url: string;
            number: string;
            planConnection: string;
            invoice: Transforms["MemberInvoice"];
        }>;
        MemberCard: {
            id: string;
            brand: string;
            expMonth: string;
            expYear: string;
            last4: string;
            default: boolean;
        };
        MemberInvoice: {
            id: string;
            status: string;
            amount: number;
            url: string;
            description: string;
            number: string;
            planConnection: string;
            createdAt: string;
            currency: string;
        };
        Plan: {
            id: string;
            name: string;
            description: string;
            status: string;
            redirects: {
                afterLogin: string;
                afterLogout: string;
                afterSignup: string;
            };
            prices?: Transforms["Price"][] | [];
        };
        Price: {
            id: string;
            amount: string;
            interval: {
                type: string;
                count: number;
            };
            name: string;
            type: string;
            status: string;
            currency: string;
        };
        Permission: {
            id: string;
            name: string;
            description: string;
        };
        PermissionGroup: {
            id: string;
            name: string;
            permissions: Transforms["Permission"][];
        };
        CustomField: {
            order: number;
            key: string;
            label: string;
            hidden: boolean;
        };
        MemberPlanConnection: {
            id: string;
            active: boolean;
            status: string;
            planId: string;
            type: string;
            payment: {
                amount: number;
                currency: string;
                status: string;
                lastBillingDate: number | null;
                nextBillingDate: number | null;
                cancelAtDate: number | null;
                priceId: string;
            } | null;
        };
        Purchase: {
            plan: string;
            payment: {
                requiresPayment: boolean;
                requiresAuthentication: boolean;
            };
        };
        AddPlan: {
            redirect: string;
            member: Transforms["Member"];
        };
        PurchaseWithCheckout: {
            url: string;
        };
        LaunchStripeCustomerPortal: {
            url: string;
        };
        OpenStripeCustomerPortal: {
            url: string;
        };
        AuthenticationClientSecret: string;
        AuthProvider: {
            clientId: string;
            provider: string;
            providerType: string;
            icon: string;
        };
        TotalCheckoutAmount: {
            total: number;
            subTotal: number;
            currency: string;
            setupFee?: {
                enabled: boolean;
                amount: number;
                name: string;
            };
            freeTrial?: {
                days: number;
                enabled: boolean;
            };
            tax?: {
                name: string;
                percent: number;
                description: string;
            }[];
        };
    }
}

export { Payload };
